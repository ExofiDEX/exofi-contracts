{
  "0xee42f84b1aaab4360000b92406187c7be7773ee7311714687cdfce2260d2ee13": {
    "name": "Arb",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "Arb",
      "sourceName": "contracts/Bot/Arb.sol",
      "abi": [
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        {
          "inputs": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "router",
                  "type": "address"
                },
                {
                  "internalType": "address[]",
                  "name": "path",
                  "type": "address[]"
                }
              ],
              "internalType": "struct MetaPath[]",
              "name": "metaPath",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "getAmountOutMin",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "renounceOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "router",
                  "type": "address"
                },
                {
                  "internalType": "address[]",
                  "name": "path",
                  "type": "address[]"
                }
              ],
              "internalType": "struct MetaPath[]",
              "name": "metaPath",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "trade",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "transferOtherERC20Token",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "transferOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        }
      ],
      "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610ef68061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80638da5cb5b116100505780638da5cb5b146100ba578063baaf2d4f146100e2578063f2fde38b1461010557600080fd5b806335b7163f146100775780634f8072d01461008c578063715018a6146100b2575b600080fd5b61008a610085366004610a60565b610118565b005b61009f61009a366004610a60565b610571565b6040519081526020015b60405180910390f35b61008a6106f8565b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100a9565b6100f56100f0366004610afd565b610785565b60405190151581526020016100a9565b61008a610113366004610b29565b6108e1565b60005473ffffffffffffffffffffffffffffffffffffffff16331461019e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b808060005b84811015610500578585828181106101bd576101bd610b4d565b90506020028101906101cf9190610b7c565b6101dd906020810190610bba565b60008181106101ee576101ee610b4d565b90506020020160208101906102039190610b29565b73ffffffffffffffffffffffffffffffffffffffff1663095ea7b387878481811061023057610230610b4d565b90506020028101906102429190610b7c565b610250906020810190610b29565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602481018590526044016020604051808303816000875af11580156102c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e69190610c29565b508585828181106102f9576102f9610b4d565b905060200281019061030b9190610b7c565b610319906020810190610b29565b73ffffffffffffffffffffffffffffffffffffffff16635c11d79583600189898681811061034957610349610b4d565b905060200281019061035b9190610b7c565b610369906020810190610bba565b306103764261012c610c7a565b6040518763ffffffff1660e01b815260040161039796959493929190610ce3565b600060405180830381600087803b1580156103b157600080fd5b505af11580156103c5573d6000803e3d6000fd5b505050508585828181106103db576103db610b4d565b90506020028101906103ed9190610b7c565b6103fb906020810190610bba565b600188888581811061040f5761040f610b4d565b90506020028101906104219190610b7c565b61042f906020810190610bba565b61043a929150610d2e565b81811061044957610449610b4d565b905060200201602081019061045e9190610b29565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff91909116906370a0823190602401602060405180830381865afa1580156104ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ee9190610d41565b91506104f981610d5a565b90506101a3565b5081811161056a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f54726164652052657665727465642c204e6f2050726f666974204d61646500006044820152606401610195565b5050505050565b600081815b848110156106ef57600086868381811061059257610592610b4d565b90506020028101906105a49190610b7c565b6105b2906020810190610b29565b73ffffffffffffffffffffffffffffffffffffffff1663d06ca61f848989868181106105e0576105e0610b4d565b90506020028101906105f29190610b7c565b610600906020810190610bba565b6040518463ffffffff1660e01b815260040161061e93929190610d92565b600060405180830381865afa15801561063b573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526106819190810190610de4565b905080600188888581811061069857610698610b4d565b90506020028101906106aa9190610b7c565b6106b8906020810190610bba565b6106c3929150610d2e565b815181106106d3576106d3610b4d565b6020026020010151925050806106e890610d5a565b9050610576565b50949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610779576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610195565b61078360006109eb565b565b6000805473ffffffffffffffffffffffffffffffffffffffff163314610807576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610195565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb61084260005473ffffffffffffffffffffffffffffffffffffffff1690565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602481018590526044016020604051808303816000875af11580156108b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d89190610c29565b90505b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610962576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610195565b73ffffffffffffffffffffffffffffffffffffffff81166109df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a206e6577206f776e657220697320616464726573732830296044820152606401610195565b6109e8816109eb565b50565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600060408486031215610a7557600080fd5b833567ffffffffffffffff80821115610a8d57600080fd5b818601915086601f830112610aa157600080fd5b813581811115610ab057600080fd5b8760208260051b8501011115610ac557600080fd5b6020928301989097509590910135949350505050565b73ffffffffffffffffffffffffffffffffffffffff811681146109e857600080fd5b60008060408385031215610b1057600080fd5b8235610b1b81610adb565b946020939093013593505050565b600060208284031215610b3b57600080fd5b8135610b4681610adb565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1833603018112610bb057600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610bef57600080fd5b83018035915067ffffffffffffffff821115610c0a57600080fd5b6020019150600581901b3603821315610c2257600080fd5b9250929050565b600060208284031215610c3b57600080fd5b81518015158114610b4657600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156108db576108db610c4b565b8183526000602080850194508260005b85811015610cd8578135610cb081610adb565b73ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101610c9d565b509495945050505050565b86815285602082015260a060408201526000610d0360a083018688610c8d565b73ffffffffffffffffffffffffffffffffffffffff9490941660608301525060800152949350505050565b818103818111156108db576108db610c4b565b600060208284031215610d5357600080fd5b5051919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d8b57610d8b610c4b565b5060010190565b838152604060208201526000610dac604083018486610c8d565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020808385031215610df757600080fd5b825167ffffffffffffffff80821115610e0f57600080fd5b818501915085601f830112610e2357600080fd5b815181811115610e3557610e35610db5565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108582111715610e7857610e78610db5565b604052918252848201925083810185019188831115610e9657600080fd5b938501935b82851015610eb457845184529385019392850192610e9b565b9897505050505050505056fea264697066735822122017a0bfb0a7a59551af46dd19d372a3956b7624e5ddd805d5fb26e317fe8754f064736f6c63430008110033",
      "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c80638da5cb5b116100505780638da5cb5b146100ba578063baaf2d4f146100e2578063f2fde38b1461010557600080fd5b806335b7163f146100775780634f8072d01461008c578063715018a6146100b2575b600080fd5b61008a610085366004610a60565b610118565b005b61009f61009a366004610a60565b610571565b6040519081526020015b60405180910390f35b61008a6106f8565b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100a9565b6100f56100f0366004610afd565b610785565b60405190151581526020016100a9565b61008a610113366004610b29565b6108e1565b60005473ffffffffffffffffffffffffffffffffffffffff16331461019e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b808060005b84811015610500578585828181106101bd576101bd610b4d565b90506020028101906101cf9190610b7c565b6101dd906020810190610bba565b60008181106101ee576101ee610b4d565b90506020020160208101906102039190610b29565b73ffffffffffffffffffffffffffffffffffffffff1663095ea7b387878481811061023057610230610b4d565b90506020028101906102429190610b7c565b610250906020810190610b29565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602481018590526044016020604051808303816000875af11580156102c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e69190610c29565b508585828181106102f9576102f9610b4d565b905060200281019061030b9190610b7c565b610319906020810190610b29565b73ffffffffffffffffffffffffffffffffffffffff16635c11d79583600189898681811061034957610349610b4d565b905060200281019061035b9190610b7c565b610369906020810190610bba565b306103764261012c610c7a565b6040518763ffffffff1660e01b815260040161039796959493929190610ce3565b600060405180830381600087803b1580156103b157600080fd5b505af11580156103c5573d6000803e3d6000fd5b505050508585828181106103db576103db610b4d565b90506020028101906103ed9190610b7c565b6103fb906020810190610bba565b600188888581811061040f5761040f610b4d565b90506020028101906104219190610b7c565b61042f906020810190610bba565b61043a929150610d2e565b81811061044957610449610b4d565b905060200201602081019061045e9190610b29565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff91909116906370a0823190602401602060405180830381865afa1580156104ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ee9190610d41565b91506104f981610d5a565b90506101a3565b5081811161056a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f54726164652052657665727465642c204e6f2050726f666974204d61646500006044820152606401610195565b5050505050565b600081815b848110156106ef57600086868381811061059257610592610b4d565b90506020028101906105a49190610b7c565b6105b2906020810190610b29565b73ffffffffffffffffffffffffffffffffffffffff1663d06ca61f848989868181106105e0576105e0610b4d565b90506020028101906105f29190610b7c565b610600906020810190610bba565b6040518463ffffffff1660e01b815260040161061e93929190610d92565b600060405180830381865afa15801561063b573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526106819190810190610de4565b905080600188888581811061069857610698610b4d565b90506020028101906106aa9190610b7c565b6106b8906020810190610bba565b6106c3929150610d2e565b815181106106d3576106d3610b4d565b6020026020010151925050806106e890610d5a565b9050610576565b50949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610779576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610195565b61078360006109eb565b565b6000805473ffffffffffffffffffffffffffffffffffffffff163314610807576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610195565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb61084260005473ffffffffffffffffffffffffffffffffffffffff1690565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602481018590526044016020604051808303816000875af11580156108b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d89190610c29565b90505b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610962576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610195565b73ffffffffffffffffffffffffffffffffffffffff81166109df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a206e6577206f776e657220697320616464726573732830296044820152606401610195565b6109e8816109eb565b50565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600060408486031215610a7557600080fd5b833567ffffffffffffffff80821115610a8d57600080fd5b818601915086601f830112610aa157600080fd5b813581811115610ab057600080fd5b8760208260051b8501011115610ac557600080fd5b6020928301989097509590910135949350505050565b73ffffffffffffffffffffffffffffffffffffffff811681146109e857600080fd5b60008060408385031215610b1057600080fd5b8235610b1b81610adb565b946020939093013593505050565b600060208284031215610b3b57600080fd5b8135610b4681610adb565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1833603018112610bb057600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610bef57600080fd5b83018035915067ffffffffffffffff821115610c0a57600080fd5b6020019150600581901b3603821315610c2257600080fd5b9250929050565b600060208284031215610c3b57600080fd5b81518015158114610b4657600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156108db576108db610c4b565b8183526000602080850194508260005b85811015610cd8578135610cb081610adb565b73ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101610c9d565b509495945050505050565b86815285602082015260a060408201526000610d0360a083018688610c8d565b73ffffffffffffffffffffffffffffffffffffffff9490941660608301525060800152949350505050565b818103818111156108db576108db610c4b565b600060208284031215610d5357600080fd5b5051919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d8b57610d8b610c4b565b5060010190565b838152604060208201526000610dac604083018486610c8d565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020808385031215610df757600080fd5b825167ffffffffffffffff80821115610e0f57600080fd5b818501915085601f830112610e2357600080fd5b815181811115610e3557610e35610db5565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108582111715610e7857610e78610db5565b604052918252848201925083810185019188831115610e9657600080fd5b938501935b82851015610eb457845184529385019392850192610e9b565b9897505050505050505056fea264697066735822122017a0bfb0a7a59551af46dd19d372a3956b7624e5ddd805d5fb26e317fe8754f064736f6c63430008110033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "kind": "dev",
        "methods": {
          "owner()": {
            "returns": {
              "_0": "The current owner."
            }
          },
          "renounceOwnership()": {
            "details": "Sets the zero address as the new contract owner."
          },
          "transferOwnership(address)": {
            "params": {
              "newOwner": "The new owner of the contract."
            }
          }
        },
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {
            "@_34": {
              "entryPoint": null,
              "id": 34,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_msgSender_1254": {
              "entryPoint": null,
              "id": 1254,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_transferOwnership_103": {
              "entryPoint": 31,
              "id": 103,
              "parameterSlots": 1,
              "returnSlots": 0
            }
          },
          "generatedSources": [],
          "linkReferences": {},
          "object": "608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610ef68061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80638da5cb5b116100505780638da5cb5b146100ba578063baaf2d4f146100e2578063f2fde38b1461010557600080fd5b806335b7163f146100775780634f8072d01461008c578063715018a6146100b2575b600080fd5b61008a610085366004610a60565b610118565b005b61009f61009a366004610a60565b610571565b6040519081526020015b60405180910390f35b61008a6106f8565b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100a9565b6100f56100f0366004610afd565b610785565b60405190151581526020016100a9565b61008a610113366004610b29565b6108e1565b60005473ffffffffffffffffffffffffffffffffffffffff16331461019e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b808060005b84811015610500578585828181106101bd576101bd610b4d565b90506020028101906101cf9190610b7c565b6101dd906020810190610bba565b60008181106101ee576101ee610b4d565b90506020020160208101906102039190610b29565b73ffffffffffffffffffffffffffffffffffffffff1663095ea7b387878481811061023057610230610b4d565b90506020028101906102429190610b7c565b610250906020810190610b29565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602481018590526044016020604051808303816000875af11580156102c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e69190610c29565b508585828181106102f9576102f9610b4d565b905060200281019061030b9190610b7c565b610319906020810190610b29565b73ffffffffffffffffffffffffffffffffffffffff16635c11d79583600189898681811061034957610349610b4d565b905060200281019061035b9190610b7c565b610369906020810190610bba565b306103764261012c610c7a565b6040518763ffffffff1660e01b815260040161039796959493929190610ce3565b600060405180830381600087803b1580156103b157600080fd5b505af11580156103c5573d6000803e3d6000fd5b505050508585828181106103db576103db610b4d565b90506020028101906103ed9190610b7c565b6103fb906020810190610bba565b600188888581811061040f5761040f610b4d565b90506020028101906104219190610b7c565b61042f906020810190610bba565b61043a929150610d2e565b81811061044957610449610b4d565b905060200201602081019061045e9190610b29565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff91909116906370a0823190602401602060405180830381865afa1580156104ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ee9190610d41565b91506104f981610d5a565b90506101a3565b5081811161056a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f54726164652052657665727465642c204e6f2050726f666974204d61646500006044820152606401610195565b5050505050565b600081815b848110156106ef57600086868381811061059257610592610b4d565b90506020028101906105a49190610b7c565b6105b2906020810190610b29565b73ffffffffffffffffffffffffffffffffffffffff1663d06ca61f848989868181106105e0576105e0610b4d565b90506020028101906105f29190610b7c565b610600906020810190610bba565b6040518463ffffffff1660e01b815260040161061e93929190610d92565b600060405180830381865afa15801561063b573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526106819190810190610de4565b905080600188888581811061069857610698610b4d565b90506020028101906106aa9190610b7c565b6106b8906020810190610bba565b6106c3929150610d2e565b815181106106d3576106d3610b4d565b6020026020010151925050806106e890610d5a565b9050610576565b50949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610779576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610195565b61078360006109eb565b565b6000805473ffffffffffffffffffffffffffffffffffffffff163314610807576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610195565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb61084260005473ffffffffffffffffffffffffffffffffffffffff1690565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602481018590526044016020604051808303816000875af11580156108b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d89190610c29565b90505b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610962576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610195565b73ffffffffffffffffffffffffffffffffffffffff81166109df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a206e6577206f776e657220697320616464726573732830296044820152606401610195565b6109e8816109eb565b50565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600060408486031215610a7557600080fd5b833567ffffffffffffffff80821115610a8d57600080fd5b818601915086601f830112610aa157600080fd5b813581811115610ab057600080fd5b8760208260051b8501011115610ac557600080fd5b6020928301989097509590910135949350505050565b73ffffffffffffffffffffffffffffffffffffffff811681146109e857600080fd5b60008060408385031215610b1057600080fd5b8235610b1b81610adb565b946020939093013593505050565b600060208284031215610b3b57600080fd5b8135610b4681610adb565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1833603018112610bb057600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610bef57600080fd5b83018035915067ffffffffffffffff821115610c0a57600080fd5b6020019150600581901b3603821315610c2257600080fd5b9250929050565b600060208284031215610c3b57600080fd5b81518015158114610b4657600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156108db576108db610c4b565b8183526000602080850194508260005b85811015610cd8578135610cb081610adb565b73ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101610c9d565b509495945050505050565b86815285602082015260a060408201526000610d0360a083018688610c8d565b73ffffffffffffffffffffffffffffffffffffffff9490941660608301525060800152949350505050565b818103818111156108db576108db610c4b565b600060208284031215610d5357600080fd5b5051919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d8b57610d8b610c4b565b5060010190565b838152604060208201526000610dac604083018486610c8d565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020808385031215610df757600080fd5b825167ffffffffffffffff80821115610e0f57600080fd5b818501915085601f830112610e2357600080fd5b815181811115610e3557610e35610db5565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108582111715610e7857610e78610db5565b604052918252848201925083810185019188831115610e9657600080fd5b938501935b82851015610eb457845184529385019392850192610e9b565b9897505050505050505056fea264697066735822122017a0bfb0a7a59551af46dd19d372a3956b7624e5ddd805d5fb26e317fe8754f064736f6c63430008110033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A CALLER PUSH2 0x1F JUMP JUMPDEST PUSH2 0x6F JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0xEF6 DUP1 PUSH2 0x7E PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x72 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x50 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xBA JUMPI DUP1 PUSH4 0xBAAF2D4F EQ PUSH2 0xE2 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x105 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x35B7163F EQ PUSH2 0x77 JUMPI DUP1 PUSH4 0x4F8072D0 EQ PUSH2 0x8C JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xB2 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8A PUSH2 0x85 CALLDATASIZE PUSH1 0x4 PUSH2 0xA60 JUMP JUMPDEST PUSH2 0x118 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x9F PUSH2 0x9A CALLDATASIZE PUSH1 0x4 PUSH2 0xA60 JUMP JUMPDEST PUSH2 0x571 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x8A PUSH2 0x6F8 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xA9 JUMP JUMPDEST PUSH2 0xF5 PUSH2 0xF0 CALLDATASIZE PUSH1 0x4 PUSH2 0xAFD JUMP JUMPDEST PUSH2 0x785 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xA9 JUMP JUMPDEST PUSH2 0x8A PUSH2 0x113 CALLDATASIZE PUSH1 0x4 PUSH2 0xB29 JUMP JUMPDEST PUSH2 0x8E1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x19E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP1 PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x500 JUMPI DUP6 DUP6 DUP3 DUP2 DUP2 LT PUSH2 0x1BD JUMPI PUSH2 0x1BD PUSH2 0xB4D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x1CF SWAP2 SWAP1 PUSH2 0xB7C JUMP JUMPDEST PUSH2 0x1DD SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xBBA JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 LT PUSH2 0x1EE JUMPI PUSH2 0x1EE PUSH2 0xB4D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x203 SWAP2 SWAP1 PUSH2 0xB29 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x95EA7B3 DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0x230 JUMPI PUSH2 0x230 PUSH2 0xB4D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x242 SWAP2 SWAP1 PUSH2 0xB7C JUMP JUMPDEST PUSH2 0x250 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xB29 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2C2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2E6 SWAP2 SWAP1 PUSH2 0xC29 JUMP JUMPDEST POP DUP6 DUP6 DUP3 DUP2 DUP2 LT PUSH2 0x2F9 JUMPI PUSH2 0x2F9 PUSH2 0xB4D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x30B SWAP2 SWAP1 PUSH2 0xB7C JUMP JUMPDEST PUSH2 0x319 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xB29 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5C11D795 DUP4 PUSH1 0x1 DUP10 DUP10 DUP7 DUP2 DUP2 LT PUSH2 0x349 JUMPI PUSH2 0x349 PUSH2 0xB4D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x35B SWAP2 SWAP1 PUSH2 0xB7C JUMP JUMPDEST PUSH2 0x369 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xBBA JUMP JUMPDEST ADDRESS PUSH2 0x376 TIMESTAMP PUSH2 0x12C PUSH2 0xC7A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x397 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xCE3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3C5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP6 DUP6 DUP3 DUP2 DUP2 LT PUSH2 0x3DB JUMPI PUSH2 0x3DB PUSH2 0xB4D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x3ED SWAP2 SWAP1 PUSH2 0xB7C JUMP JUMPDEST PUSH2 0x3FB SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xBBA JUMP JUMPDEST PUSH1 0x1 DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x40F JUMPI PUSH2 0x40F PUSH2 0xB4D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x421 SWAP2 SWAP1 PUSH2 0xB7C JUMP JUMPDEST PUSH2 0x42F SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xBBA JUMP JUMPDEST PUSH2 0x43A SWAP3 SWAP2 POP PUSH2 0xD2E JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x449 JUMPI PUSH2 0x449 PUSH2 0xB4D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x45E SWAP2 SWAP1 PUSH2 0xB29 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4CA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4EE SWAP2 SWAP1 PUSH2 0xD41 JUMP JUMPDEST SWAP2 POP PUSH2 0x4F9 DUP2 PUSH2 0xD5A JUMP JUMPDEST SWAP1 POP PUSH2 0x1A3 JUMP JUMPDEST POP DUP2 DUP2 GT PUSH2 0x56A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726164652052657665727465642C204E6F2050726F666974204D6164650000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x195 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x6EF JUMPI PUSH1 0x0 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x592 JUMPI PUSH2 0x592 PUSH2 0xB4D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x5A4 SWAP2 SWAP1 PUSH2 0xB7C JUMP JUMPDEST PUSH2 0x5B2 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xB29 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD06CA61F DUP5 DUP10 DUP10 DUP7 DUP2 DUP2 LT PUSH2 0x5E0 JUMPI PUSH2 0x5E0 PUSH2 0xB4D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x5F2 SWAP2 SWAP1 PUSH2 0xB7C JUMP JUMPDEST PUSH2 0x600 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xBBA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x61E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xD92 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x63B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x681 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xDE4 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x698 JUMPI PUSH2 0x698 PUSH2 0xB4D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x6AA SWAP2 SWAP1 PUSH2 0xB7C JUMP JUMPDEST PUSH2 0x6B8 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xBBA JUMP JUMPDEST PUSH2 0x6C3 SWAP3 SWAP2 POP PUSH2 0xD2E JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x6D3 JUMPI PUSH2 0x6D3 PUSH2 0xB4D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP POP DUP1 PUSH2 0x6E8 SWAP1 PUSH2 0xD5A JUMP JUMPDEST SWAP1 POP PUSH2 0x576 JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x779 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x195 JUMP JUMPDEST PUSH2 0x783 PUSH1 0x0 PUSH2 0x9EB JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x807 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x195 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB PUSH2 0x842 PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x8B4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8D8 SWAP2 SWAP1 PUSH2 0xC29 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x962 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x195 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x9DF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E65722069732061646472657373283029 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x195 JUMP JUMPDEST PUSH2 0x9E8 DUP2 PUSH2 0x9EB JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xA75 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xA8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xAA1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xAB0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xAC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 DUP4 ADD SWAP9 SWAP1 SWAP8 POP SWAP6 SWAP1 SWAP2 ADD CALLDATALOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x9E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0xB1B DUP2 PUSH2 0xADB JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xB46 DUP2 PUSH2 0xADB JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC1 DUP4 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xBB0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xBEF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xC0A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP PUSH1 0x5 DUP2 SWAP1 SHL CALLDATASIZE SUB DUP3 SGT ISZERO PUSH2 0xC22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xB46 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x8DB JUMPI PUSH2 0x8DB PUSH2 0xC4B JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x0 PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP3 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0xCD8 JUMPI DUP2 CALLDATALOAD PUSH2 0xCB0 DUP2 PUSH2 0xADB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xC9D JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP7 DUP2 MSTORE DUP6 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0xD03 PUSH1 0xA0 DUP4 ADD DUP7 DUP9 PUSH2 0xC8D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 SWAP1 SWAP5 AND PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x8DB JUMPI PUSH2 0x8DB PUSH2 0xC4B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD53 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0xD8B JUMPI PUSH2 0xD8B PUSH2 0xC4B JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0xDAC PUSH1 0x40 DUP4 ADD DUP5 DUP7 PUSH2 0xC8D JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xDF7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xE0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xE23 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0xE35 JUMPI PUSH2 0xE35 PUSH2 0xDB5 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0xE78 JUMPI PUSH2 0xE78 PUSH2 0xDB5 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP9 DUP4 GT ISZERO PUSH2 0xE96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0xEB4 JUMPI DUP5 MLOAD DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP6 ADD SWAP3 PUSH2 0xE9B JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 OR LOG0 0xBF 0xB0 0xA7 0xA5 SWAP6 MLOAD 0xAF CHAINID 0xDD NOT 0xD3 PUSH19 0xA3956B7624E5DDD805D5FB26E317FE8754F064 PUSH20 0x6F6C634300081100330000000000000000000000 ",
          "sourceMap": "854:1358:11:-:0;;;;;;;;;;;;-1:-1:-1;1165:32:0;747:10:10;1165:18:0;:32::i;:::-;854:1358:11;;1872:167:0;1940:16;1959:6;;-1:-1:-1;;;;;1969:17:0;;;-1:-1:-1;;;;;;1969:17:0;;;;;;1995:40;;1959:6;;;;;;;1995:40;;1940:16;1995:40;1936:103;1872:167;:::o;854:1358:11:-;;;;;;;"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "@_msgSender_1254": {
              "entryPoint": null,
              "id": 1254,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_transferOwnership_103": {
              "entryPoint": 2539,
              "id": 103,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@getAmountOutMin_1525": {
              "entryPoint": 1393,
              "id": 1525,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@owner_83": {
              "entryPoint": null,
              "id": 83,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@renounceOwnership_49": {
              "entryPoint": 1784,
              "id": 49,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@trade_1441": {
              "entryPoint": 280,
              "id": 1441,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@transferOtherERC20Token_1462": {
              "entryPoint": 1925,
              "id": 1462,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@transferOwnership_73": {
              "entryPoint": 2273,
              "id": 73,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "abi_decode_tuple_t_address": {
              "entryPoint": 2857,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_array$_t_struct$_MetaPath_$1275_calldata_ptr_$dyn_calldata_ptrt_uint256": {
              "entryPoint": 2656,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 3
            },
            "abi_decode_tuple_t_array$_t_uint256_$dyn_memory_ptr_fromMemory": {
              "entryPoint": 3556,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_bool_fromMemory": {
              "entryPoint": 3113,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_contract$_IERC20_$209t_uint256": {
              "entryPoint": 2813,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_uint256_fromMemory": {
              "entryPoint": 3393,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_array_address_dyn_calldata": {
              "entryPoint": 3213,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_3978f3b289ec728e3a8e3ed8b2e2671590b07679c17a4555750456e43f6dad52__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_648c7e631efe932f4ae6bdd98fc8802fcc52ea39377cd8368551bb80d4b86851__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_array$_t_address_$dyn_calldata_ptr__to_t_uint256_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed": {
              "entryPoint": 3474,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_rational_1_by_1_t_array$_t_address_$dyn_calldata_ptr_t_address_t_uint256__to_t_uint256_t_uint256_t_array$_t_address_$dyn_memory_ptr_t_address_t_uint256__fromStack_reversed": {
              "entryPoint": 3299,
              "id": null,
              "parameterSlots": 7,
              "returnSlots": 1
            },
            "access_calldata_tail_t_array$_t_address_$dyn_calldata_ptr": {
              "entryPoint": 3002,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "access_calldata_tail_t_struct$_MetaPath_$1275_calldata_ptr": {
              "entryPoint": 2940,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_add_t_uint256": {
              "entryPoint": 3194,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_sub_t_uint256": {
              "entryPoint": 3374,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "increment_t_uint256": {
              "entryPoint": 3418,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "panic_error_0x11": {
              "entryPoint": 3147,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x32": {
              "entryPoint": 2893,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x41": {
              "entryPoint": 3509,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "validator_revert_contract_IERC20": {
              "entryPoint": 2779,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:8717:52",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:52",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "164:567:52",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "210:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "219:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "222:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "212:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "212:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "212:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "185:7:52"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "194:9:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "181:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "181:23:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "206:2:52",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "177:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "177:32:52"
                          },
                          "nodeType": "YulIf",
                          "src": "174:52:52"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "235:37:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "262:9:52"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "249:12:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "249:23:52"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "239:6:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "281:28:52",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "291:18:52",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "285:2:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "336:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "345:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "348:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "338:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "338:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "338:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "324:6:52"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "332:2:52"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "321:2:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "321:14:52"
                          },
                          "nodeType": "YulIf",
                          "src": "318:34:52"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "361:32:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "375:9:52"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "386:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "371:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "371:22:52"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "365:2:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "441:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "450:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "453:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "443:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "443:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "443:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "420:2:52"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "424:4:52",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "416:3:52"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "416:13:52"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "431:7:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "412:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "412:27:52"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "405:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "405:35:52"
                          },
                          "nodeType": "YulIf",
                          "src": "402:55:52"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "466:30:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "493:2:52"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "480:12:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "480:16:52"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "470:6:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "523:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "532:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "535:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "525:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "525:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "525:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "511:6:52"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "519:2:52"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "508:2:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "508:14:52"
                          },
                          "nodeType": "YulIf",
                          "src": "505:34:52"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "599:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "608:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "611:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "601:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "601:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "601:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "562:2:52"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "570:1:52",
                                            "type": "",
                                            "value": "5"
                                          },
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "573:6:52"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "566:3:52"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "566:14:52"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "558:3:52"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "558:23:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "583:4:52",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "554:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "554:34:52"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "590:7:52"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "551:2:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "551:47:52"
                          },
                          "nodeType": "YulIf",
                          "src": "548:67:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "624:23:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "638:2:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "642:4:52",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "634:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "634:13:52"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "624:6:52"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "656:16:52",
                          "value": {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "666:6:52"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "656:6:52"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "681:44:52",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "708:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "719:4:52",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "704:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "704:20:52"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "691:12:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "691:34:52"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "681:6:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_array$_t_struct$_MetaPath_$1275_calldata_ptr_$dyn_calldata_ptrt_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "114:9:52",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "125:7:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "137:6:52",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "145:6:52",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "153:6:52",
                        "type": ""
                      }
                    ],
                    "src": "14:717:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "837:76:52",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "847:26:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "859:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "870:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "855:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "855:18:52"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "847:4:52"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "889:9:52"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "900:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "882:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "882:25:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "882:25:52"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "806:9:52",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "817:6:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "828:4:52",
                        "type": ""
                      }
                    ],
                    "src": "736:177:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1019:125:52",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1029:26:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1041:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1052:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1037:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1037:18:52"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "1029:4:52"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1071:9:52"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "1086:6:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1094:42:52",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "1082:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1082:55:52"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1064:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1064:74:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1064:74:52"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "988:9:52",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "999:6:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "1010:4:52",
                        "type": ""
                      }
                    ],
                    "src": "918:226:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1202:109:52",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1289:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1298:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1301:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1291:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1291:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1291:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "1225:5:52"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "1236:5:52"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1243:42:52",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "1232:3:52"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1232:54:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "1222:2:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1222:65:52"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1215:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1215:73:52"
                          },
                          "nodeType": "YulIf",
                          "src": "1212:93:52"
                        }
                      ]
                    },
                    "name": "validator_revert_contract_IERC20",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "1191:5:52",
                        "type": ""
                      }
                    ],
                    "src": "1149:162:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1417:236:52",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1463:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1472:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1475:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1465:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1465:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1465:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1438:7:52"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1447:9:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1434:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1434:23:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1459:2:52",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1430:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1430:32:52"
                          },
                          "nodeType": "YulIf",
                          "src": "1427:52:52"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1488:36:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1514:9:52"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1501:12:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1501:23:52"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "1492:5:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "1566:5:52"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_contract_IERC20",
                              "nodeType": "YulIdentifier",
                              "src": "1533:32:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1533:39:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1533:39:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1581:15:52",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "1591:5:52"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1581:6:52"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1605:42:52",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1632:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1643:2:52",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1628:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1628:18:52"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1615:12:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1615:32:52"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "1605:6:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_contract$_IERC20_$209t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1375:9:52",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1386:7:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1398:6:52",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "1406:6:52",
                        "type": ""
                      }
                    ],
                    "src": "1316:337:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1753:92:52",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1763:26:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1775:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1786:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1771:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1771:18:52"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "1763:4:52"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1805:9:52"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "1830:6:52"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "1823:6:52"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1823:14:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "1816:6:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1816:22:52"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1798:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1798:41:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1798:41:52"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1722:9:52",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1733:6:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "1744:4:52",
                        "type": ""
                      }
                    ],
                    "src": "1658:187:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1920:185:52",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1966:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1975:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1978:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1968:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1968:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1968:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1941:7:52"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1950:9:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1937:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1937:23:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1962:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1933:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1933:32:52"
                          },
                          "nodeType": "YulIf",
                          "src": "1930:52:52"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1991:36:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2017:9:52"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2004:12:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2004:23:52"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "1995:5:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "2069:5:52"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_contract_IERC20",
                              "nodeType": "YulIdentifier",
                              "src": "2036:32:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2036:39:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2036:39:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2084:15:52",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "2094:5:52"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2084:6:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1886:9:52",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1897:7:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1909:6:52",
                        "type": ""
                      }
                    ],
                    "src": "1850:255:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2284:182:52",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2301:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2312:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2294:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2294:21:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2294:21:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2335:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2346:2:52",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2331:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2331:18:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2351:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2324:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2324:30:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2324:30:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2374:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2385:2:52",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2370:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2370:18:52"
                              },
                              {
                                "hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "2390:34:52",
                                "type": "",
                                "value": "Ownable: caller is not the owner"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2363:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2363:62:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2363:62:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2434:26:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2446:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2457:2:52",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2442:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2442:18:52"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2434:4:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2261:9:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2275:4:52",
                        "type": ""
                      }
                    ],
                    "src": "2110:356:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2503:152:52",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2520:1:52",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2523:77:52",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2513:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2513:88:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2513:88:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2617:1:52",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2620:4:52",
                                "type": "",
                                "value": "0x32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2610:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2610:15:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2610:15:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2641:1:52",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2644:4:52",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "2634:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2634:15:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2634:15:52"
                        }
                      ]
                    },
                    "name": "panic_error_0x32",
                    "nodeType": "YulFunctionDefinition",
                    "src": "2471:184:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2763:281:52",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2773:51:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "ptr_to_tail",
                                "nodeType": "YulIdentifier",
                                "src": "2812:11:52"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2799:12:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2799:25:52"
                          },
                          "variables": [
                            {
                              "name": "rel_offset_of_tail",
                              "nodeType": "YulTypedName",
                              "src": "2777:18:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2972:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2981:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2984:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2974:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2974:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2974:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "rel_offset_of_tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "2847:18:52"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [],
                                            "functionName": {
                                              "name": "calldatasize",
                                              "nodeType": "YulIdentifier",
                                              "src": "2875:12:52"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2875:14:52"
                                          },
                                          {
                                            "name": "base_ref",
                                            "nodeType": "YulIdentifier",
                                            "src": "2891:8:52"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "2871:3:52"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2871:29:52"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2902:66:52",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2867:3:52"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2867:102:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2843:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2843:127:52"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "2836:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2836:135:52"
                          },
                          "nodeType": "YulIf",
                          "src": "2833:155:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2997:41:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "base_ref",
                                "nodeType": "YulIdentifier",
                                "src": "3009:8:52"
                              },
                              {
                                "name": "rel_offset_of_tail",
                                "nodeType": "YulIdentifier",
                                "src": "3019:18:52"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3005:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3005:33:52"
                          },
                          "variableNames": [
                            {
                              "name": "addr",
                              "nodeType": "YulIdentifier",
                              "src": "2997:4:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "access_calldata_tail_t_struct$_MetaPath_$1275_calldata_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "base_ref",
                        "nodeType": "YulTypedName",
                        "src": "2728:8:52",
                        "type": ""
                      },
                      {
                        "name": "ptr_to_tail",
                        "nodeType": "YulTypedName",
                        "src": "2738:11:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "addr",
                        "nodeType": "YulTypedName",
                        "src": "2754:4:52",
                        "type": ""
                      }
                    ],
                    "src": "2660:384:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3159:494:52",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3169:51:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "ptr_to_tail",
                                "nodeType": "YulIdentifier",
                                "src": "3208:11:52"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3195:12:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3195:25:52"
                          },
                          "variables": [
                            {
                              "name": "rel_offset_of_tail",
                              "nodeType": "YulTypedName",
                              "src": "3173:18:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3368:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3377:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3380:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3370:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3370:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3370:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "rel_offset_of_tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "3243:18:52"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [],
                                            "functionName": {
                                              "name": "calldatasize",
                                              "nodeType": "YulIdentifier",
                                              "src": "3271:12:52"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "3271:14:52"
                                          },
                                          {
                                            "name": "base_ref",
                                            "nodeType": "YulIdentifier",
                                            "src": "3287:8:52"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "3267:3:52"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3267:29:52"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3298:66:52",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "3263:3:52"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3263:102:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3239:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3239:127:52"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "3232:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3232:135:52"
                          },
                          "nodeType": "YulIf",
                          "src": "3229:155:52"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3393:47:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "base_ref",
                                "nodeType": "YulIdentifier",
                                "src": "3411:8:52"
                              },
                              {
                                "name": "rel_offset_of_tail",
                                "nodeType": "YulIdentifier",
                                "src": "3421:18:52"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3407:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3407:33:52"
                          },
                          "variables": [
                            {
                              "name": "addr_1",
                              "nodeType": "YulTypedName",
                              "src": "3397:6:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3449:30:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "addr_1",
                                "nodeType": "YulIdentifier",
                                "src": "3472:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3459:12:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3459:20:52"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "3449:6:52"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3522:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3531:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3534:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3524:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3524:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3524:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3494:6:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3502:18:52",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "3491:2:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3491:30:52"
                          },
                          "nodeType": "YulIf",
                          "src": "3488:50:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3547:25:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "addr_1",
                                "nodeType": "YulIdentifier",
                                "src": "3559:6:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3567:4:52",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3555:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3555:17:52"
                          },
                          "variableNames": [
                            {
                              "name": "addr",
                              "nodeType": "YulIdentifier",
                              "src": "3547:4:52"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3631:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3640:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3643:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3633:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3633:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3633:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "addr",
                                "nodeType": "YulIdentifier",
                                "src": "3588:4:52"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [],
                                    "functionName": {
                                      "name": "calldatasize",
                                      "nodeType": "YulIdentifier",
                                      "src": "3598:12:52"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3598:14:52"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3618:1:52",
                                        "type": "",
                                        "value": "5"
                                      },
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "3621:6:52"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "3614:3:52"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3614:14:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3594:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3594:35:52"
                              }
                            ],
                            "functionName": {
                              "name": "sgt",
                              "nodeType": "YulIdentifier",
                              "src": "3584:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3584:46:52"
                          },
                          "nodeType": "YulIf",
                          "src": "3581:66:52"
                        }
                      ]
                    },
                    "name": "access_calldata_tail_t_array$_t_address_$dyn_calldata_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "base_ref",
                        "nodeType": "YulTypedName",
                        "src": "3116:8:52",
                        "type": ""
                      },
                      {
                        "name": "ptr_to_tail",
                        "nodeType": "YulTypedName",
                        "src": "3126:11:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "addr",
                        "nodeType": "YulTypedName",
                        "src": "3142:4:52",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "3148:6:52",
                        "type": ""
                      }
                    ],
                    "src": "3049:604:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3787:168:52",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "3797:26:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3809:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3820:2:52",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3805:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3805:18:52"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "3797:4:52"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3839:9:52"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "3854:6:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3862:42:52",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "3850:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3850:55:52"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3832:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3832:74:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3832:74:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3926:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3937:2:52",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3922:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3922:18:52"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "3942:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3915:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3915:34:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3915:34:52"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3748:9:52",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "3759:6:52",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3767:6:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3778:4:52",
                        "type": ""
                      }
                    ],
                    "src": "3658:297:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4038:199:52",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4084:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4093:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4096:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4086:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4086:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4086:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4059:7:52"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4068:9:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4055:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4055:23:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4080:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "4051:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4051:32:52"
                          },
                          "nodeType": "YulIf",
                          "src": "4048:52:52"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4109:29:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4128:9:52"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "4122:5:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4122:16:52"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "4113:5:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4191:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4200:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4203:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4193:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4193:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4193:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "4160:5:52"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "4181:5:52"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "4174:6:52"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "4174:13:52"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "4167:6:52"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4167:21:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "4157:2:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4157:32:52"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "4150:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4150:40:52"
                          },
                          "nodeType": "YulIf",
                          "src": "4147:60:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4216:15:52",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "4226:5:52"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "4216:6:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bool_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4004:9:52",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "4015:7:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4027:6:52",
                        "type": ""
                      }
                    ],
                    "src": "3960:277:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4274:152:52",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4291:1:52",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4294:77:52",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4284:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4284:88:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4284:88:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4388:1:52",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4391:4:52",
                                "type": "",
                                "value": "0x11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4381:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4381:15:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4381:15:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4412:1:52",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4415:4:52",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "4405:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4405:15:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4405:15:52"
                        }
                      ]
                    },
                    "name": "panic_error_0x11",
                    "nodeType": "YulFunctionDefinition",
                    "src": "4242:184:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4479:77:52",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "4489:16:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "4500:1:52"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "4503:1:52"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4496:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4496:9:52"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "4489:3:52"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4528:22:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "4530:16:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4530:18:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4530:18:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "4520:1:52"
                              },
                              {
                                "name": "sum",
                                "nodeType": "YulIdentifier",
                                "src": "4523:3:52"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "4517:2:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4517:10:52"
                          },
                          "nodeType": "YulIf",
                          "src": "4514:36:52"
                        }
                      ]
                    },
                    "name": "checked_add_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "4462:1:52",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "4465:1:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "4471:3:52",
                        "type": ""
                      }
                    ],
                    "src": "4431:125:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4639:475:52",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "4656:3:52"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "4661:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4649:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4649:19:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4649:19:52"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4677:14:52",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4687:4:52",
                            "type": "",
                            "value": "0x20"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "4681:2:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4700:19:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "4711:3:52"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "4716:2:52"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4707:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4707:12:52"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "4700:3:52"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4728:19:52",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "4742:5:52"
                          },
                          "variables": [
                            {
                              "name": "srcPtr",
                              "nodeType": "YulTypedName",
                              "src": "4732:6:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4756:10:52",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4765:1:52",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "4760:1:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4824:265:52",
                            "statements": [
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "4838:35:52",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "4866:6:52"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "calldataload",
                                    "nodeType": "YulIdentifier",
                                    "src": "4853:12:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4853:20:52"
                                },
                                "variables": [
                                  {
                                    "name": "value_1",
                                    "nodeType": "YulTypedName",
                                    "src": "4842:7:52",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "4919:7:52"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "validator_revert_contract_IERC20",
                                    "nodeType": "YulIdentifier",
                                    "src": "4886:32:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4886:41:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4886:41:52"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "4947:3:52"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "value_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "4956:7:52"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "4965:42:52",
                                          "type": "",
                                          "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "and",
                                        "nodeType": "YulIdentifier",
                                        "src": "4952:3:52"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4952:56:52"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "4940:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4940:69:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4940:69:52"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "5022:19:52",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "5033:3:52"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "5038:2:52"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "5029:3:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5029:12:52"
                                },
                                "variableNames": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "5022:3:52"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "5054:25:52",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "5068:6:52"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "5076:2:52"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "5064:3:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5064:15:52"
                                },
                                "variableNames": [
                                  {
                                    "name": "srcPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "5054:6:52"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "4786:1:52"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "4789:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "4783:2:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4783:13:52"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "4797:18:52",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "4799:14:52",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "4808:1:52"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4811:1:52",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "4804:3:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4804:9:52"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "4799:1:52"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "4779:3:52",
                            "statements": []
                          },
                          "src": "4775:314:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5098:10:52",
                          "value": {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "5105:3:52"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "5098:3:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_array_address_dyn_calldata",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "4608:5:52",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "4615:6:52",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "4623:3:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "4631:3:52",
                        "type": ""
                      }
                    ],
                    "src": "4561:553:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5400:351:52",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5417:9:52"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "5428:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5410:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5410:25:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5410:25:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5455:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5466:2:52",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5451:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5451:18:52"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "5471:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5444:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5444:34:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5444:34:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5498:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5509:2:52",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5494:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5494:18:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5514:3:52",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5487:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5487:31:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5487:31:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5527:82:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "5573:6:52"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "5581:6:52"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5593:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5604:3:52",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5589:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5589:19:52"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_array_address_dyn_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "5535:37:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5535:74:52"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "5527:4:52"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5629:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5640:2:52",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5625:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5625:18:52"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value4",
                                    "nodeType": "YulIdentifier",
                                    "src": "5649:6:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5657:42:52",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "5645:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5645:55:52"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5618:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5618:83:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5618:83:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5721:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5732:3:52",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5717:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5717:19:52"
                              },
                              {
                                "name": "value5",
                                "nodeType": "YulIdentifier",
                                "src": "5738:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5710:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5710:35:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5710:35:52"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_rational_1_by_1_t_array$_t_address_$dyn_calldata_ptr_t_address_t_uint256__to_t_uint256_t_uint256_t_array$_t_address_$dyn_memory_ptr_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5329:9:52",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "5340:6:52",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "5348:6:52",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "5356:6:52",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "5364:6:52",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "5372:6:52",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5380:6:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "5391:4:52",
                        "type": ""
                      }
                    ],
                    "src": "5119:632:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5805:79:52",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "5815:17:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "5827:1:52"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "5830:1:52"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "5823:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5823:9:52"
                          },
                          "variableNames": [
                            {
                              "name": "diff",
                              "nodeType": "YulIdentifier",
                              "src": "5815:4:52"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5856:22:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "5858:16:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5858:18:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5858:18:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "diff",
                                "nodeType": "YulIdentifier",
                                "src": "5847:4:52"
                              },
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "5853:1:52"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "5844:2:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5844:11:52"
                          },
                          "nodeType": "YulIf",
                          "src": "5841:37:52"
                        }
                      ]
                    },
                    "name": "checked_sub_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "5787:1:52",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "5790:1:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "diff",
                        "nodeType": "YulTypedName",
                        "src": "5796:4:52",
                        "type": ""
                      }
                    ],
                    "src": "5756:128:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5970:103:52",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6016:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6025:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6028:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6018:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6018:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6018:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "5991:7:52"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6000:9:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "5987:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5987:23:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6012:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "5983:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5983:32:52"
                          },
                          "nodeType": "YulIf",
                          "src": "5980:52:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6041:26:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6057:9:52"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "6051:5:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6051:16:52"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "6041:6:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5936:9:52",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "5947:7:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5959:6:52",
                        "type": ""
                      }
                    ],
                    "src": "5889:184:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6125:148:52",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6216:22:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "6218:16:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6218:18:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6218:18:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "6141:5:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6148:66:52",
                                "type": "",
                                "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "6138:2:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6138:77:52"
                          },
                          "nodeType": "YulIf",
                          "src": "6135:103:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6247:20:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "6258:5:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6265:1:52",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6254:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6254:13:52"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "6247:3:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "increment_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "6107:5:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "6117:3:52",
                        "type": ""
                      }
                    ],
                    "src": "6078:195:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6452:180:52",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6469:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6480:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6462:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6462:21:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6462:21:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6503:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6514:2:52",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6499:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6499:18:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6519:2:52",
                                "type": "",
                                "value": "30"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6492:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6492:30:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6492:30:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6542:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6553:2:52",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6538:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6538:18:52"
                              },
                              {
                                "hexValue": "54726164652052657665727465642c204e6f2050726f666974204d616465",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "6558:32:52",
                                "type": "",
                                "value": "Trade Reverted, No Profit Made"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6531:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6531:60:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6531:60:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6600:26:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6612:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6623:2:52",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6608:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6608:18:52"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6600:4:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_648c7e631efe932f4ae6bdd98fc8802fcc52ea39377cd8368551bb80d4b86851__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6429:9:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6443:4:52",
                        "type": ""
                      }
                    ],
                    "src": "6278:354:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6826:170:52",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6843:9:52"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "6854:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6836:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6836:25:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6836:25:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6881:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6892:2:52",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6877:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6877:18:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6897:2:52",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6870:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6870:30:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6870:30:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6909:81:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "6955:6:52"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "6963:6:52"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6975:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6986:2:52",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6971:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6971:18:52"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_array_address_dyn_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "6917:37:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6917:73:52"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6909:4:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_array$_t_address_$dyn_calldata_ptr__to_t_uint256_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6779:9:52",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "6790:6:52",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "6798:6:52",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6806:6:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6817:4:52",
                        "type": ""
                      }
                    ],
                    "src": "6637:359:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7033:152:52",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7050:1:52",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7053:77:52",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7043:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7043:88:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7043:88:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7147:1:52",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7150:4:52",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7140:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7140:15:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7140:15:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7171:1:52",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7174:4:52",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "7164:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7164:15:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7164:15:52"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nodeType": "YulFunctionDefinition",
                    "src": "7001:184:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7296:1058:52",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7306:12:52",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7316:2:52",
                            "type": "",
                            "value": "32"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "7310:2:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7363:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7372:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7375:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "7365:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7365:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7365:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "7338:7:52"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7347:9:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "7334:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7334:23:52"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "7359:2:52"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "7330:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7330:32:52"
                          },
                          "nodeType": "YulIf",
                          "src": "7327:52:52"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7388:30:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7408:9:52"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "7402:5:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7402:16:52"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "7392:6:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7427:28:52",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7437:18:52",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "7431:2:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7482:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7491:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7494:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "7484:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7484:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7484:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "7470:6:52"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "7478:2:52"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "7467:2:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7467:14:52"
                          },
                          "nodeType": "YulIf",
                          "src": "7464:34:52"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7507:32:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7521:9:52"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "7532:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7517:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7517:22:52"
                          },
                          "variables": [
                            {
                              "name": "_3",
                              "nodeType": "YulTypedName",
                              "src": "7511:2:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7587:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7596:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7599:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "7589:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7589:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7589:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_3",
                                        "nodeType": "YulIdentifier",
                                        "src": "7566:2:52"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7570:4:52",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "7562:3:52"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7562:13:52"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "7577:7:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "7558:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7558:27:52"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "7551:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7551:35:52"
                          },
                          "nodeType": "YulIf",
                          "src": "7548:55:52"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7612:19:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "7628:2:52"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "7622:5:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7622:9:52"
                          },
                          "variables": [
                            {
                              "name": "_4",
                              "nodeType": "YulTypedName",
                              "src": "7616:2:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7654:22:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "7656:16:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7656:18:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7656:18:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "_4",
                                "nodeType": "YulIdentifier",
                                "src": "7646:2:52"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "7650:2:52"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "7643:2:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7643:10:52"
                          },
                          "nodeType": "YulIf",
                          "src": "7640:36:52"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7685:20:52",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7699:1:52",
                                "type": "",
                                "value": "5"
                              },
                              {
                                "name": "_4",
                                "nodeType": "YulIdentifier",
                                "src": "7702:2:52"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "7695:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7695:10:52"
                          },
                          "variables": [
                            {
                              "name": "_5",
                              "nodeType": "YulTypedName",
                              "src": "7689:2:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7714:23:52",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7734:2:52",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "7728:5:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7728:9:52"
                          },
                          "variables": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulTypedName",
                              "src": "7718:6:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7746:115:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "7768:6:52"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_5",
                                        "nodeType": "YulIdentifier",
                                        "src": "7784:2:52"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7788:2:52",
                                        "type": "",
                                        "value": "63"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "7780:3:52"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7780:11:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7793:66:52",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "7776:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7776:84:52"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7764:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7764:97:52"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "7750:10:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7920:22:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "7922:16:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7922:18:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7922:18:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "7879:10:52"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "7891:2:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "7876:2:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7876:18:52"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "7899:10:52"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "7911:6:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "7896:2:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7896:22:52"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "7873:2:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7873:46:52"
                          },
                          "nodeType": "YulIf",
                          "src": "7870:72:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7958:2:52",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "7962:10:52"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7951:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7951:22:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7951:22:52"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7982:17:52",
                          "value": {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "7993:6:52"
                          },
                          "variables": [
                            {
                              "name": "dst",
                              "nodeType": "YulTypedName",
                              "src": "7986:3:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "8015:6:52"
                              },
                              {
                                "name": "_4",
                                "nodeType": "YulIdentifier",
                                "src": "8023:2:52"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8008:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8008:18:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8008:18:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8035:22:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "8046:6:52"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "8054:2:52"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8042:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8042:15:52"
                          },
                          "variableNames": [
                            {
                              "name": "dst",
                              "nodeType": "YulIdentifier",
                              "src": "8035:3:52"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8066:34:52",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "8088:2:52"
                                  },
                                  {
                                    "name": "_5",
                                    "nodeType": "YulIdentifier",
                                    "src": "8092:2:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8084:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8084:11:52"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "8097:2:52"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8080:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8080:20:52"
                          },
                          "variables": [
                            {
                              "name": "srcEnd",
                              "nodeType": "YulTypedName",
                              "src": "8070:6:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8132:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8141:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8144:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "8134:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8134:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8134:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "srcEnd",
                                "nodeType": "YulIdentifier",
                                "src": "8115:6:52"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "8123:7:52"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "8112:2:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8112:19:52"
                          },
                          "nodeType": "YulIf",
                          "src": "8109:39:52"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8157:22:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "8172:2:52"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "8176:2:52"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8168:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8168:11:52"
                          },
                          "variables": [
                            {
                              "name": "src",
                              "nodeType": "YulTypedName",
                              "src": "8161:3:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8244:79:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "8265:3:52"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "src",
                                          "nodeType": "YulIdentifier",
                                          "src": "8276:3:52"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "8270:5:52"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8270:10:52"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "8258:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8258:23:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8258:23:52"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "8294:19:52",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "8305:3:52"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "8310:2:52"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "8301:3:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8301:12:52"
                                },
                                "variableNames": [
                                  {
                                    "name": "dst",
                                    "nodeType": "YulIdentifier",
                                    "src": "8294:3:52"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "8199:3:52"
                              },
                              {
                                "name": "srcEnd",
                                "nodeType": "YulIdentifier",
                                "src": "8204:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "8196:2:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8196:15:52"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "8212:23:52",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "8214:19:52",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nodeType": "YulIdentifier",
                                      "src": "8225:3:52"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "8230:2:52"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "8221:3:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8221:12:52"
                                },
                                "variableNames": [
                                  {
                                    "name": "src",
                                    "nodeType": "YulIdentifier",
                                    "src": "8214:3:52"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "8192:3:52",
                            "statements": []
                          },
                          "src": "8188:135:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8332:16:52",
                          "value": {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "8342:6:52"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "8332:6:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_array$_t_uint256_$dyn_memory_ptr_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7262:9:52",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "7273:7:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7285:6:52",
                        "type": ""
                      }
                    ],
                    "src": "7190:1164:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8533:182:52",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8550:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8561:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8543:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8543:21:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8543:21:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8584:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8595:2:52",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8580:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8580:18:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8600:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8573:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8573:30:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8573:30:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8623:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8634:2:52",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8619:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8619:18:52"
                              },
                              {
                                "hexValue": "4f776e61626c653a206e6577206f776e65722069732061646472657373283029",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "8639:34:52",
                                "type": "",
                                "value": "Ownable: new owner is address(0)"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8612:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8612:62:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8612:62:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8683:26:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8695:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8706:2:52",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8691:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8691:18:52"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8683:4:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_3978f3b289ec728e3a8e3ed8b2e2671590b07679c17a4555750456e43f6dad52__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8510:9:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8524:4:52",
                        "type": ""
                      }
                    ],
                    "src": "8359:356:52"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_decode_tuple_t_array$_t_struct$_MetaPath_$1275_calldata_ptr_$dyn_calldata_ptrt_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, shl(5, length)), 0x20), dataEnd) { revert(0, 0) }\n        value0 := add(_2, 0x20)\n        value1 := length\n        value2 := calldataload(add(headStart, 0x20))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function validator_revert_contract_IERC20(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_contract$_IERC20_$209t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_contract_IERC20(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_contract_IERC20(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function access_calldata_tail_t_struct$_MetaPath_$1275_calldata_ptr(base_ref, ptr_to_tail) -> addr\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1))) { revert(0, 0) }\n        addr := add(base_ref, rel_offset_of_tail)\n    }\n    function access_calldata_tail_t_array$_t_address_$dyn_calldata_ptr(base_ref, ptr_to_tail) -> addr, length\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1))) { revert(0, 0) }\n        let addr_1 := add(base_ref, rel_offset_of_tail)\n        length := calldataload(addr_1)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        addr := add(addr_1, 0x20)\n        if sgt(addr, sub(calldatasize(), shl(5, length))) { revert(0, 0) }\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_array_address_dyn_calldata(value, length, pos) -> end\n    {\n        mstore(pos, length)\n        let _1 := 0x20\n        pos := add(pos, _1)\n        let srcPtr := value\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            let value_1 := calldataload(srcPtr)\n            validator_revert_contract_IERC20(value_1)\n            mstore(pos, and(value_1, 0xffffffffffffffffffffffffffffffffffffffff))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos\n    }\n    function abi_encode_tuple_t_uint256_t_rational_1_by_1_t_array$_t_address_$dyn_calldata_ptr_t_address_t_uint256__to_t_uint256_t_uint256_t_array$_t_address_$dyn_memory_ptr_t_address_t_uint256__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), 160)\n        tail := abi_encode_array_address_dyn_calldata(value2, value3, add(headStart, 160))\n        mstore(add(headStart, 96), and(value4, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 128), value5)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_648c7e631efe932f4ae6bdd98fc8802fcc52ea39377cd8368551bb80d4b86851__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 30)\n        mstore(add(headStart, 64), \"Trade Reverted, No Profit Made\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256_t_array$_t_address_$dyn_calldata_ptr__to_t_uint256_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), 64)\n        tail := abi_encode_array_address_dyn_calldata(value1, value2, add(headStart, 64))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_array$_t_uint256_$dyn_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        let _1 := 32\n        if slt(sub(dataEnd, headStart), _1) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _2 := 0xffffffffffffffff\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := mload(_3)\n        if gt(_4, _2) { panic_error_0x41() }\n        let _5 := shl(5, _4)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(_5, 63), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        let dst := memPtr\n        mstore(memPtr, _4)\n        dst := add(memPtr, _1)\n        let srcEnd := add(add(_3, _5), _1)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_3, _1)\n        for { } lt(src, srcEnd) { src := add(src, _1) }\n        {\n            mstore(dst, mload(src))\n            dst := add(dst, _1)\n        }\n        value0 := memPtr\n    }\n    function abi_encode_tuple_t_stringliteral_3978f3b289ec728e3a8e3ed8b2e2671590b07679c17a4555750456e43f6dad52__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: new owner is address(0)\")\n        tail := add(headStart, 96)\n    }\n}",
              "id": 52,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {},
          "linkReferences": {},
          "object": "608060405234801561001057600080fd5b50600436106100725760003560e01c80638da5cb5b116100505780638da5cb5b146100ba578063baaf2d4f146100e2578063f2fde38b1461010557600080fd5b806335b7163f146100775780634f8072d01461008c578063715018a6146100b2575b600080fd5b61008a610085366004610a60565b610118565b005b61009f61009a366004610a60565b610571565b6040519081526020015b60405180910390f35b61008a6106f8565b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100a9565b6100f56100f0366004610afd565b610785565b60405190151581526020016100a9565b61008a610113366004610b29565b6108e1565b60005473ffffffffffffffffffffffffffffffffffffffff16331461019e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b808060005b84811015610500578585828181106101bd576101bd610b4d565b90506020028101906101cf9190610b7c565b6101dd906020810190610bba565b60008181106101ee576101ee610b4d565b90506020020160208101906102039190610b29565b73ffffffffffffffffffffffffffffffffffffffff1663095ea7b387878481811061023057610230610b4d565b90506020028101906102429190610b7c565b610250906020810190610b29565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602481018590526044016020604051808303816000875af11580156102c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e69190610c29565b508585828181106102f9576102f9610b4d565b905060200281019061030b9190610b7c565b610319906020810190610b29565b73ffffffffffffffffffffffffffffffffffffffff16635c11d79583600189898681811061034957610349610b4d565b905060200281019061035b9190610b7c565b610369906020810190610bba565b306103764261012c610c7a565b6040518763ffffffff1660e01b815260040161039796959493929190610ce3565b600060405180830381600087803b1580156103b157600080fd5b505af11580156103c5573d6000803e3d6000fd5b505050508585828181106103db576103db610b4d565b90506020028101906103ed9190610b7c565b6103fb906020810190610bba565b600188888581811061040f5761040f610b4d565b90506020028101906104219190610b7c565b61042f906020810190610bba565b61043a929150610d2e565b81811061044957610449610b4d565b905060200201602081019061045e9190610b29565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff91909116906370a0823190602401602060405180830381865afa1580156104ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ee9190610d41565b91506104f981610d5a565b90506101a3565b5081811161056a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f54726164652052657665727465642c204e6f2050726f666974204d61646500006044820152606401610195565b5050505050565b600081815b848110156106ef57600086868381811061059257610592610b4d565b90506020028101906105a49190610b7c565b6105b2906020810190610b29565b73ffffffffffffffffffffffffffffffffffffffff1663d06ca61f848989868181106105e0576105e0610b4d565b90506020028101906105f29190610b7c565b610600906020810190610bba565b6040518463ffffffff1660e01b815260040161061e93929190610d92565b600060405180830381865afa15801561063b573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526106819190810190610de4565b905080600188888581811061069857610698610b4d565b90506020028101906106aa9190610b7c565b6106b8906020810190610bba565b6106c3929150610d2e565b815181106106d3576106d3610b4d565b6020026020010151925050806106e890610d5a565b9050610576565b50949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610779576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610195565b61078360006109eb565b565b6000805473ffffffffffffffffffffffffffffffffffffffff163314610807576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610195565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb61084260005473ffffffffffffffffffffffffffffffffffffffff1690565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602481018590526044016020604051808303816000875af11580156108b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d89190610c29565b90505b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610962576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610195565b73ffffffffffffffffffffffffffffffffffffffff81166109df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a206e6577206f776e657220697320616464726573732830296044820152606401610195565b6109e8816109eb565b50565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600060408486031215610a7557600080fd5b833567ffffffffffffffff80821115610a8d57600080fd5b818601915086601f830112610aa157600080fd5b813581811115610ab057600080fd5b8760208260051b8501011115610ac557600080fd5b6020928301989097509590910135949350505050565b73ffffffffffffffffffffffffffffffffffffffff811681146109e857600080fd5b60008060408385031215610b1057600080fd5b8235610b1b81610adb565b946020939093013593505050565b600060208284031215610b3b57600080fd5b8135610b4681610adb565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1833603018112610bb057600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610bef57600080fd5b83018035915067ffffffffffffffff821115610c0a57600080fd5b6020019150600581901b3603821315610c2257600080fd5b9250929050565b600060208284031215610c3b57600080fd5b81518015158114610b4657600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156108db576108db610c4b565b8183526000602080850194508260005b85811015610cd8578135610cb081610adb565b73ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101610c9d565b509495945050505050565b86815285602082015260a060408201526000610d0360a083018688610c8d565b73ffffffffffffffffffffffffffffffffffffffff9490941660608301525060800152949350505050565b818103818111156108db576108db610c4b565b600060208284031215610d5357600080fd5b5051919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d8b57610d8b610c4b565b5060010190565b838152604060208201526000610dac604083018486610c8d565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020808385031215610df757600080fd5b825167ffffffffffffffff80821115610e0f57600080fd5b818501915085601f830112610e2357600080fd5b815181811115610e3557610e35610db5565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108582111715610e7857610e78610db5565b604052918252848201925083810185019188831115610e9657600080fd5b938501935b82851015610eb457845184529385019392850192610e9b565b9897505050505050505056fea264697066735822122017a0bfb0a7a59551af46dd19d372a3956b7624e5ddd805d5fb26e317fe8754f064736f6c63430008110033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x72 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x50 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xBA JUMPI DUP1 PUSH4 0xBAAF2D4F EQ PUSH2 0xE2 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x105 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x35B7163F EQ PUSH2 0x77 JUMPI DUP1 PUSH4 0x4F8072D0 EQ PUSH2 0x8C JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xB2 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8A PUSH2 0x85 CALLDATASIZE PUSH1 0x4 PUSH2 0xA60 JUMP JUMPDEST PUSH2 0x118 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x9F PUSH2 0x9A CALLDATASIZE PUSH1 0x4 PUSH2 0xA60 JUMP JUMPDEST PUSH2 0x571 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x8A PUSH2 0x6F8 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xA9 JUMP JUMPDEST PUSH2 0xF5 PUSH2 0xF0 CALLDATASIZE PUSH1 0x4 PUSH2 0xAFD JUMP JUMPDEST PUSH2 0x785 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xA9 JUMP JUMPDEST PUSH2 0x8A PUSH2 0x113 CALLDATASIZE PUSH1 0x4 PUSH2 0xB29 JUMP JUMPDEST PUSH2 0x8E1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x19E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP1 PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x500 JUMPI DUP6 DUP6 DUP3 DUP2 DUP2 LT PUSH2 0x1BD JUMPI PUSH2 0x1BD PUSH2 0xB4D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x1CF SWAP2 SWAP1 PUSH2 0xB7C JUMP JUMPDEST PUSH2 0x1DD SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xBBA JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 LT PUSH2 0x1EE JUMPI PUSH2 0x1EE PUSH2 0xB4D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x203 SWAP2 SWAP1 PUSH2 0xB29 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x95EA7B3 DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0x230 JUMPI PUSH2 0x230 PUSH2 0xB4D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x242 SWAP2 SWAP1 PUSH2 0xB7C JUMP JUMPDEST PUSH2 0x250 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xB29 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2C2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2E6 SWAP2 SWAP1 PUSH2 0xC29 JUMP JUMPDEST POP DUP6 DUP6 DUP3 DUP2 DUP2 LT PUSH2 0x2F9 JUMPI PUSH2 0x2F9 PUSH2 0xB4D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x30B SWAP2 SWAP1 PUSH2 0xB7C JUMP JUMPDEST PUSH2 0x319 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xB29 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5C11D795 DUP4 PUSH1 0x1 DUP10 DUP10 DUP7 DUP2 DUP2 LT PUSH2 0x349 JUMPI PUSH2 0x349 PUSH2 0xB4D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x35B SWAP2 SWAP1 PUSH2 0xB7C JUMP JUMPDEST PUSH2 0x369 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xBBA JUMP JUMPDEST ADDRESS PUSH2 0x376 TIMESTAMP PUSH2 0x12C PUSH2 0xC7A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x397 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xCE3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3C5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP6 DUP6 DUP3 DUP2 DUP2 LT PUSH2 0x3DB JUMPI PUSH2 0x3DB PUSH2 0xB4D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x3ED SWAP2 SWAP1 PUSH2 0xB7C JUMP JUMPDEST PUSH2 0x3FB SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xBBA JUMP JUMPDEST PUSH1 0x1 DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x40F JUMPI PUSH2 0x40F PUSH2 0xB4D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x421 SWAP2 SWAP1 PUSH2 0xB7C JUMP JUMPDEST PUSH2 0x42F SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xBBA JUMP JUMPDEST PUSH2 0x43A SWAP3 SWAP2 POP PUSH2 0xD2E JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x449 JUMPI PUSH2 0x449 PUSH2 0xB4D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x45E SWAP2 SWAP1 PUSH2 0xB29 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4CA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4EE SWAP2 SWAP1 PUSH2 0xD41 JUMP JUMPDEST SWAP2 POP PUSH2 0x4F9 DUP2 PUSH2 0xD5A JUMP JUMPDEST SWAP1 POP PUSH2 0x1A3 JUMP JUMPDEST POP DUP2 DUP2 GT PUSH2 0x56A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726164652052657665727465642C204E6F2050726F666974204D6164650000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x195 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x6EF JUMPI PUSH1 0x0 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x592 JUMPI PUSH2 0x592 PUSH2 0xB4D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x5A4 SWAP2 SWAP1 PUSH2 0xB7C JUMP JUMPDEST PUSH2 0x5B2 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xB29 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD06CA61F DUP5 DUP10 DUP10 DUP7 DUP2 DUP2 LT PUSH2 0x5E0 JUMPI PUSH2 0x5E0 PUSH2 0xB4D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x5F2 SWAP2 SWAP1 PUSH2 0xB7C JUMP JUMPDEST PUSH2 0x600 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xBBA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x61E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xD92 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x63B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x681 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xDE4 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x698 JUMPI PUSH2 0x698 PUSH2 0xB4D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x6AA SWAP2 SWAP1 PUSH2 0xB7C JUMP JUMPDEST PUSH2 0x6B8 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xBBA JUMP JUMPDEST PUSH2 0x6C3 SWAP3 SWAP2 POP PUSH2 0xD2E JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x6D3 JUMPI PUSH2 0x6D3 PUSH2 0xB4D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP POP DUP1 PUSH2 0x6E8 SWAP1 PUSH2 0xD5A JUMP JUMPDEST SWAP1 POP PUSH2 0x576 JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x779 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x195 JUMP JUMPDEST PUSH2 0x783 PUSH1 0x0 PUSH2 0x9EB JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x807 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x195 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB PUSH2 0x842 PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x8B4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8D8 SWAP2 SWAP1 PUSH2 0xC29 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x962 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x195 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x9DF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E65722069732061646472657373283029 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x195 JUMP JUMPDEST PUSH2 0x9E8 DUP2 PUSH2 0x9EB JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xA75 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xA8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xAA1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xAB0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xAC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 DUP4 ADD SWAP9 SWAP1 SWAP8 POP SWAP6 SWAP1 SWAP2 ADD CALLDATALOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x9E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0xB1B DUP2 PUSH2 0xADB JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xB46 DUP2 PUSH2 0xADB JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC1 DUP4 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xBB0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xBEF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xC0A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP PUSH1 0x5 DUP2 SWAP1 SHL CALLDATASIZE SUB DUP3 SGT ISZERO PUSH2 0xC22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xB46 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x8DB JUMPI PUSH2 0x8DB PUSH2 0xC4B JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x0 PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP3 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0xCD8 JUMPI DUP2 CALLDATALOAD PUSH2 0xCB0 DUP2 PUSH2 0xADB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xC9D JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP7 DUP2 MSTORE DUP6 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0xD03 PUSH1 0xA0 DUP4 ADD DUP7 DUP9 PUSH2 0xC8D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 SWAP1 SWAP5 AND PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x8DB JUMPI PUSH2 0x8DB PUSH2 0xC4B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD53 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0xD8B JUMPI PUSH2 0xD8B PUSH2 0xC4B JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0xDAC PUSH1 0x40 DUP4 ADD DUP5 DUP7 PUSH2 0xC8D JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xDF7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xE0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xE23 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0xE35 JUMPI PUSH2 0xE35 PUSH2 0xDB5 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0xE78 JUMPI PUSH2 0xE78 PUSH2 0xDB5 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP9 DUP4 GT ISZERO PUSH2 0xE96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0xEB4 JUMPI DUP5 MLOAD DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP6 ADD SWAP3 PUSH2 0xE9B JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 OR LOG0 0xBF 0xB0 0xA7 0xA5 SWAP6 MLOAD 0xAF CHAINID 0xDD NOT 0xD3 PUSH19 0xA3956B7624E5DDD805D5FB26E317FE8754F064 PUSH20 0x6F6C634300081100330000000000000000000000 ",
          "sourceMap": "854:1358:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;887:761;;;;;;:::i;:::-;;:::i;:::-;;1807:403;;;;;;:::i;:::-;;:::i;:::-;;;882:25:52;;;870:2;855:18;1807:403:11;;;;;;;;1230:103:0;;;:::i;1578:86::-;1633:7;1654:6;1578:86;;1654:6;;;;1064:74:52;;1052:2;1037:18;1578:86:0;918:226:52;1651:153:11;;;;;;:::i;:::-;;:::i;:::-;;;1823:14:52;;1816:22;1798:41;;1786:2;1771:18;1651:153:11;1658:187:52;1362::0;;;;;;:::i;:::-;;:::i;887:761:11:-;1633:7:0;1654:6;901:23;1654:6;747:10:10;901:23:0;893:68;;;;;;;2312:2:52;893:68:0;;;2294:21:52;;;2331:18;;;2324:30;2390:34;2370:18;;;2363:62;2442:18;;893:68:0;;;;;;;;;1004:6:11;;981:20:::1;1059:500;1078:19:::0;;::::1;1059:500;;;1118:8;;1127:1;1118:11;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;:16;::::0;::::1;::::0;::::1;::::0;::::1;:::i;:::-;1135:1;1118:19;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;1111:35;;;1147:8;;1156:1;1147:11;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;:18;::::0;::::1;::::0;::::1;::::0;::::1;:::i;:::-;1111:81;::::0;;::::1;::::0;;;;;;3862:42:52;3850:55;;;1111:81:11::1;::::0;::::1;3832:74:52::0;3922:18;;;3915:34;;;3805:18;;1111:81:11::1;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1220:8;;1229:1;1220:11;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;:18;::::0;::::1;::::0;::::1;::::0;::::1;:::i;:::-;1197:96;;;1299:24;1329:1;1336:8;;1345:1;1336:11;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;:16;::::0;::::1;::::0;::::1;::::0;::::1;:::i;:::-;1366:4;1377:21;:15;1395:3;1377:21;:::i;:::-;1197:247;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;1483:8;;1492:1;1483:11;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;:16;::::0;::::1;::::0;::::1;::::0;::::1;:::i;:::-;1526:1;1500:8;;1509:1;1500:11;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;:16;::::0;::::1;::::0;::::1;::::0;::::1;:::i;:::-;:27;::::0;;-1:-1:-1;1500:27:11::1;:::i;:::-;1483:45;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;1476:78;::::0;;;;1548:4:::1;1476:78;::::0;::::1;1064:74:52::0;1476:63:11::1;::::0;;;::::1;::::0;::::1;::::0;1037:18:52;;1476:78:11::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1449:105:::0;-1:-1:-1;1099:3:11::1;::::0;::::1;:::i;:::-;;;1059:500;;;;1597:12;1570:24;:39;1562:82;;;::::0;::::1;::::0;;6480:2:52;1562:82:11::1;::::0;::::1;6462:21:52::0;6519:2;6499:18;;;6492:30;6558:32;6538:18;;;6531:60;6608:18;;1562:82:11::1;6278:354:52::0;1562:82:11::1;977:671;;887:761:::0;;;:::o;1807:403::-;1909:7;1943:6;1909:7;1953:234;1972:19;;;1953:234;;;2005:30;2061:8;;2070:1;2061:11;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;:18;;;;;;;:::i;:::-;2038:56;;;2095:9;2106:8;;2115:1;2106:11;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;:16;;;;;;;:::i;:::-;2038:85;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2005:118;;2140:13;2180:1;2154:8;;2163:1;2154:11;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;:16;;;;;;;:::i;:::-;:27;;;-1:-1:-1;2154:27:11;:::i;:::-;2140:42;;;;;;;;:::i;:::-;;;;;;;2128:54;;2000:187;1993:3;;;;:::i;:::-;;;1953:234;;;-1:-1:-1;2197:9:11;1807:403;-1:-1:-1;;;;1807:403:11:o;1230:103:0:-;1633:7;1654:6;901:23;1654:6;747:10:10;901:23:0;893:68;;;;;;;2312:2:52;893:68:0;;;2294:21:52;;;2331:18;;;2324:30;2390:34;2370:18;;;2363:62;2442:18;;893:68:0;2110:356:52;893:68:0;1299:30:::1;1326:1;1299:18;:30::i;:::-;1230:103::o:0;1651:153:11:-;1751:4;1654:6:0;;901:23;1654:6;747:10:10;901:23:0;893:68;;;;;;;2312:2:52;893:68:0;;;2294:21:52;;;2331:18;;;2324:30;2390:34;2370:18;;;2363:62;2442:18;;893:68:0;2110:356:52;893:68:0;1769:5:11::1;:14;;;1784:7;1633::0::0;1654:6;;;;1578:86;1784:7:11::1;1769:31;::::0;;::::1;::::0;;;;;;3862:42:52;3850:55;;;1769:31:11::1;::::0;::::1;3832:74:52::0;3922:18;;;3915:34;;;3805:18;;1769:31:11::1;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1762:38;;965:1:0;1651:153:11::0;;;;:::o;1362:187:0:-;1633:7;1654:6;901:23;1654:6;747:10:10;901:23:0;893:68;;;;;;;2312:2:52;893:68:0;;;2294:21:52;;;2331:18;;;2324:30;2390:34;2370:18;;;2363:62;2442:18;;893:68:0;2110:356:52;893:68:0;1454:22:::1;::::0;::::1;1446:67;;;::::0;::::1;::::0;;8561:2:52;1446:67:0::1;::::0;::::1;8543:21:52::0;;;8580:18;;;8573:30;8639:34;8619:18;;;8612:62;8691:18;;1446:67:0::1;8359:356:52::0;1446:67:0::1;1517:28;1536:8;1517:18;:28::i;:::-;1362:187:::0;:::o;1872:167::-;1940:16;1959:6;;;1969:17;;;;;;;;;;1995:40;;1959:6;;;;;;;1995:40;;1940:16;1995:40;1936:103;1872:167;:::o;14:717:52:-;137:6;145;153;206:2;194:9;185:7;181:23;177:32;174:52;;;222:1;219;212:12;174:52;262:9;249:23;291:18;332:2;324:6;321:14;318:34;;;348:1;345;338:12;318:34;386:6;375:9;371:22;361:32;;431:7;424:4;420:2;416:13;412:27;402:55;;453:1;450;443:12;402:55;493:2;480:16;519:2;511:6;508:14;505:34;;;535:1;532;525:12;505:34;590:7;583:4;573:6;570:1;566:14;562:2;558:23;554:34;551:47;548:67;;;611:1;608;601:12;548:67;642:4;634:13;;;;666:6;;-1:-1:-1;704:20:52;;;;691:34;;14:717;-1:-1:-1;;;;14:717:52:o;1149:162::-;1243:42;1236:5;1232:54;1225:5;1222:65;1212:93;;1301:1;1298;1291:12;1316:337;1398:6;1406;1459:2;1447:9;1438:7;1434:23;1430:32;1427:52;;;1475:1;1472;1465:12;1427:52;1514:9;1501:23;1533:39;1566:5;1533:39;:::i;:::-;1591:5;1643:2;1628:18;;;;1615:32;;-1:-1:-1;;;1316:337:52:o;1850:255::-;1909:6;1962:2;1950:9;1941:7;1937:23;1933:32;1930:52;;;1978:1;1975;1968:12;1930:52;2017:9;2004:23;2036:39;2069:5;2036:39;:::i;:::-;2094:5;1850:255;-1:-1:-1;;;1850:255:52:o;2471:184::-;2523:77;2520:1;2513:88;2620:4;2617:1;2610:15;2644:4;2641:1;2634:15;2660:384;2754:4;2812:11;2799:25;2902:66;2891:8;2875:14;2871:29;2867:102;2847:18;2843:127;2833:155;;2984:1;2981;2974:12;2833:155;3005:33;;;;;2660:384;-1:-1:-1;;2660:384:52:o;3049:604::-;3142:4;3148:6;3208:11;3195:25;3298:66;3287:8;3271:14;3267:29;3263:102;3243:18;3239:127;3229:155;;3380:1;3377;3370:12;3229:155;3407:33;;3459:20;;;-1:-1:-1;3502:18:52;3491:30;;3488:50;;;3534:1;3531;3524:12;3488:50;3567:4;3555:17;;-1:-1:-1;3618:1:52;3614:14;;;3598;3594:35;3584:46;;3581:66;;;3643:1;3640;3633:12;3581:66;3049:604;;;;;:::o;3960:277::-;4027:6;4080:2;4068:9;4059:7;4055:23;4051:32;4048:52;;;4096:1;4093;4086:12;4048:52;4128:9;4122:16;4181:5;4174:13;4167:21;4160:5;4157:32;4147:60;;4203:1;4200;4193:12;4242:184;4294:77;4291:1;4284:88;4391:4;4388:1;4381:15;4415:4;4412:1;4405:15;4431:125;4496:9;;;4517:10;;;4514:36;;;4530:18;;:::i;4561:553::-;4661:6;4656:3;4649:19;4631:3;4687:4;4716:2;4711:3;4707:12;4700:19;;4742:5;4765:1;4775:314;4789:6;4786:1;4783:13;4775:314;;;4866:6;4853:20;4886:41;4919:7;4886:41;:::i;:::-;4965:42;4952:56;4940:69;;5029:12;;;;5064:15;;;;4811:1;4804:9;4775:314;;;-1:-1:-1;5105:3:52;;4561:553;-1:-1:-1;;;;;4561:553:52:o;5119:632::-;5428:6;5417:9;5410:25;5471:6;5466:2;5455:9;5451:18;5444:34;5514:3;5509:2;5498:9;5494:18;5487:31;5391:4;5535:74;5604:3;5593:9;5589:19;5581:6;5573;5535:74;:::i;:::-;5657:42;5645:55;;;;5640:2;5625:18;;5618:83;-1:-1:-1;5732:3:52;5717:19;5710:35;5527:82;5119:632;-1:-1:-1;;;;5119:632:52:o;5756:128::-;5823:9;;;5844:11;;;5841:37;;;5858:18;;:::i;5889:184::-;5959:6;6012:2;6000:9;5991:7;5987:23;5983:32;5980:52;;;6028:1;6025;6018:12;5980:52;-1:-1:-1;6051:16:52;;5889:184;-1:-1:-1;5889:184:52:o;6078:195::-;6117:3;6148:66;6141:5;6138:77;6135:103;;6218:18;;:::i;:::-;-1:-1:-1;6265:1:52;6254:13;;6078:195::o;6637:359::-;6854:6;6843:9;6836:25;6897:2;6892;6881:9;6877:18;6870:30;6817:4;6917:73;6986:2;6975:9;6971:18;6963:6;6955;6917:73;:::i;:::-;6909:81;6637:359;-1:-1:-1;;;;;6637:359:52:o;7001:184::-;7053:77;7050:1;7043:88;7150:4;7147:1;7140:15;7174:4;7171:1;7164:15;7190:1164;7285:6;7316:2;7359;7347:9;7338:7;7334:23;7330:32;7327:52;;;7375:1;7372;7365:12;7327:52;7408:9;7402:16;7437:18;7478:2;7470:6;7467:14;7464:34;;;7494:1;7491;7484:12;7464:34;7532:6;7521:9;7517:22;7507:32;;7577:7;7570:4;7566:2;7562:13;7558:27;7548:55;;7599:1;7596;7589:12;7548:55;7628:2;7622:9;7650:2;7646;7643:10;7640:36;;;7656:18;;:::i;:::-;7702:2;7699:1;7695:10;7734:2;7728:9;7793:66;7788:2;7784;7780:11;7776:84;7768:6;7764:97;7911:6;7899:10;7896:22;7891:2;7879:10;7876:18;7873:46;7870:72;;;7922:18;;:::i;:::-;7958:2;7951:22;8008:18;;;8042:15;;;;-1:-1:-1;8084:11:52;;;8080:20;;;8112:19;;;8109:39;;;8144:1;8141;8134:12;8109:39;8168:11;;;;8188:135;8204:6;8199:3;8196:15;8188:135;;;8270:10;;8258:23;;8221:12;;;;8301;;;;8188:135;;;8342:6;7190:1164;-1:-1:-1;;;;;;;;7190:1164:52:o"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "766000",
            "executionCost": "26640",
            "totalCost": "792640"
          },
          "external": {
            "getAmountOutMin((address,address[])[],uint256)": "infinite",
            "owner()": "2289",
            "renounceOwnership()": "28120",
            "trade((address,address[])[],uint256)": "infinite",
            "transferOtherERC20Token(address,uint256)": "infinite",
            "transferOwnership(address)": "infinite"
          }
        },
        "methodIdentifiers": {
          "getAmountOutMin((address,address[])[],uint256)": "4f8072d0",
          "owner()": "8da5cb5b",
          "renounceOwnership()": "715018a6",
          "trade((address,address[])[],uint256)": "35b7163f",
          "transferOtherERC20Token(address,uint256)": "baaf2d4f",
          "transferOwnership(address)": "f2fde38b"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"internalType\":\"struct MetaPath[]\",\"name\":\"metaPath\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getAmountOutMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"internalType\":\"struct MetaPath[]\",\"name\":\"metaPath\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferOtherERC20Token\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The current owner.\"}},\"renounceOwnership()\":{\"details\":\"Sets the zero address as the new contract owner.\"},\"transferOwnership(address)\":{\"params\":{\"newOwner\":\"The new owner of the contract.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when ownership is moved from one address to another.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Returns the current owner.\"},\"renounceOwnership()\":{\"notice\":\"Leaves the contract without an owner. It will not be possible to call {onlyOwner} functions anymore. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner. Emits an [`OwnershipTransferred`](#ownershiptransferred) event indicating the renounced ownership. Requirements: - Can only be called by the current owner. \"},\"transferOwnership(address)\":{\"notice\":\"Transfers ownership of the contract to a new address. Emits an [`OwnershipTransferred`](#ownershiptransferred) event indicating the transfered ownership. Requirements: - Can only be called by the current owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Bot/Arb.sol\":\"Arb\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500000},\"remappings\":[]},\"sources\":{\"@exoda/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/access/IOwnable.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @title Ownable contract module.\\n * @author Ing. Michael Goldfinger\\n * @notice Contract module which provides a basic access control mechanism, where\\n * there is an address (an owner) that can be granted exclusive access to specific functions.\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with the function {transferOwnership(address newOwner)}\\\".\\n * @dev This module is used through inheritance. It will make available the modifier\\n * {onlyOwner}, which can be applied to your functions to restrict their use to the owner.\\n */\\ncontract Ownable is IOwnable, Context\\n{\\n\\taddress private _owner;\\n\\n\\t/**\\n\\t* @notice Throws if called by any account other than the owner.\\n\\t*/\\n\\tmodifier onlyOwner()\\n\\t{\\n\\t\\trequire(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Initializes the contract setting the deployer as the initial owner.\\n\\t* \\n\\t* Emits an {OwnershipTransferred} event indicating the initially set ownership.\\n\\t*/\\n\\tconstructor()\\n\\t{\\n\\t\\t_transferOwnership(_msgSender());\\n\\t}\\n\\n\\t/// @inheritdoc IOwnable\\n\\tfunction renounceOwnership() override public virtual onlyOwner \\n\\t{\\n\\t\\t_transferOwnership(address(0));\\n\\t}\\n\\n\\t/// @inheritdoc IOwnable\\n\\tfunction transferOwnership(address newOwner) override public virtual onlyOwner\\n\\t{\\n\\t\\trequire(newOwner != address(0), \\\"Ownable: new owner is address(0)\\\");\\n\\t\\t_transferOwnership(newOwner);\\n\\t}\\n\\n\\t/// @inheritdoc IOwnable\\n\\tfunction owner() public view virtual override returns (address)\\n\\t{\\n\\t\\treturn _owner;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Transfers ownership of the contract to a new address.\\n\\t* Internal function without access restriction.\\n\\t* \\n\\t* Emits an {OwnershipTransferred} event indicating the transfered ownership.\\n\\t*/\\n\\tfunction _transferOwnership(address newOwner) internal virtual\\n\\t{\\n\\t\\taddress oldOwner = _owner;\\n\\t\\t_owner = newOwner;\\n\\t\\temit OwnershipTransferred(oldOwner, newOwner);\\n\\t}\\n}\\n\",\"keccak256\":\"0x2a1355eddd79ce931f562edbc248e876dc143cf0b53a087fff04c6d9aca69c18\",\"license\":\"MIT\"},\"@exoda/contracts/interfaces/access/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Ownable interface.\\n/// @author Ing. Michael Goldfinger\\n/// @notice This interface contains all visible functions and events for the Ownable contract module.\\ninterface IOwnable\\n{\\n\\t/// @notice Emitted when ownership is moved from one address to another.\\n\\t/// @param previousOwner (indexed) The owner of the contract until now.\\n\\t/// @param newOwner (indexed) The new owner of the contract.\\n\\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\t/**\\n\\t * @notice Leaves the contract without an owner. It will not be possible to call {onlyOwner} functions anymore.\\n\\t *\\n\\t * NOTE: Renouncing ownership will leave the contract without an owner,\\n\\t * thereby removing any functionality that is only available to the owner.\\n\\t *\\n\\t * Emits an [`OwnershipTransferred`](#ownershiptransferred) event indicating the renounced ownership.\\n\\t *\\n\\t * Requirements:\\n\\t * - Can only be called by the current owner.\\n\\t * \\n\\t * @dev Sets the zero address as the new contract owner.\\n\\t */\\n\\tfunction renounceOwnership() external;\\n\\n\\t/**\\n\\t * @notice Transfers ownership of the contract to a new address.\\n\\t *\\n\\t * Emits an [`OwnershipTransferred`](#ownershiptransferred) event indicating the transfered ownership.\\n\\t *\\n\\t * Requirements:\\n\\t * - Can only be called by the current owner.\\n\\t *\\n\\t * @param newOwner The new owner of the contract.\\n\\t */\\n\\tfunction transferOwnership(address newOwner) external;\\n\\n\\t/// @notice Returns the current owner.\\n\\t/// @return The current owner.\\n\\tfunction owner() external view returns (address);\\n}\",\"keccak256\":\"0xfec11d14cb2fce6cec8e81b199452a616199a58763a8497e37212f856f4a4e15\",\"license\":\"MIT\"},\"@exoda/contracts/interfaces/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC20 interface.\\n * @author Ing. Michael Goldfinger\\n * @notice Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20\\n{\\n\\t/**\\n\\t * @notice Emitted when the allowance of a {spender} for an {owner} is set to a new value.\\n\\t *\\n\\t * NOTE: {value} may be zero.\\n\\t * @param owner (indexed) The owner of the tokens.\\n\\t * @param spender (indexed) The spender for the tokens.\\n\\t * @param value The amount of tokens that got an allowance.\\n\\t */\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n\\t/**\\n\\t * @notice Emitted when {value} tokens are moved from one address {from} to another {to}.\\n\\t *\\n\\t * NOTE: {value} may be zero.\\n\\t * @param from (indexed) The origin of the transfer.\\n\\t * @param to (indexed) The target of the transfer.\\n\\t * @param value The amount of tokens that got transfered.\\n\\t */\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\t/**\\n\\t* @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n\\t*\\n\\t* Returns a boolean value indicating whether the operation succeeded.\\n\\t*\\n\\t* IMPORTANT: Beware that changing an allowance with this method brings the risk\\n\\t* that someone may use both the old and the new allowance by unfortunate\\n\\t* transaction ordering. One possible solution to mitigate this race\\n\\t* condition is to first reduce the spender's allowance to 0 and set the\\n\\t* desired value afterwards:\\n\\t* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\t*\\n\\t* Emits an {Approval} event.\\n\\t*/\\n\\tfunction approve(address spender, uint256 amount) external returns (bool);\\n\\n\\t/**\\n\\t* @dev Moves `amount` tokens from the caller's account to `to`.\\n\\t*\\n\\t* Returns a boolean value indicating whether the operation succeeded.\\n\\t*\\n\\t* Emits a {Transfer} event.\\n\\t*/\\n\\tfunction transfer(address to, uint256 amount) external returns (bool);\\n\\n\\t/**\\n\\t* @dev Moves `amount` tokens from `from` to `to` using the allowance mechanism.\\n\\t* `amount` is then deducted from the caller's allowance.\\n\\t*\\n\\t* Returns a boolean value indicating whether the operation succeeded.\\n\\t*\\n\\t* Emits a {Transfer} event.\\n\\t*/\\n\\tfunction transferFrom(address from, address to, uint256 amount) external returns (bool);\\n\\n\\t/**\\n\\t* @dev Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}.\\n\\t* This is zero by default.\\n\\t*\\n\\t* This value changes when {approve}, {increaseAllowance}, {decreseAllowance} or {transferFrom} are called.\\n\\t*/\\n\\tfunction allowance(address owner, address spender) external view returns (uint256);\\n\\n\\t/**\\n\\t* @dev Returns the amount of tokens owned by `account`.\\n\\t*/\\n\\tfunction balanceOf(address account) external view returns (uint256);\\n\\n\\t/**\\n\\t* @dev Returns the amount of tokens in existence.\\n\\t*/\\n\\tfunction totalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4f3061b0e883d9105a5ba012c092ed76b8bd8d7866274e084028df9a7d65d70e\",\"license\":\"MIT\"},\"@exoda/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n* @notice Provides information about the current execution context, including the\\n* sender of the transaction and its data. While these are generally available\\n* via msg.sender and msg.data, they should not be accessed in such a direct\\n* manner, since when dealing with meta-transactions the account sending and\\n* paying for execution may not be the actual sender (as far as an application\\n* is concerned).\\n*\\n* This contract is only required for intermediate, library-like contracts.\\n*/\\nabstract contract Context\\n{\\n\\t/// @notice returns the sender of the transaction.\\n\\t/// @return The sender of the transaction.\\n\\tfunction _msgSender() internal view virtual returns (address)\\n\\t{\\n\\t\\treturn msg.sender;\\n\\t}\\n\\n\\t/// @notice returns the data of the transaction.\\n\\t/// @return The data of the transaction.\\n\\tfunction _msgData() internal view virtual returns (bytes calldata)\\n\\t{\\n\\t\\treturn msg.data;\\n\\t}\\n}\\n\",\"keccak256\":\"0xce68a1ae85d9c12dba94f20a2af4f1eeeb187c4631e663a7d8181bd5cbf39035\",\"license\":\"MIT\"},\"contracts/Bot/Arb.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@exoda/contracts/access/Ownable.sol\\\";\\nimport \\\"@exoda/contracts/interfaces/token/ERC20/IERC20.sol\\\";\\n\\nstruct MetaPath\\n{\\n\\taddress router;\\n\\taddress[] path;\\n}\\n\\ninterface IExofiCompatibleRouter\\n{\\n\\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens\\n\\t(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external;\\n\\tfunction getAmountsOut(uint256 amountIn, address[] memory path) external view returns (uint256[] memory amounts);\\n}\\n\\ninterface IArb is IOwnable\\n{\\n\\tfunction trade(MetaPath[] calldata metaPath, uint256 amount) external;\\n\\tfunction transferOtherERC20Token(IERC20 token, uint256 amount) external returns (bool);\\n\\tfunction getAmountOutMin(MetaPath[] calldata metaPath, uint256 amount) external view returns(uint256);\\n}\\n\\ncontract Arb is IArb, Ownable\\n{\\n\\tfunction trade(MetaPath[] calldata metaPath, uint256 amount) override external onlyOwner\\n\\t{\\n\\t\\tuint256 startBalance = amount;\\n\\t\\tuint256 intermediateTokenBalance = amount;\\n\\t\\tfor(uint256 i = 0; i < metaPath.length; ++i)\\n\\t\\t{\\n\\t\\t\\tIERC20(metaPath[i].path[0]).approve(metaPath[i].router, intermediateTokenBalance);\\n\\t\\t\\tIExofiCompatibleRouter(metaPath[i].router).swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n\\t\\t\\t\\tintermediateTokenBalance,\\n\\t\\t\\t\\t1,\\n\\t\\t\\t\\tmetaPath[i].path,\\n\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\tblock.timestamp + 300 // solhint-disable-line not-rely-on-time\\n\\t\\t\\t);\\n\\t\\t\\tintermediateTokenBalance = IERC20(metaPath[i].path[metaPath[i].path.length - 1]).balanceOf(address(this));\\n\\t\\t}\\n\\t\\trequire(intermediateTokenBalance > startBalance, \\\"Trade Reverted, No Profit Made\\\");\\n\\t}\\n\\n\\tfunction transferOtherERC20Token(IERC20 token, uint256 amount) override external onlyOwner returns (bool)\\n\\t{\\n\\t\\treturn token.transfer(owner(), amount);\\n\\t}\\n\\n\\tfunction getAmountOutMin(MetaPath[] calldata metaPath, uint256 amount) override external view returns(uint256)\\n\\t{\\n\\t\\tuint256 amountOut = amount;\\n\\t\\tfor(uint256 i = 0; i < metaPath.length; ++i)\\n\\t\\t{\\n\\t\\t\\tuint256[] memory amountOutMins = IExofiCompatibleRouter(metaPath[i].router).getAmountsOut(amountOut, metaPath[i].path);\\n\\t\\t\\tamountOut = amountOutMins[metaPath[i].path.length - 1];\\n\\t\\t}\\n\\t\\treturn amountOut;\\n\\t}\\n}\",\"keccak256\":\"0xac3678ffea948ee9ede1615200b7e863f06343546b650ef37a44c917104a641e\",\"license\":\"MIT\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 10,
            "contract": "contracts/Bot/Arb.sol:Arb",
            "label": "_owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          }
        }
      },
      "userdoc": {
        "events": {
          "OwnershipTransferred(address,address)": {
            "notice": "Emitted when ownership is moved from one address to another."
          }
        },
        "kind": "user",
        "methods": {
          "owner()": {
            "notice": "Returns the current owner."
          },
          "renounceOwnership()": {
            "notice": "Leaves the contract without an owner. It will not be possible to call {onlyOwner} functions anymore. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner. Emits an [`OwnershipTransferred`](#ownershiptransferred) event indicating the renounced ownership. Requirements: - Can only be called by the current owner. "
          },
          "transferOwnership(address)": {
            "notice": "Transfers ownership of the contract to a new address. Emits an [`OwnershipTransferred`](#ownershiptransferred) event indicating the transfered ownership. Requirements: - Can only be called by the current owner."
          }
        },
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"contracts/Bot/Arb.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@exoda/contracts/access/Ownable.sol\\\";\\nimport \\\"@exoda/contracts/interfaces/token/ERC20/IERC20.sol\\\";\\n\\nstruct MetaPath\\n{\\n\\taddress router;\\n\\taddress[] path;\\n}\\n\\ninterface IExofiCompatibleRouter\\n{\\n\\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens\\n\\t(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external;\\n\\tfunction getAmountsOut(uint256 amountIn, address[] memory path) external view returns (uint256[] memory amounts);\\n}\\n\\ninterface IArb is IOwnable\\n{\\n\\tfunction trade(MetaPath[] calldata metaPath, uint256 amount) external;\\n\\tfunction transferOtherERC20Token(IERC20 token, uint256 amount) external returns (bool);\\n\\tfunction getAmountOutMin(MetaPath[] calldata metaPath, uint256 amount) external view returns(uint256);\\n}\\n\\ncontract Arb is IArb, Ownable\\n{\\n\\tfunction trade(MetaPath[] calldata metaPath, uint256 amount) override external onlyOwner\\n\\t{\\n\\t\\tuint256 startBalance = amount;\\n\\t\\tuint256 intermediateTokenBalance = amount;\\n\\t\\tfor(uint256 i = 0; i < metaPath.length; ++i)\\n\\t\\t{\\n\\t\\t\\tIERC20(metaPath[i].path[0]).approve(metaPath[i].router, intermediateTokenBalance);\\n\\t\\t\\tIExofiCompatibleRouter(metaPath[i].router).swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n\\t\\t\\t\\tintermediateTokenBalance,\\n\\t\\t\\t\\t1,\\n\\t\\t\\t\\tmetaPath[i].path,\\n\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\tblock.timestamp + 300 // solhint-disable-line not-rely-on-time\\n\\t\\t\\t);\\n\\t\\t\\tintermediateTokenBalance = IERC20(metaPath[i].path[metaPath[i].path.length - 1]).balanceOf(address(this));\\n\\t\\t}\\n\\t\\trequire(intermediateTokenBalance > startBalance, \\\"Trade Reverted, No Profit Made\\\");\\n\\t}\\n\\n\\tfunction transferOtherERC20Token(IERC20 token, uint256 amount) override external onlyOwner returns (bool)\\n\\t{\\n\\t\\treturn token.transfer(owner(), amount);\\n\\t}\\n\\n\\tfunction getAmountOutMin(MetaPath[] calldata metaPath, uint256 amount) override external view returns(uint256)\\n\\t{\\n\\t\\tuint256 amountOut = amount;\\n\\t\\tfor(uint256 i = 0; i < metaPath.length; ++i)\\n\\t\\t{\\n\\t\\t\\tuint256[] memory amountOutMins = IExofiCompatibleRouter(metaPath[i].router).getAmountsOut(amountOut, metaPath[i].path);\\n\\t\\t\\tamountOut = amountOutMins[metaPath[i].path.length - 1];\\n\\t\\t}\\n\\t\\treturn amountOut;\\n\\t}\\n}\"\n    },\n    \"@exoda/contracts/access/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/access/IOwnable.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @title Ownable contract module.\\n * @author Ing. Michael Goldfinger\\n * @notice Contract module which provides a basic access control mechanism, where\\n * there is an address (an owner) that can be granted exclusive access to specific functions.\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with the function {transferOwnership(address newOwner)}\\\".\\n * @dev This module is used through inheritance. It will make available the modifier\\n * {onlyOwner}, which can be applied to your functions to restrict their use to the owner.\\n */\\ncontract Ownable is IOwnable, Context\\n{\\n\\taddress private _owner;\\n\\n\\t/**\\n\\t* @notice Throws if called by any account other than the owner.\\n\\t*/\\n\\tmodifier onlyOwner()\\n\\t{\\n\\t\\trequire(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Initializes the contract setting the deployer as the initial owner.\\n\\t* \\n\\t* Emits an {OwnershipTransferred} event indicating the initially set ownership.\\n\\t*/\\n\\tconstructor()\\n\\t{\\n\\t\\t_transferOwnership(_msgSender());\\n\\t}\\n\\n\\t/// @inheritdoc IOwnable\\n\\tfunction renounceOwnership() override public virtual onlyOwner \\n\\t{\\n\\t\\t_transferOwnership(address(0));\\n\\t}\\n\\n\\t/// @inheritdoc IOwnable\\n\\tfunction transferOwnership(address newOwner) override public virtual onlyOwner\\n\\t{\\n\\t\\trequire(newOwner != address(0), \\\"Ownable: new owner is address(0)\\\");\\n\\t\\t_transferOwnership(newOwner);\\n\\t}\\n\\n\\t/// @inheritdoc IOwnable\\n\\tfunction owner() public view virtual override returns (address)\\n\\t{\\n\\t\\treturn _owner;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Transfers ownership of the contract to a new address.\\n\\t* Internal function without access restriction.\\n\\t* \\n\\t* Emits an {OwnershipTransferred} event indicating the transfered ownership.\\n\\t*/\\n\\tfunction _transferOwnership(address newOwner) internal virtual\\n\\t{\\n\\t\\taddress oldOwner = _owner;\\n\\t\\t_owner = newOwner;\\n\\t\\temit OwnershipTransferred(oldOwner, newOwner);\\n\\t}\\n}\\n\"\n    },\n    \"@exoda/contracts/interfaces/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC20 interface.\\n * @author Ing. Michael Goldfinger\\n * @notice Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20\\n{\\n\\t/**\\n\\t * @notice Emitted when the allowance of a {spender} for an {owner} is set to a new value.\\n\\t *\\n\\t * NOTE: {value} may be zero.\\n\\t * @param owner (indexed) The owner of the tokens.\\n\\t * @param spender (indexed) The spender for the tokens.\\n\\t * @param value The amount of tokens that got an allowance.\\n\\t */\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n\\t/**\\n\\t * @notice Emitted when {value} tokens are moved from one address {from} to another {to}.\\n\\t *\\n\\t * NOTE: {value} may be zero.\\n\\t * @param from (indexed) The origin of the transfer.\\n\\t * @param to (indexed) The target of the transfer.\\n\\t * @param value The amount of tokens that got transfered.\\n\\t */\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\t/**\\n\\t* @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n\\t*\\n\\t* Returns a boolean value indicating whether the operation succeeded.\\n\\t*\\n\\t* IMPORTANT: Beware that changing an allowance with this method brings the risk\\n\\t* that someone may use both the old and the new allowance by unfortunate\\n\\t* transaction ordering. One possible solution to mitigate this race\\n\\t* condition is to first reduce the spender's allowance to 0 and set the\\n\\t* desired value afterwards:\\n\\t* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\t*\\n\\t* Emits an {Approval} event.\\n\\t*/\\n\\tfunction approve(address spender, uint256 amount) external returns (bool);\\n\\n\\t/**\\n\\t* @dev Moves `amount` tokens from the caller's account to `to`.\\n\\t*\\n\\t* Returns a boolean value indicating whether the operation succeeded.\\n\\t*\\n\\t* Emits a {Transfer} event.\\n\\t*/\\n\\tfunction transfer(address to, uint256 amount) external returns (bool);\\n\\n\\t/**\\n\\t* @dev Moves `amount` tokens from `from` to `to` using the allowance mechanism.\\n\\t* `amount` is then deducted from the caller's allowance.\\n\\t*\\n\\t* Returns a boolean value indicating whether the operation succeeded.\\n\\t*\\n\\t* Emits a {Transfer} event.\\n\\t*/\\n\\tfunction transferFrom(address from, address to, uint256 amount) external returns (bool);\\n\\n\\t/**\\n\\t* @dev Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}.\\n\\t* This is zero by default.\\n\\t*\\n\\t* This value changes when {approve}, {increaseAllowance}, {decreseAllowance} or {transferFrom} are called.\\n\\t*/\\n\\tfunction allowance(address owner, address spender) external view returns (uint256);\\n\\n\\t/**\\n\\t* @dev Returns the amount of tokens owned by `account`.\\n\\t*/\\n\\tfunction balanceOf(address account) external view returns (uint256);\\n\\n\\t/**\\n\\t* @dev Returns the amount of tokens in existence.\\n\\t*/\\n\\tfunction totalSupply() external view returns (uint256);\\n}\\n\"\n    },\n    \"@exoda/contracts/interfaces/access/IOwnable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Ownable interface.\\n/// @author Ing. Michael Goldfinger\\n/// @notice This interface contains all visible functions and events for the Ownable contract module.\\ninterface IOwnable\\n{\\n\\t/// @notice Emitted when ownership is moved from one address to another.\\n\\t/// @param previousOwner (indexed) The owner of the contract until now.\\n\\t/// @param newOwner (indexed) The new owner of the contract.\\n\\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\t/**\\n\\t * @notice Leaves the contract without an owner. It will not be possible to call {onlyOwner} functions anymore.\\n\\t *\\n\\t * NOTE: Renouncing ownership will leave the contract without an owner,\\n\\t * thereby removing any functionality that is only available to the owner.\\n\\t *\\n\\t * Emits an [`OwnershipTransferred`](#ownershiptransferred) event indicating the renounced ownership.\\n\\t *\\n\\t * Requirements:\\n\\t * - Can only be called by the current owner.\\n\\t * \\n\\t * @dev Sets the zero address as the new contract owner.\\n\\t */\\n\\tfunction renounceOwnership() external;\\n\\n\\t/**\\n\\t * @notice Transfers ownership of the contract to a new address.\\n\\t *\\n\\t * Emits an [`OwnershipTransferred`](#ownershiptransferred) event indicating the transfered ownership.\\n\\t *\\n\\t * Requirements:\\n\\t * - Can only be called by the current owner.\\n\\t *\\n\\t * @param newOwner The new owner of the contract.\\n\\t */\\n\\tfunction transferOwnership(address newOwner) external;\\n\\n\\t/// @notice Returns the current owner.\\n\\t/// @return The current owner.\\n\\tfunction owner() external view returns (address);\\n}\"\n    },\n    \"@exoda/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n* @notice Provides information about the current execution context, including the\\n* sender of the transaction and its data. While these are generally available\\n* via msg.sender and msg.data, they should not be accessed in such a direct\\n* manner, since when dealing with meta-transactions the account sending and\\n* paying for execution may not be the actual sender (as far as an application\\n* is concerned).\\n*\\n* This contract is only required for intermediate, library-like contracts.\\n*/\\nabstract contract Context\\n{\\n\\t/// @notice returns the sender of the transaction.\\n\\t/// @return The sender of the transaction.\\n\\tfunction _msgSender() internal view virtual returns (address)\\n\\t{\\n\\t\\treturn msg.sender;\\n\\t}\\n\\n\\t/// @notice returns the data of the transaction.\\n\\t/// @return The data of the transaction.\\n\\tfunction _msgData() internal view virtual returns (bytes calldata)\\n\\t{\\n\\t\\treturn msg.data;\\n\\t}\\n}\\n\"\n    },\n    \"contracts/test/WETH9.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@exoda/contracts/interfaces/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH9\\n{\\n  function deposit() external payable;\\n  function withdraw(uint wad) external;\\n}\\n\\ncontract WETH9 is IERC20, IWETH9 {\\n    string public name     = \\\"Wrapped Ether\\\";\\n    string public symbol   = \\\"WETH\\\";\\n    uint8  public decimals = 18;\\n\\n    mapping (address => uint)                       public  balanceOf;\\n    mapping (address => mapping (address => uint))  public  allowance;\\n\\n    event  Deposit(address indexed dst, uint wad);\\n    event  Withdrawal(address indexed src, uint wad);\\n\\n    // Fallback disabled for test purposes.\\n    // function() public payable {\\n    //     deposit();\\n    // }\\n\\n    function deposit() override public payable {\\n        balanceOf[msg.sender] += msg.value;\\n        emit Deposit(msg.sender, msg.value);\\n    }\\n    function withdraw(uint wad) override public {\\n        require(balanceOf[msg.sender] >= wad, \\\"\\\");\\n        balanceOf[msg.sender] -= wad;\\n        payable(msg.sender).transfer(wad);\\n        emit Withdrawal(msg.sender, wad);\\n    }\\n\\n    function approve(address guy, uint wad) override public returns (bool) {\\n        allowance[msg.sender][guy] = wad;\\n        emit Approval(msg.sender, guy, wad);\\n        return true;\\n    }\\n\\n    function transfer(address dst, uint wad) override public returns (bool) {\\n        return transferFrom(msg.sender, dst, wad);\\n    }\\n\\n    function transferFrom(address src, address dst, uint wad)\\n        override\\n        public\\n        returns (bool)\\n    {\\n        require(balanceOf[src] >= wad, \\\"\\\");\\n\\n        if (src != msg.sender && allowance[src][msg.sender] != type(uint256).max) {\\n            require(allowance[src][msg.sender] >= wad, \\\"\\\");\\n            allowance[src][msg.sender] -= wad;\\n        }\\n\\n        balanceOf[src] -= wad;\\n        balanceOf[dst] += wad;\\n\\n        emit Transfer(src, dst, wad);\\n\\n        return true;\\n    }\\n\\n    function totalSupply() override public view returns (uint) {\\n        return address(this).balance;\\n    }\\n}\"\n    },\n    \"contracts/MagneticFieldGenerator.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@exoda/contracts/access/Ownable.sol\\\";\\nimport \\\"@exoda/contracts/interfaces/token/ERC20/IERC20.sol\\\";\\nimport \\\"@exoda/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IMagneticFieldGenerator.sol\\\";\\nimport \\\"./interfaces/IPlanet.sol\\\";\\n\\n// MagneticFieldGenerator is the master of Fermion. He can make Fermion and he is a fair machine.\\ncontract MagneticFieldGenerator is IMagneticFieldGenerator, Ownable\\n{\\n\\tusing SafeERC20 for IERC20;\\n\\t\\n\\t// Accumulated Fermion Precision\\n\\tuint256 private constant _ACC_FERMION_PRECISSION = 1e12;\\n\\t// The block number when FMN mining starts.\\n\\tuint256 private immutable _startBlock;\\n\\t// FMN tokens created per block.\\n\\tuint256 private _fermionPerBlock;\\n\\t// Total allocation points. Must be the sum of all allocation points in all pools.\\n\\tuint256 private _totalAllocPoint; // Initializes with 0\\n\\t// The FMN TOKEN!\\n\\tIFermion private immutable _fermion;\\n\\t// The migrator contract. It has a lot of power. Can only be set through governance (owner).\\n\\tIMigratorDevice private _migrator;\\n\\t// The migrator contract. It has a lot of power. Can only be set through governance (owner).\\n\\tIMagneticFieldGenerator private _successor;\\n\\tIMagneticFieldGeneratorStore private _store;\\n\\tIPlanet private immutable _planet;\\n\\n\\tconstructor(IFermion fermion, IPlanet planet, uint256 fermionPerBlock, uint256 startBlock)\\n\\t{\\n\\t\\t_fermion = fermion;\\n\\t\\t_fermionPerBlock = fermionPerBlock;\\n\\t\\t_startBlock = startBlock;\\n\\t\\t_planet = planet;\\n\\t\\trequire(_fermion == _planet.token(), \\\"MFG: Wrong Planet\\\");\\n\\t}\\n\\n\\tfunction setStore(IMagneticFieldGeneratorStore storeContract) override external onlyOwner\\n\\t{\\n\\t\\t_store = storeContract;\\n\\t}\\n\\n\\t/// @inheritdoc IMagneticFieldGenerator\\n\\tfunction add(uint256 allocPoint, IERC20 lpToken, uint256 lockPeriod) override public onlyOwner\\n\\t{\\n\\t\\t// Do every time.\\n\\t\\t// If a pool prevents massUpdatePools because of accFermionPerShare overflow disable the responsible pool with disablePool.\\n\\t\\tmassUpdatePools();\\n\\t\\tuint256 lastRewardBlock = block.number > _startBlock ? block.number : _startBlock;\\n\\t\\t_totalAllocPoint = _totalAllocPoint + allocPoint;\\n\\t\\tif(lpToken == _fermion)\\n\\t\\t{\\n\\t\\t\\tlpToken = _planet;\\n\\t\\t\\t// Approve Planet to transfer fermion tokens.\\n\\t\\t\\t_fermion.approve(address(_planet), type(uint256).max);\\n\\t\\t}\\n\\t\\t_store.newPoolInfo(\\n\\t\\t\\tPoolInfo({\\n\\t\\t\\t\\tlpToken: lpToken,\\n\\t\\t\\t\\tallocPoint: allocPoint,\\n\\t\\t\\t\\tlastRewardBlock: lastRewardBlock,\\n\\t\\t\\t\\taccFermionPerShare: 0,\\n\\t\\t\\t\\tinitialLock: lockPeriod > 0 ? lastRewardBlock + lockPeriod : 0\\n\\t\\t\\t})\\n\\t\\t);\\n\\t\\t\\n\\t\\temit LogPoolAddition(_unsafeSub(_store.getPoolLength(), 1), allocPoint, lpToken); // Overflow not possible.\\n\\t}\\n\\n\\t// Deposit LP tokens to MagneticFieldGenerator for FMN allocation.\\n\\tfunction deposit(uint256 pid, uint256 amount, address to) override public\\n\\t{\\n\\t\\tPoolInfo memory pool = updatePool(pid);\\n\\t\\tUserInfo memory user = _store.getUserInfo(pid, to);\\n\\n\\t\\tuser.amount = user.amount + amount;\\n\\t\\tuser.rewardDebt += int256(((amount * pool.accFermionPerShare) / _ACC_FERMION_PRECISSION));\\n\\t\\t_store.updateUserInfo(pid, to, user); // Save changes\\n\\n\\t\\t\\n\\t\\t// If the deposit token is Fermion exchange the correct amount with PlanetFermion Tokens.\\n\\t\\tif(pool.lpToken == _planet)\\n\\t\\t{\\n\\t\\t\\t// Grab the Fermions\\n\\t\\t\\tSafeERC20.safeTransferFrom(_fermion, address(_msgSender()), address(this), amount);\\n\\t\\t\\t// Exchange the Fermions and send PlanetTokens to MFG.\\n\\t\\t\\t_planet.enter(amount, address(this));\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tSafeERC20.safeTransferFrom(pool.lpToken, address(_msgSender()), address(this), amount);\\n\\t\\t}\\n\\t\\temit Deposit(_msgSender(), pid, amount, to);\\n\\t}\\n\\n\\t// Update the given pool's FMN allocation point to 0. Can only be called by the owner.\\n\\t// This is necessary if a pool reaches a accFermionPerShare overflow.\\n\\tfunction disablePool(uint256 pid) public override onlyOwner\\n\\t{\\n\\t\\t// Underflow is impossible since _totalAllocPoint can not be lower that _poolInfo[pid].allocPoint.\\n\\t\\tPoolInfo memory pi = _store.getPoolInfo(pid);\\n\\t\\t_totalAllocPoint = _unsafeSub(_totalAllocPoint, pi.allocPoint);\\n\\t\\tpi.allocPoint = 0;\\n\\t\\t_store.updatePoolInfo(pid, pi);\\n\\t}\\n\\n\\t// Withdraw without careing about rewards. EMERGENCY ONLY.\\n\\tfunction emergencyWithdraw(uint256 pid, address to) public override\\n\\t{\\n\\t\\tPoolInfo memory pool = _store.getPoolInfo(pid);\\n\\t\\trequire(pool.initialLock < block.number, \\\"MFG: pool locked\\\");\\n\\t\\tUserInfo memory user = _store.getUserInfo(pid,_msgSender());\\n\\n\\t\\tuint256 userAmount = user.amount;\\n\\n\\t\\tif(pool.lpToken == _planet)\\n\\t\\t{\\n\\t\\t\\t//Special Handling Fermion Pool\\n\\t\\t\\t_planet.leave(userAmount, address(this));\\n\\t\\t\\tSafeERC20.safeTransfer(_fermion, to, userAmount);\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tpool.lpToken.safeTransfer(to, userAmount);\\n\\t\\t}\\n\\t\\temit EmergencyWithdraw(_msgSender(), pid, userAmount, to);\\n\\t\\tuser.amount = 0;\\n\\t\\tuser.rewardDebt = 0;\\n\\t\\t_store.updateUserInfo(pid, _msgSender(), user);\\n\\t}\\n\\n\\tfunction handOverToSuccessor(IMagneticFieldGenerator suc) override public onlyOwner\\n\\t{\\n\\t\\t//TODO: DO ALL participants\\n\\t\\trequire(address(_successor) == address(0), \\\"MFG: Successor already set\\\");\\n\\t\\trequire(suc.owner() == address(this), \\\"MFG: Successor not owned by this\\\");\\n\\t\\t_successor = suc;\\n\\t\\t_fermion.transferOwnership(address(suc));\\n\\t\\t_fermion.transfer(address(suc), _fermion.balanceOf(address(this)));\\n\\t\\t// Hand over all pools no need for user interaction\\n\\t\\tmassUpdatePools();\\n\\t\\t_store.transferOwnership(address(suc));\\n\\t\\t_successor.setStore(_store);\\n\\t\\t// Hand over Planet\\n\\t\\t_planet.transferOwnership(address(suc));\\n\\n\\t\\tsuc.transferOwnership(owner());\\n\\t}\\n\\n\\t// Update reward variables for all pools. Be careful of gas spending!\\n\\tfunction massUpdatePools() public override\\n\\t{\\n\\t\\t// Overflow of pid not possible and need not to be checked.\\n\\t\\tunchecked\\n\\t\\t{\\n\\t\\t\\tuint256 length = _store.getPoolLength();\\n\\t\\t\\tfor (uint256 pid = 0; pid < length; ++pid)\\n\\t\\t\\t{\\n\\t\\t\\t\\tupdatePool(pid);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t// Migrate lp token to another lp contract. Can be called by anyone. We trust that migrator contract is good.\\n\\tfunction migrate(uint256 pid) override public onlyOwner\\n\\t{\\n\\t\\trequire(address(_migrator) != address(0), \\\"migrate: no migrator\\\");\\n\\t\\tPoolInfo memory pool = _store.getPoolInfo(pid);\\n\\t\\tIERC20 lpToken = pool.lpToken;\\n\\t\\tuint256 bal = lpToken.balanceOf(address(this));\\n\\t\\tlpToken.safeApprove(address(_migrator), bal);\\n\\t\\tIERC20 newLpToken = IERC20(_migrator.migrate(lpToken));\\n\\t\\trequire(bal == newLpToken.balanceOf(address(this)), \\\"migrate: bad\\\");\\n\\t\\tpool.lpToken = newLpToken;\\n\\t\\t_store.updatePoolInfo(pid, pool);\\n\\t\\temit Migrate(pid, bal, lpToken, newLpToken);\\n\\t}\\n\\n\\t/// @notice Leaves the contract without owner. Can only be called by the current owner.\\n\\tfunction renounceOwnership() public override(Ownable, IMagneticFieldGenerator)\\n\\t{\\n\\t\\tOwnable.renounceOwnership();\\n\\t}\\n\\n\\t// Update the given pool's FMN allocation point. Can only be called by the owner.\\n\\tfunction set(uint256 pid, uint256 allocPoint) override public onlyOwner\\n\\t{\\n\\t\\t// Do every time.\\n\\t\\t// If a pool prevents massUpdatePools because of accFermionPerShare overflow disable the responsible pool with disablePool.\\n\\t\\tmassUpdatePools();\\n\\t\\tPoolInfo memory pi = _store.getPoolInfo(pid);\\n\\t\\t// Underflow is impossible since _totalAllocPoint can not be lower that _poolInfo[pid].allocPoint.\\n\\t\\t_totalAllocPoint = _unsafeSub(_totalAllocPoint, pi.allocPoint) + allocPoint;\\n\\t\\tpi.allocPoint = allocPoint;\\n\\t\\t_store.updatePoolInfo(pid, pi);\\n\\t\\temit LogSetPool(pid, allocPoint);\\n\\t}\\n\\n\\tfunction setFermionPerBlock(uint256 fermionPerBlock) override public onlyOwner\\n\\t{\\n\\t\\tmassUpdatePools();\\n\\t\\t_fermionPerBlock = fermionPerBlock;\\n\\t}\\n\\n\\t// Set the migrator contract. Can only be called by the owner.\\n\\tfunction setMigrator(IMigratorDevice migratorContract) override public onlyOwner\\n\\t{\\n\\t\\t_migrator = migratorContract;\\n\\t}\\n\\n\\t/// @notice Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\\n\\tfunction transferOwnership(address newOwner) public override(Ownable, IMagneticFieldGenerator)\\n\\t{\\n\\t\\tOwnable.transferOwnership(newOwner);\\n\\t}\\n\\n\\t// Update reward variables of the given pool to be up-to-date.\\n\\tfunction updatePool(uint256 pid) override public returns(PoolInfo memory)\\n\\t{\\n\\t\\tPoolInfo memory pool = _store.getPoolInfo(pid);\\n\\n\\t\\tif (block.number <= pool.lastRewardBlock)\\n\\t\\t{\\n\\t\\t\\treturn pool;\\n\\t\\t}\\n\\n\\t\\tuint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n\\n\\t\\tif (lpSupply == 0)\\n\\t\\t{\\n\\t\\t\\tpool.lastRewardBlock = block.number;\\n\\t\\t\\t_store.updatePoolInfo(pid, pool);\\n\\t\\t\\treturn pool;\\n\\t\\t}\\n\\n\\t\\tuint256 fermionReward = _getFermionReward(_getMultiplier(pool.lastRewardBlock, block.number), pool.allocPoint);\\n\\t\\tpool.accFermionPerShare = _getAccFermionPerShare(pool.accFermionPerShare, fermionReward, lpSupply);\\n\\t\\t_fermion.mint(address(this), fermionReward);\\n\\t\\tpool.lastRewardBlock = block.number;\\n\\t\\t_store.updatePoolInfo(pid, pool);\\n\\t\\temit LogUpdatePool(pid, pool.lastRewardBlock, lpSupply, pool.accFermionPerShare);\\n\\t\\treturn pool;\\n\\t}\\n\\n\\t// Harvests only Fermion tokens.\\n\\tfunction harvest(uint256 pid, address to) override public\\n\\t{\\n\\t\\t// HINT: pool.accFermionPerShare can only grow till it overflows, at that point every withdraw will fail.\\n\\t\\t// HINT: The owner can set pool allocPoint to 0 without pool reward update. After that all lp tokens can be withdrawn\\n\\t\\t// HINT: including the rewards up to the the last sucessful pool reward update.\\n\\t\\tPoolInfo memory pool = updatePool(pid);\\n\\t\\tUserInfo memory user = _store.getUserInfo(pid, _msgSender());\\n\\t\\t\\n\\t\\t// Division of uint can not overflow.\\n\\t\\tuint256 fermionShare = _unsafeDiv((user.amount *  pool.accFermionPerShare), _ACC_FERMION_PRECISSION);\\n\\t\\tuint256 pending = uint256(int256(fermionShare) - user.rewardDebt);\\n\\t\\tuser.rewardDebt = int256(fermionShare);\\n\\n\\t\\t_store.updateUserInfo(pid, _msgSender(), user);\\n\\t\\t// THOUGHTS on a previous Fermion balance check at this point\\n\\t\\t// The intend was that if there was a rounding error and MFG does therefore not hold enouth Fermion \\n\\t\\t// the available amount of Fermion will be used.\\n\\t\\t// BUT since all variables are used in divisions are uint especially accFermionPerShare.\\n\\t\\t// Rounding errors can only appear in the form of cut of decimals.\\n\\t\\t// A calculated fermionShare can therefor only be equal or smaller than the real value (with unlimited precision)\\n\\t\\t// Therefore there should always be enough Fermion.\\n\\t\\t_fermion.transfer(to, pending);\\n\\t\\temit Harvest(_msgSender(), pid, pending, to);\\n\\t}\\n\\n\\t// Withdraw LP tokens from MagneticFieldGenerator.\\n\\tfunction withdraw(uint256 pid, uint256 amount, address to) override public\\n\\t{\\n\\t\\t// HINT: pool.accFermionPerShare can only grow till it overflows, at that point every withdraw will fail.\\n\\t\\t// HINT: The owner can set pool allocPoint to 0 without pool reward update. After that all lp tokens can be withdrawn\\n\\t\\t// HINT: including the rewards up to the the last sucessful pool reward update.\\n\\t\\tPoolInfo memory pool = updatePool(pid);\\n\\t\\trequire(pool.initialLock < block.number, \\\"MFG: pool locked\\\");\\n\\t\\tUserInfo memory user =  _store.getUserInfo(pid, _msgSender());\\n\\t\\t\\n\\t\\tuint256 userAmount = user.amount;\\n\\t\\trequire(userAmount >= amount, \\\"MFG: amount exeeds stored amount\\\");\\n\\n\\t\\tuint256 accFermionPerShare = pool.accFermionPerShare;\\n\\t\\t// Since we only withdraw rewardDept will be negative.\\n\\t\\tuser.rewardDebt = user.rewardDebt - int256(_unsafeDiv(amount * accFermionPerShare, _ACC_FERMION_PRECISSION));\\n\\t\\t\\n\\t\\t// Can not overflow. Checked with require.\\n\\t\\tuserAmount = _unsafeSub(userAmount, amount);\\n\\t\\tuser.amount = userAmount;\\n\\t\\t_store.updateUserInfo(pid, _msgSender(), user);\\n\\t\\tif(pool.lpToken == _planet)\\n\\t\\t{\\n\\t\\t\\t//Special Handling Fermion Pool\\n\\t\\t\\t_planet.leave(amount, address(this));\\n\\t\\t\\tSafeERC20.safeTransfer(_fermion, to, amount);\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tpool.lpToken.safeTransfer(to, amount);\\n\\t\\t}\\n\\t\\temit Withdraw(_msgSender(), pid, amount, to);\\n\\t}\\n\\n\\t// Withdraw LP tokens from MagneticFieldGenerator.\\n\\tfunction withdrawAndHarvest(uint256 pid, uint256 amount, address to) override public\\n\\t{\\n\\t\\t// HINT: pool.accFermionPerShare can only grow till it overflows, at that point every withdraw will fail.\\n\\t\\t// HINT: The owner can set pool allocPoint to 0 without pool reward update. After that all lp tokens can be withdrawn\\n\\t\\t// HINT: including the rewards up to the the last sucessful pool reward update.\\n\\t\\tPoolInfo memory pool = updatePool(pid);\\n\\t\\trequire(pool.initialLock < block.number, \\\"MFG: pool locked\\\");\\n\\t\\tUserInfo memory user = _store.getUserInfo(pid, _msgSender());\\n\\t\\t\\n\\t\\tuint256 userAmount = user.amount;\\n\\t\\trequire(userAmount >= amount, \\\"MFG: amount exeeds stored amount\\\");\\n\\t\\t\\n\\t\\tuint256 accFermionPerShare = pool.accFermionPerShare;\\n\\n\\t\\t// Division of uint can not overflow.\\n\\t\\tuint256 pending = uint256(int256(_unsafeDiv((user.amount * accFermionPerShare), _ACC_FERMION_PRECISSION)) - user.rewardDebt);\\n\\t\\t// THOUGHTS on a previous Fermion balance check at this point\\n\\t\\t// The intend was that if there was a rounding error and MFG does therefore not hold enouth Fermion \\n\\t\\t// the available amount of Fermion will be used.\\n\\t\\t// BUT since all variables are used in divisions are uint especially accFermionPerShare.\\n\\t\\t// Rounding errors can only appear in the form of cut of decimals.\\n\\t\\t// A calculated fermionShare can therefor only be equal or smaller than the real value (with unlimited precision)\\n\\t\\t// Therefore there should always be enough Fermion.\\n\\t\\t_fermion.transfer(to, pending);\\n\\n\\t\\t// Can not overflow. Checked with require.\\n\\t\\tuserAmount = _unsafeSub(userAmount, amount);\\n\\t\\tuser.amount = userAmount;\\n\\t\\t// Division of uint can not overflow.\\n\\t\\tuser.rewardDebt = int256(_unsafeDiv(userAmount * accFermionPerShare, _ACC_FERMION_PRECISSION));\\n\\t\\t_store.updateUserInfo(pid, _msgSender(), user);\\n\\t\\tif(pool.lpToken == _planet)\\n\\t\\t{\\n\\t\\t\\t//Special Handling Fermion Pool\\n\\t\\t\\t_planet.leave(amount, address(this));\\n\\t\\t\\tSafeERC20.safeTransfer(_fermion, to, amount);\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tpool.lpToken.safeTransfer(to, amount);\\n\\t\\t}\\n\\t\\temit Withdraw(_msgSender(), pid, amount, to);\\n\\t\\temit Harvest(_msgSender(), pid, pending, to);\\n\\t}\\n\\n\\tfunction getFermionContract() public override view returns (IFermion)\\n\\t{\\n\\t\\treturn _fermion;\\n\\t}\\n\\n\\tfunction getFermionPerBlock() public override view returns (uint256)\\n\\t{\\n\\t\\treturn _fermionPerBlock;\\n\\t}\\n\\n\\tfunction getStartBlock() public override view returns (uint256)\\n\\t{\\n\\t\\treturn _startBlock;\\n\\t}\\n\\n\\t/// @notice Returns the current migrator.\\n\\tfunction migrator() override public view returns(IMigratorDevice)\\n\\t{\\n\\t\\treturn _migrator;\\n\\t}\\n\\n\\t/// @notice Returns the address of the current owner.\\n\\tfunction owner() public view override(Ownable, IMagneticFieldGenerator) returns (address)\\n\\t{\\n\\t\\treturn Ownable.owner();\\n\\t}\\n\\n\\t// View function to see pending FMNs on frontend.\\n\\tfunction pendingFermion(uint256 pid, address user) public view override returns (uint256)\\n\\t{\\n\\t\\tPoolInfo memory pool = _store.getPoolInfo(pid);\\n\\t\\tUserInfo memory singleUserInfo = _store.getUserInfo(pid, user);\\n\\t\\tuint256 accFermionPerShare = pool.accFermionPerShare;\\n\\t\\tuint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n\\t\\tif (block.number > pool.lastRewardBlock && lpSupply != 0)\\n\\t\\t{\\n\\t\\t\\taccFermionPerShare = _getAccFermionPerShare(\\n\\t\\t\\t\\taccFermionPerShare,\\n\\t\\t\\t\\t_getFermionReward(_getMultiplier(pool.lastRewardBlock, block.number), pool.allocPoint)\\n\\t\\t\\t\\t, lpSupply);\\n\\t\\t}\\n\\t\\treturn uint256(int256(_unsafeDiv((singleUserInfo.amount * accFermionPerShare), _ACC_FERMION_PRECISSION)) - singleUserInfo.rewardDebt);\\n\\t}\\n\\n\\tfunction poolInfo(uint256 pid) override public view returns (PoolInfo memory)\\n\\t{\\n\\t\\treturn _store.getPoolInfo(pid);\\n\\t}\\n\\n\\tfunction poolLength() override public view returns (uint256)\\n\\t{\\n\\t\\treturn _store.getPoolLength();\\n\\t}\\n\\n\\t/// @notice Returns the address of the sucessor.\\n\\tfunction successor() override public view returns (IMagneticFieldGenerator)\\n\\t{\\n\\t\\treturn _successor;\\n\\t}\\n\\n\\tfunction totalAllocPoint() override public view returns (uint256)\\n\\t{\\n\\t\\treturn _totalAllocPoint;\\n\\t}\\n\\n\\tfunction userInfo(uint256 pid, address user) override public view returns (UserInfo memory)\\n\\t{\\n\\t\\treturn _store.getUserInfo(pid, user);\\n\\t}\\n\\n\\tfunction _getFermionReward(uint256 multiplier, uint256 allocPoint) private view returns (uint256)\\n\\t{\\n\\t\\t// As long as the owner chooses sane values for _fermionPerBlock and pool.allocPoint it is unlikely that an overflow ever happens\\n\\t\\t// Since _fermionPerBlock and pool.allocPoint are choosen by  the owner, it is the responsibility of the owner to ensure\\n\\t\\t// that there is now overflow in multiplying these to values.\\n\\t\\t// Divions can not generate an overflow if used with uint values. Div by 0 will always panic, wrapped or not.\\n\\t\\t// The only place an overflow can happen (even very unlikeley) is if the multiplier gets big enouth to force an overflow.\\n\\t\\treturn _unsafeDiv(multiplier * _unsafeMul(_fermionPerBlock, allocPoint), _totalAllocPoint);\\n\\t}\\n\\n\\tfunction _getAccFermionPerShare(uint256 currentAccFermionShare, uint256 fermionReward, uint256 lpSupply) private pure returns (uint256)\\n\\t{\\n\\t\\t// Divions can not generate an overflow if used with uint values. Div by 0 will always panic, wrapped or not.\\n\\n\\t\\t// Check for overflow for automatic pool deactivation.\\n\\t\\treturn currentAccFermionShare + _unsafeDiv(fermionReward * _ACC_FERMION_PRECISSION, lpSupply); \\n\\t}\\n\\n\\t// Return reward multiplier over the given _from to _to block.\\n\\tfunction _getMultiplier(uint256 from, uint256 to) private pure returns (uint256)\\n\\t{\\n\\t\\tunchecked\\n\\t\\t{\\n\\t\\t\\treturn to - from;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _unsafeDiv(uint256 a, uint256 b) private pure returns (uint256)\\n\\t{\\n\\t\\tunchecked\\n\\t\\t{\\n\\t\\t\\treturn a / b;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _unsafeMul(uint256 a, uint256 b) private pure returns (uint256)\\n\\t{\\n\\t\\tunchecked\\n\\t\\t{\\n\\t\\t\\treturn a * b;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _unsafeSub(uint256 a, uint256 b) private pure returns (uint256)\\n\\t{\\n\\t\\tunchecked\\n\\t\\t{\\n\\t\\t\\treturn a - b;\\n\\t\\t}\\n\\t}\\n}\\n\"\n    },\n    \"@exoda/contracts/token/ERC20/utils/SafeERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../interfaces/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20\\n{\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal\\n    {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal\\n    {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal\\n    {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \\\"SafeERC20: exploitable approve\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal\\n    {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal\\n    {\\n        unchecked\\n        {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: reduced allowance <0\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private\\n    {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0)\\n        {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 call failed\\\");\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/IMagneticFieldGenerator.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@exoda/contracts/interfaces/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IFermion.sol\\\";\\nimport \\\"./IMigratorDevice.sol\\\";\\nimport \\\"./IMagneticFieldGeneratorStore.sol\\\";\\n\\ninterface IMagneticFieldGenerator\\n{\\n\\tevent Deposit(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\\n\\tevent Harvest(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\\n\\tevent EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\\n\\tevent LogPoolAddition(uint256 indexed pid, uint256 allocPoint, IERC20 indexed lpToken);\\n\\tevent LogSetPool(uint256 indexed pid, uint256 allocPoint);\\n\\tevent LogUpdatePool(uint256 indexed pid, uint256 lastRewardBlock, uint256 lpSupply, uint256 accFermionPerShare);\\n\\tevent Migrate(uint256 indexed pid, uint256 balance, IERC20 indexed fromToken, IERC20 indexed toToken);\\n\\tevent Withdraw(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\\n\\n\\t/// @notice Add a new LP to the pool. Can only be called by the owner.\\n\\t/// WARNING DO NOT add the same LP token more than once. Rewards will be messed up if you do.\\n\\t/// @param allocPoint AP of the new pool.\\n\\t/// @param lpToken Address of the LP ERC-20 token.\\n\\t/// @param lockPeriod Number of Blocks the pool should disallow withdraws of all kind.\\n\\tfunction add(uint256 allocPoint, IERC20 lpToken, uint256 lockPeriod) external;\\n\\tfunction deposit(uint256 pid, uint256 amount, address to) external;\\n\\tfunction disablePool(uint256 pid) external;\\n\\tfunction emergencyWithdraw(uint256 pid, address to) external;\\n\\tfunction handOverToSuccessor(IMagneticFieldGenerator successor) external;\\n\\tfunction harvest(uint256 pid, address to) external;\\n\\tfunction massUpdatePools() external;\\n\\tfunction migrate(uint256 pid) external;\\n\\tfunction renounceOwnership() external;\\n\\tfunction set(uint256 pid, uint256 allocPoint) external;\\n\\tfunction setFermionPerBlock(uint256 fermionPerBlock) external;\\n\\tfunction setMigrator(IMigratorDevice migratorContract) external;\\n\\tfunction setStore(IMagneticFieldGeneratorStore storeContract) external;\\n\\tfunction transferOwnership(address newOwner) external;\\n\\tfunction updatePool(uint256 pid) external returns(PoolInfo memory);\\n\\tfunction withdraw(uint256 pid, uint256 amount, address to) external;\\n\\tfunction withdrawAndHarvest(uint256 pid, uint256 amount, address to) external;\\n\\n\\tfunction getFermionContract() external view returns (IFermion);\\n\\tfunction getFermionPerBlock() external view returns (uint256);\\n\\tfunction getStartBlock() external view returns (uint256);\\n\\tfunction migrator() external view returns(IMigratorDevice);\\n\\tfunction owner() external view returns (address);\\n\\tfunction pendingFermion(uint256 pid, address user) external view returns (uint256);\\n\\tfunction poolInfo(uint256 pid) external view returns (PoolInfo memory);\\n\\tfunction poolLength() external view returns (uint256);\\n\\tfunction successor() external view returns (IMagneticFieldGenerator);\\n\\tfunction totalAllocPoint() external view returns (uint256);\\n\\tfunction userInfo(uint256 pid, address user) external view returns (UserInfo memory);\\n}\"\n    },\n    \"contracts/interfaces/IPlanet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@exoda/contracts/interfaces/access/IOwnable.sol\\\";\\nimport \\\"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20AltApprove.sol\\\";\\n\\ninterface IPlanet is IOwnable, IERC20AltApprove, IERC20Metadata\\n{\\n\\tevent Enter(address indexed sender, uint256 amount, address indexed to);\\n\\tevent Leave(address indexed sender, uint256 amount, address indexed to);\\n\\n\\tfunction enter(uint256 amount, address to) external;\\n\\tfunction leave(uint256 amount, address to) external;\\n\\tfunction token() external view returns (IERC20Metadata);\\n}\"\n    },\n    \"@exoda/contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address\\n{\\n    /* solhint-disable max-line-length */\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n     /* solhint-enable max-line-length */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory)\\n    {\\n        return functionCallWithValue(target, data, 0, \\\"Address: call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory)\\n    {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory)\\n    {\\n        return functionCallWithValue(target, data, value, \\\"Address: call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory)\\n    {\\n        require(address(this).balance >= value, \\\"Address: balance to low for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) internal pure returns (bytes memory)\\n    {\\n        if (success)\\n        {\\n            return returndata;\\n        } else\\n        {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly\\n                {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            }\\n            else\\n            {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/IFermion.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@exoda/contracts/interfaces/access/IOwnable.sol\\\";\\nimport \\\"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20AltApprove.sol\\\";\\nimport \\\"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Burnable.sol\\\";\\nimport \\\"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the Fermion token.\\n */\\ninterface IFermion is IOwnable, IERC20AltApprove, IERC20Metadata, IERC20Burnable\\n{\\n\\t/**\\n\\t* @dev Mints `amount` tokens to `account`.\\n\\t*\\n\\t* Emits a {Transfer} event with `from` set to the zero address.\\n\\t*/\\n\\tfunction mint(address to, uint256 amount) external;\\n}\"\n    },\n    \"contracts/interfaces/IMigratorDevice.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@exoda/contracts/interfaces/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMigratorDevice\\n{\\n\\t// Perform LP token migration from legacy UniswapV2 to Exofi.\\n\\t// Take the current LP token address and return the new LP token address.\\n\\t// Migrator should have full access to the caller's LP token.\\n\\t// Return the new LP token address.\\n\\t//\\n\\t// XXX Migrator must have allowance access to UniswapV2 LP tokens.\\n\\t// Exofi must mint EXACTLY the same amount of ENERGY tokens or\\n\\t// else something bad will happen. Traditional UniswapV2 does not\\n\\t// do that so be careful!\\n\\tfunction migrate(IERC20 token) external returns (address);\\n\\n\\tfunction beneficiary() external view returns (address);\\n}\"\n    },\n    \"contracts/interfaces/IMagneticFieldGeneratorStore.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@exoda/contracts/interfaces/access/IOwnable.sol\\\";\\nimport \\\"../structs/PoolInfo.sol\\\";\\nimport \\\"../structs/UserInfo.sol\\\";\\n\\ninterface IMagneticFieldGeneratorStore is IOwnable\\n{\\n\\tfunction deletePoolInfo(uint256 pid) external;\\n\\tfunction newPoolInfo(PoolInfo memory pi) external;\\n\\tfunction updateUserInfo(uint256 pid, address user, UserInfo memory ui) external;\\n\\tfunction updatePoolInfo(uint256 pid, PoolInfo memory pi) external;\\n\\tfunction getPoolInfo(uint256 pid) external view returns (PoolInfo memory);\\n\\tfunction getPoolLength() external view returns (uint256);\\n\\tfunction getUserInfo(uint256 pid, address user) external view returns (UserInfo memory);\\n\\t\\n}\\n\"\n    },\n    \"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20AltApprove.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title ERC20Metadata interface.\\n/// @author Ing. Michael Goldfinger\\n/// @notice Interface for an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.\\n/// @dev This is not part of the ERC20 specification.\\ninterface IERC20AltApprove\\n{\\n\\t/**\\n\\t* @notice Atomically decreases the allowance granted to `spender` by the caller.\\n\\t*\\n\\t* This is an alternative to {approve} that can be used as a mitigation for\\n\\t* problems described in {IERC20-approve}.\\n\\t*\\n\\t* Emits an {Approval} event indicating the updated allowance.\\n\\t*\\n\\t* Requirements:\\n\\t*\\n\\t* - `spender` cannot be the zero address.\\n\\t* - `spender` must have allowance for the caller of at least\\n\\t* `subtractedValue`.\\n\\t*/\\n\\tfunction decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n\\t/**\\n\\t* @notice Atomically increases the allowance granted to `spender` by the caller.\\n\\t*\\n\\t* This is an alternative to {approve} that can be used as a mitigation for\\n\\t* problems described in {IERC20-approve}.\\n\\t*\\n\\t* Emits an {Approval} event indicating the updated allowance.\\n\\t*\\n\\t* Requirements:\\n\\t*\\n\\t* - `spender` cannot be the zero address.\\n\\t*/\\n\\tfunction increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n}\\n\"\n    },\n    \"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Burnable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @title ERC20Burnable interface.\\n * @author Ing. Michael Goldfinger\\n * @notice Interface for the extension of {ERC20} that allows token holders to destroy both their own tokens\\n * and those that they have an allowance for.\\n */\\ninterface IERC20Burnable is IERC20\\n{\\n\\t/**\\n\\t* @notice Destroys {amount} tokens from the caller.\\n\\t*\\n\\t* Emits an {Transfer} event.\\n\\t*\\n\\t* @param amount The {amount} of tokens that should be destroyed.\\n\\t*/\\n\\tfunction burn(uint256 amount) external;\\n\\n\\t/**\\n\\t* @notice Destroys {amount} tokens from {account}, deducting from the caller's allowance.\\n\\t*\\n\\t* Emits an {Approval} and an {Transfer} event.\\n\\t*\\n\\t* @param account The {account} where the tokens should be destroyed.\\n\\t* @param amount The {amount} of tokens that should be destroyed.\\n\\t*/\\n\\tfunction burnFrom(address account, uint256 amount) external;\\n}\"\n    },\n    \"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/// @title ERC20Metadata interface.\\n/// @author Ing. Michael Goldfinger\\n/// @notice Interface for the optional metadata functions from the ERC20 standard.\\ninterface IERC20Metadata is IERC20\\n{\\n\\t/// @notice Returns the name of the token.\\n\\t/// @return The token name.\\n\\tfunction name() external view returns (string memory);\\n\\n\\t/// @notice Returns the symbol of the token.\\n\\t/// @return The symbol for the token.\\n\\tfunction symbol() external view returns (string memory);\\n\\n\\t/// @notice Returns the decimals of the token.\\n\\t/// @return The decimals for the token.\\n\\tfunction decimals() external pure returns (uint8);\\n}\\n\"\n    },\n    \"contracts/structs/PoolInfo.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@exoda/contracts/interfaces/token/ERC20/IERC20.sol\\\";\\n\\n// Info of each pool.\\nstruct PoolInfo\\n{\\n\\tIERC20 lpToken; // Address of LP token contract.\\n\\tuint256 allocPoint; // How many allocation points assigned to this pool. FMNs to distribute per block.\\n\\tuint256 lastRewardBlock; // Last block number that FMNs distribution occurs.\\n\\tuint256 accFermionPerShare; // Accumulated FMNs per share, times _ACC_FERMION_PRECISSION. See below.\\n\\tuint256 initialLock; // Block until withdraw from the pool is not possible.\\n}\"\n    },\n    \"contracts/structs/UserInfo.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Info of each user.\\nstruct UserInfo\\n{\\n\\tuint256 amount; // How many LP tokens the user has provided.\\n\\tint256 rewardDebt; // Reward debt. See explanation below.\\n\\t//\\n\\t// We do some fancy math here. Basically, any point in time, the amount of FMNs\\n\\t// entitled to a user but is pending to be distributed is:\\n\\t//\\n\\t//   pending reward = (user.amount * pool.accFermionPerShare) - user.rewardDebt\\n\\t//\\n\\t// Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n\\t//   1. The pool's `accFermionPerShare` (and `lastRewardBlock`) gets updated.\\n\\t//   2. User receives the pending reward sent to his/her address.\\n\\t//   3. User's `amount` gets updated.\\n\\t//   4. User's `rewardDebt` gets updated.\\n}\"\n    },\n    \"contracts/MagneticFieldGeneratorStore.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@exoda/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IMagneticFieldGeneratorStore.sol\\\";\\n\\ncontract MagneticFieldGeneratorStore is IMagneticFieldGeneratorStore, Ownable\\n{\\n\\tmapping(uint256 => mapping(address => UserInfo)) private _userInfo;\\n\\tPoolInfo[] private _poolInfo;\\n\\n\\tfunction newPoolInfo(PoolInfo memory pi) override external onlyOwner\\n\\t{\\n\\t\\t_poolInfo.push(pi);\\n\\t}\\n\\n\\tfunction deletePoolInfo(uint256 pid) override external onlyOwner\\n\\t{\\n\\t\\trequire(_poolInfo[pid].allocPoint == 0, \\\"MFGS: Pool is active\\\");\\n\\t\\t_poolInfo[pid] = _poolInfo[_poolInfo.length - 1];\\n\\t\\t_poolInfo.pop();\\n\\t}\\n\\n\\tfunction updateUserInfo(uint256 pid, address user, UserInfo memory ui) override external onlyOwner\\n\\t{\\n\\t\\t_userInfo[pid][user] = ui;\\n\\t}\\n\\n\\tfunction updatePoolInfo(uint256 pid, PoolInfo memory pi) override external onlyOwner\\n\\t{\\n\\t\\t_poolInfo[pid] = pi;\\n\\t}\\n\\n\\n\\tfunction getPoolInfo(uint256 pid) override external view returns (PoolInfo memory)\\n\\t{\\n\\t\\treturn _poolInfo[pid];\\n\\t}\\n\\n\\tfunction getPoolLength() override external view returns (uint256)\\n\\t{\\n\\t\\treturn _poolInfo.length;\\n\\t}\\n\\n\\tfunction getUserInfo(uint256 pid, address user) override external view returns (UserInfo memory)\\n\\t{\\n\\t\\treturn _userInfo[pid][user];\\n\\t}\\n\\n\\t/// @notice Leaves the contract without owner. Can only be called by the current owner.\\n\\t/// This is a dangerous call be aware of the consequences\\n\\tfunction renounceOwnership() public override(IOwnable, Ownable)\\n\\t{\\n\\t\\tOwnable.renounceOwnership();\\n\\t}\\n\\n\\t/// @notice Returns the address of the current owner.\\n\\tfunction owner() public view override(IOwnable, Ownable) returns (address)\\n\\t{\\n\\t\\treturn Ownable.owner();\\n\\t}\\n}\\n\"\n    },\n    \"contracts/VortexLock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Burnable.sol\\\";\\nimport \\\"./interfaces/IVortexLock.sol\\\";\\nimport \\\"@exoda/contracts/access/Ownable.sol\\\";\\n\\ncontract VortexLock is IVortexLock, Ownable\\n{\\n\\tuint256 private immutable _startBlockPhase1;\\n\\tuint256 private immutable _startBlockPhase2;\\n\\tuint256 private immutable _startBlockPhase3;\\n\\tuint256 private immutable _startBlockPhase4;\\n\\tuint256 private immutable _endBlock;\\n\\tuint256 private immutable _finalBlock;\\n\\tuint256 private _benefitaryCount;\\n\\tuint256 private _amountPerBlockPhase1;\\n\\tuint256 private _amountPerBlockPhase2;\\n\\tuint256 private _amountPerBlockPhase3;\\n\\tuint256 private _amountPerBlockPhase4;\\n\\tuint256 private _cutOfAmount;\\n\\tmapping(address => uint256) private _lastClaimedBlock;\\n\\tmapping(address => uint256) private _alreadyClaimedAmount;\\n\\tIERC20Burnable private immutable _token;\\n\\n\\tconstructor(uint256 startBlock, uint256 endBlock, uint256 finalizingBlock, IERC20Burnable token) Ownable()\\n\\t{\\n\\t\\t// Split the start and end intervall into 4 parts.\\n\\t\\tunchecked\\n\\t\\t{\\n\\t\\t\\tuint256 part = (endBlock - startBlock) / 4;\\n\\t\\t\\t_startBlockPhase1 = startBlock;\\n\\t\\t\\t_startBlockPhase2 = startBlock + part;\\n\\t\\t\\t_startBlockPhase3 = startBlock + (part * 2);\\n\\t\\t\\t_startBlockPhase4 = startBlock + (part * 3);\\n\\t\\t}\\n\\t\\t_endBlock = endBlock;\\n\\t\\t_finalBlock = finalizingBlock;\\n\\t\\t_token = token;\\n\\t}\\n\\n\\tfunction loadToken(uint256 amount) override public onlyOwner\\n\\t{\\n\\t\\trequire(block.number < _startBlockPhase1, \\\"VortexLock: Can only set before start block\\\"); // solhint-disable-line reason-string\\n\\t\\tuint256 fraction = (amount * 16) / 15;\\n\\t\\tunchecked\\n\\t\\t{\\n\\t\\t\\tuint256 ph1Blocks = _startBlockPhase2 - _startBlockPhase1;\\n\\t\\t\\tuint256 amountPhase1 = fraction / 2;\\n\\t\\t\\t_amountPerBlockPhase1 = amountPhase1 / ph1Blocks;\\n\\t\\t\\tuint256 cleanAmountP1 = _amountPerBlockPhase1 * ph1Blocks;\\n\\t\\t\\tuint256 leftAmount = amountPhase1 - cleanAmountP1;\\n\\n\\t\\t\\tuint256 ph2Blocks = _startBlockPhase3 - _startBlockPhase2;\\n\\t\\t\\tuint256 amountPhase2 = (fraction / 4) + leftAmount;\\n\\t\\t\\t_amountPerBlockPhase2 = amountPhase2 / ph2Blocks;\\n\\t\\t\\tuint256 cleanAmountP2 = _amountPerBlockPhase2 * ph2Blocks;\\n\\t\\t\\tleftAmount = amountPhase2 - cleanAmountP2;\\n\\t\\t\\t\\n\\t\\t\\tuint256 ph3Blocks = _startBlockPhase4 - _startBlockPhase3;\\n\\t\\t\\t_amountPerBlockPhase3 = ((fraction / 8) + leftAmount) / ph3Blocks;\\n\\t\\t\\tuint256 cleanAmountP3 = _amountPerBlockPhase3 * ph3Blocks;\\n\\n\\t\\t\\t// Minimize cut of decimal errors.\\n\\t\\t\\t_amountPerBlockPhase4 = (amount - (cleanAmountP1 + cleanAmountP2 + cleanAmountP3)) / (_endBlock - _startBlockPhase4);\\n\\t\\t}\\n\\t\\tuint256 allowance = _token.allowance(owner(), address(this));\\n\\t\\trequire(allowance == amount, \\\"VortexLock: Allowance must be equal to amount\\\");  // solhint-disable-line reason-string\\n\\t\\t_token.transferFrom(owner(), address(this), amount);\\n\\t}\\n\\n\\t/// @notice Runs the last task after reaching the final block.\\n\\tfunction die() override public\\n\\t{\\n\\t\\trequire(block.number > _finalBlock, \\\"VortexLock: Can only be killed after final block\\\"); // solhint-disable-line reason-string\\n\\t\\tuint256 remainingAmount = _token.balanceOf(address(this));\\n\\t\\t_token.burn(remainingAmount);\\n\\t}\\n\\n\\t/// @notice Adds a benefitary as long as the startBlock is not reached.\\n\\tfunction addBeneficiary(address benefitary) override public onlyOwner\\n\\t{\\n\\t\\trequire(block.number < _startBlockPhase1, \\\"VortexLock: Can only added before start block\\\"); // solhint-disable-line reason-string\\n\\t\\t_lastClaimedBlock[benefitary] = _startBlockPhase1;\\n\\t\\t++_benefitaryCount;\\n\\t}\\n\\n\\tfunction claim() override public\\n\\t{\\n\\t\\taddress sender = msg.sender;\\n\\t\\trequire(_lastClaimedBlock[sender] > 0, \\\"VortexLock: Only benefitaries can claim\\\"); // solhint-disable-line reason-string\\n\\t\\tuint256 amount = getClaimableAmount();\\n\\t\\t_lastClaimedBlock[sender] = block.number;\\n\\t\\t_alreadyClaimedAmount[sender] += amount;\\n\\t\\t_token.transfer(sender, amount);\\n\\t}\\n\\n\\tfunction getClaimableAmount() override public view returns(uint256)\\n\\t{\\n\\t\\tuint256 currentBlock = block.number;\\n\\t\\t\\n\\t\\tif ((currentBlock < _startBlockPhase1) || (currentBlock > _finalBlock))\\n\\t\\t{\\n\\t\\t\\treturn 0; // Not started yet or final Block reached.\\n\\t\\t}\\n\\t\\tif (_lastClaimedBlock[msg.sender] < _startBlockPhase1)\\n\\t\\t{\\n\\t\\t\\treturn 0; // Not in list\\n\\t\\t}\\n\\n\\t\\tunchecked\\n\\t\\t{\\n\\t\\t\\tuint256 ph1Blocks =_max(_min(_startBlockPhase2, currentBlock), _startBlockPhase1) - _startBlockPhase1;\\n\\t\\t\\tuint256 ph2Blocks = _max(_min(_startBlockPhase3, currentBlock), _startBlockPhase2) - _startBlockPhase2;\\n\\t\\t\\tuint256 ph3Blocks = _max(_min(_startBlockPhase4, currentBlock), _startBlockPhase3) - _startBlockPhase3;\\n\\t\\t\\tuint256 ph4Blocks = _max(_min(_endBlock, currentBlock), _startBlockPhase4) - _startBlockPhase4;\\n\\t\\t\\tuint256 ret =  (((ph1Blocks * _amountPerBlockPhase1) +\\n\\t\\t\\t\\t(ph2Blocks * _amountPerBlockPhase2) +\\n\\t\\t\\t\\t(ph3Blocks * _amountPerBlockPhase3) +\\n\\t\\t\\t\\t(ph4Blocks * _amountPerBlockPhase4)) / _benefitaryCount) - _alreadyClaimedAmount[msg.sender];\\n\\t\\t\\treturn ret;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _min(uint256 a, uint256 b) private pure returns(uint256)\\n\\t{\\n\\t\\treturn a <= b ? a : b;\\n\\t}\\n\\n\\tfunction _max(uint256 a, uint256 b) private pure returns(uint256)\\n\\t{\\n\\t\\treturn a >= b ? a : b;\\n\\t}\\n}\\n\"\n    },\n    \"contracts/interfaces/IVortexLock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@exoda/contracts/interfaces/access/IOwnable.sol\\\";\\nimport \\\"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Burnable.sol\\\";\\n\\ninterface IVortexLock is IOwnable\\n{\\n\\tfunction loadToken(uint256 amount) external;\\n\\tfunction die() external;\\n\\tfunction addBeneficiary(address benefitary) external;\\n\\tfunction claim() external;\\n\\tfunction getClaimableAmount() external view returns(uint256);\\n}\"\n    },\n    \"@exoda/contracts/token/ERC20/extensions/ERC20Burnable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../interfaces/token/ERC20/extensions/IERC20Burnable.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n* @notice Extension of {ERC20} that allows token holders to destroy both their own\\n* tokens and those that they have an allowance for, in a way that can be\\n* recognized off-chain (via event analysis).\\n*/\\ncontract ERC20Burnable is Context, ERC20, IERC20Burnable\\n{\\n\\t/**\\n\\t* @notice Sets the values for {name} and {symbol}.\\n\\t*\\n\\t* The default value of {decimals} is 18. To select a different value for\\n\\t* {decimals} you should overload it.\\n\\t*\\n\\t* All two of these values are immutable: they can only be set once during\\n\\t* construction.\\n\\t*/\\n\\tconstructor(string memory tokenName, string memory tokenSymbol) ERC20(tokenName, tokenSymbol)\\n\\t{} // solhint-disable-line no-empty-blocks\\n\\n\\t/**\\n\\t* @notice Destroys `amount` tokens from the caller.\\n\\t*\\n\\t* See {ERC20-_burn}.\\n\\t*/\\n\\tfunction burn(uint256 amount) public virtual override\\n\\t{\\n\\t\\t_burn(_msgSender(), amount);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Destroys `amount` tokens from `account`, deducting from the caller's allowance.\\n\\t*\\n\\t* See {ERC20-_burn} and {ERC20-allowance}.\\n\\t*\\n\\t* Requirements:\\n\\t* - the caller must have allowance for `account`'s tokens of at least `amount`.\\n\\t*/\\n\\tfunction burnFrom(address account, uint256 amount) public virtual override\\n\\t{\\n\\t\\t_spendAllowance(account, _msgSender(), amount);\\n\\t\\t_burn(account, amount);\\n\\t}\\n}\\n\"\n    },\n    \"@exoda/contracts/token/ERC20/ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/token/ERC20/extensions/IERC20AltApprove.sol\\\";\\nimport \\\"../../interfaces/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n* @notice Implementation of the {IERC20Metadata} interface.\\n* The IERC20Metadata interface extends the IERC20 interface.\\n*\\n* This implementation is agnostic to the way tokens are created. This means\\n* that a supply mechanism has to be added in a derived contract using {_mint}.\\n* For a generic mechanism see Open Zeppelins {ERC20PresetMinterPauser}.\\n*\\n* TIP: For a detailed writeup see our guide\\n* https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n* to implement supply mechanisms].\\n*\\n* We have followed general OpenZeppelin Contracts guidelines: functions revert\\n* instead returning `false` on failure. This behavior is nonetheless\\n* conventional and does not conflict with the expectations of ERC20\\n* applications.\\n*\\n* Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n* This allows applications to reconstruct the allowance for all accounts just\\n* by listening to said events. Other implementations of the EIP may not emit\\n* these events, as it isn't required by the specification.\\n*\\n* Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n* functions have been added to mitigate the well-known issues around setting\\n* allowances. See {IERC20-approve}.\\n*/\\ncontract ERC20 is Context, IERC20AltApprove, IERC20Metadata\\n{\\n\\tuint256 internal _totalSupply;\\n\\tmapping(address => uint256) internal _balances;\\n\\tmapping(address => mapping(address => uint256)) private _allowances;\\n\\tstring private _name;\\n\\tstring private _symbol;\\n\\n\\t/**\\n\\t* @notice Sets the values for {name} and {symbol}.\\n\\t*\\n\\t* The default value of {decimals} is 18. To select a different value for\\n\\t* {decimals} you should overload it.\\n\\t*\\n\\t* All two of these values are immutable: they can only be set once during\\n\\t* construction.\\n\\t*/\\n\\tconstructor(string memory tokenName, string memory tokenSymbol)\\n\\t{\\n\\t\\t_name = tokenName;\\n\\t\\t_symbol = tokenSymbol;\\n\\t}\\n\\n\\t/**\\n\\t* @notice See {IERC20-approve}.\\n\\t*\\n\\t* NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n\\t* `transferFrom`. This is semantically equivalent to an infinite approval.\\n\\t*\\n\\t* Requirements:\\n\\t*\\n\\t* - `spender` cannot be the zero address.\\n\\t*/\\n\\tfunction approve(address spender, uint256 amount) override public virtual returns (bool)\\n\\t{\\n\\t\\taddress owner = _msgSender();\\n\\t\\t_approve(owner, spender, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Atomically decreases the allowance granted to `spender` by the caller.\\n\\t*\\n\\t* This is an alternative to {approve} that can be used as a mitigation for\\n\\t* problems described in {IERC20-approve}.\\n\\t*\\n\\t* Emits an {Approval} event indicating the updated allowance.\\n\\t*\\n\\t* Requirements:\\n\\t*\\n\\t* - `spender` cannot be the zero address.\\n\\t* - `spender` must have allowance for the caller of at least\\n\\t* `subtractedValue`.\\n\\t*/\\n\\tfunction decreaseAllowance(address spender, uint256 subtractedValue) override public virtual returns (bool)\\n\\t{\\n\\t\\taddress owner = _msgSender();\\n\\t\\tuint256 currentAllowance = allowance(owner, spender);\\n\\t\\trequire(currentAllowance >= subtractedValue, \\\"ERC20: reduced allowance below 0\\\");\\n\\t\\tunchecked {\\n\\t\\t\\t_approve(owner, spender, currentAllowance - subtractedValue);\\n\\t\\t}\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Atomically increases the allowance granted to `spender` by the caller.\\n\\t*\\n\\t* This is an alternative to {approve} that can be used as a mitigation for\\n\\t* problems described in {IERC20-approve}.\\n\\t*\\n\\t* Emits an {Approval} event indicating the updated allowance.\\n\\t*\\n\\t* Requirements:\\n\\t*\\n\\t* - `spender` cannot be the zero address.\\n\\t*/\\n\\tfunction increaseAllowance(address spender, uint256 addedValue) override public virtual returns (bool)\\n\\t{\\n\\t\\taddress owner = _msgSender();\\n\\t\\t_approve(owner, spender, allowance(owner, spender) + addedValue);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t* @notice See {IERC20-transfer}.\\n\\t*\\n\\t* Requirements:\\n\\t*\\n\\t* - `to` cannot be the zero address.\\n\\t* - the caller must have a balance of at least `amount`.\\n\\t*/\\n\\tfunction transfer(address to, uint256 amount) override public virtual returns (bool)\\n\\t{\\n\\t\\taddress owner = _msgSender();\\n\\t\\t_transfer(owner, to, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t* @notice See {IERC20-transferFrom}.\\n\\t*\\n\\t* Emits an {Approval} event indicating the updated allowance. This is not\\n\\t* required by the EIP. See the note at the beginning of {ERC20}.\\n\\t*\\n\\t* NOTE: Does not update the allowance if the current allowance is the maximum `uint256`.\\n\\t*\\n\\t* Requirements:\\n\\t*\\n\\t* - `from` and `to` cannot be the zero address.\\n\\t* - `from` must have a balance of at least `amount`.\\n\\t* - the caller must have allowance for ``from``'s tokens of at least\\n\\t* `amount`.\\n\\t*/\\n\\tfunction transferFrom(address from, address to, uint256 amount) override public virtual returns (bool)\\n\\t{\\n\\t\\taddress spender = _msgSender();\\n\\t\\t_spendAllowance(from, spender, amount);\\n\\t\\t_transfer(from, to, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t* @notice See {IERC20-allowance}.\\n\\t*/\\n\\tfunction allowance(address owner, address spender) override public view virtual returns (uint256)\\n\\t{\\n\\t\\treturn _allowances[owner][spender];\\n\\t}\\n\\n\\t/**\\n\\t* @notice See {IERC20-balanceOf}.\\n\\t*/\\n\\tfunction balanceOf(address account) override public view virtual returns (uint256)\\n\\t{\\n\\t\\treturn _balances[account];\\n\\t}\\n\\n\\t/**\\n\\t* @notice Returns the name of the token.\\n\\t*/\\n\\tfunction name() override public view virtual returns (string memory)\\n\\t{\\n\\t\\treturn _name;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Returns the symbol of the token, usually a shorter version of the\\n\\t* name.\\n\\t*/\\n\\tfunction symbol() override public view virtual returns (string memory)\\n\\t{\\n\\t\\treturn _symbol;\\n\\t}\\n\\n\\t/**\\n\\t* @notice See {IERC20-totalSupply}.\\n\\t*/\\n\\tfunction totalSupply() override public view virtual returns (uint256)\\n\\t{\\n\\t\\treturn _totalSupply;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Returns the number of decimals used to get its user representation.\\n\\t* For example, if `decimals` equals `2`, a balance of `505` tokens should\\n\\t* be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n\\t*\\n\\t* Tokens usually opt for a value of 18, imitating the relationship between\\n\\t* Ether and Wei. This is the value {ERC20} uses, unless this function is\\n\\t* overridden;\\n\\t*\\n\\t* NOTE: This information is only used for _display_ purposes: it in\\n\\t* no way affects any of the arithmetic of the contract, including\\n\\t* {IERC20-balanceOf} and {IERC20-transfer}.\\n\\t*/\\n\\tfunction decimals() override public pure virtual returns (uint8)\\n\\t{\\n\\t\\treturn 18;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n\\t*\\n\\t* This internal function is equivalent to `approve`, and can be used to\\n\\t* e.g. set automatic allowances for certain subsystems, etc.\\n\\t*\\n\\t* Emits an {Approval} event.\\n\\t*\\n\\t* Requirements:\\n\\t*\\n\\t* - `owner` cannot be the zero address.\\n\\t* - `spender` cannot be the zero address.\\n\\t*/\\n\\tfunction _approve(address owner, address spender, uint256 amount) internal virtual\\n\\t{\\n\\t\\trequire(owner != address(0), \\\"ERC20: approve from address(0)\\\");\\n\\t\\trequire(spender != address(0), \\\"ERC20: approve to address(0)\\\");\\n\\n\\t\\t_allowances[owner][spender] = amount;\\n\\t\\temit Approval(owner, spender, amount);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Destroys `amount` tokens from `account`, reducing the\\n\\t* total supply.\\n\\t*\\n\\t* Emits a {Transfer} event with `to` set to the zero address.\\n\\t*\\n\\t* Requirements:\\n\\t*\\n\\t* - `account` cannot be the zero address.\\n\\t* - `account` must have at least `amount` tokens.\\n\\t*/\\n\\tfunction _burn(address account, uint256 amount) internal virtual {\\n\\t\\trequire(account != address(0), \\\"ERC20: burn from address(0)\\\");\\n\\n\\t\\tuint256 accountBalance = _balances[account];\\n\\t\\trequire(accountBalance >= amount, \\\"ERC20: burn exceeds balance\\\");\\n\\t\\tunchecked {\\n\\t\\t\\t_balances[account] = accountBalance - amount;\\n\\t\\t}\\n\\t\\t_totalSupply -= amount;\\n\\n\\t\\temit Transfer(account, address(0), amount);\\n\\t}\\n\\n\\t/** @notice Creates `amount` tokens and assigns them to `account`, increasing\\n\\t* the total supply.\\n\\t*\\n\\t* Emits a {Transfer} event with `from` set to the zero address.\\n\\t*\\n\\t* Requirements:\\n\\t*\\n\\t* - `account` cannot be the zero address.\\n\\t*/\\n\\tfunction _mint(address account, uint256 amount) internal virtual\\n\\t{\\n\\t\\trequire(account != address(0), \\\"ERC20: mint to address(0)\\\");\\n\\n\\t\\t_totalSupply += amount;\\n\\t\\t_balances[account] += amount;\\n\\t\\temit Transfer(address(0), account, amount);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Updates `owner` s allowance for `spender` based on spent `amount`.\\n\\t*\\n\\t* Does not update the allowance amount in case of infinite allowance.\\n\\t* Revert if not enough allowance is available.\\n\\t*\\n\\t* Might emit an {Approval} event.\\n\\t*/\\n\\tfunction _spendAllowance(address owner, address spender, uint256 amount) internal virtual\\n\\t{\\n\\t\\tuint256 currentAllowance = allowance(owner, spender);\\n\\t\\tif (currentAllowance != type(uint256).max) {\\n\\t\\t\\trequire(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\t_approve(owner, spender, currentAllowance - amount);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t* @notice Moves `amount` of tokens from `sender` to `recipient`.\\n\\t*\\n\\t* This internal function is equivalent to {transfer}, and can be used to\\n\\t* e.g. implement automatic token fees, slashing mechanisms, etc.\\n\\t*\\n\\t* Emits a {Transfer} event.\\n\\t*\\n\\t* Requirements:\\n\\t*\\n\\t* - `from` cannot be the zero address.\\n\\t* - `to` cannot be the zero address.\\n\\t* - `from` must have a balance of at least `amount`.\\n\\t*/\\n\\tfunction _transfer(address from, address to, uint256 amount) internal virtual\\n\\t{\\n\\t\\trequire(from != address(0), \\\"ERC20: transfer from address(0)\\\");\\n\\t\\trequire(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n\\t\\tuint256 fromBalance = _balances[from];\\n\\t\\trequire(fromBalance >= amount, \\\"ERC20: transfer exceeds balance\\\");\\n\\t\\tunchecked {\\n\\t\\t\\t_balances[from] = fromBalance - amount;\\n\\t\\t}\\n\\t\\t_balances[to] += amount;\\n\\n\\t\\temit Transfer(from, to, amount);\\n\\t}\\n}\\n\"\n    },\n    \"contracts/mocks/ERC20BurnableMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@exoda/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\n\\ncontract ERC20BurnableMock is ERC20Burnable\\n{\\n\\tconstructor(string memory name, string memory symbol, uint256 supply) ERC20Burnable(name, symbol)\\n\\t{\\n\\t\\t_mint(msg.sender, supply);\\n\\t}\\n}\"\n    },\n    \"contracts/Exofiswap/ExofiswapRouter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@exoda/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@exoda/contracts/utils/Context.sol\\\";\\nimport \\\"./libraries/ExofiswapLibrary.sol\\\";\\nimport \\\"./libraries/MathUInt256.sol\\\";\\nimport \\\"./interfaces/IExofiswapFactory.sol\\\";\\nimport \\\"./interfaces/IExofiswapPair.sol\\\";\\nimport \\\"./interfaces/IExofiswapRouter.sol\\\";\\nimport \\\"./interfaces/IWETH9.sol\\\";\\n\\ncontract ExofiswapRouter is IExofiswapRouter, Context\\n{\\n\\tIExofiswapFactory private immutable _swapFactory;\\n\\tIWETH9 private immutable _wrappedEth;\\n\\n\\tmodifier ensure(uint256 deadline) {\\n\\t\\trequire(deadline >= block.timestamp, \\\"ER: EXPIRED\\\"); // solhint-disable-line not-rely-on-time\\n\\t\\t_;\\n\\t}\\n\\n\\tconstructor(IExofiswapFactory swapFactory, IWETH9 wrappedEth)\\n\\t{\\n\\t\\t_swapFactory = swapFactory;\\n\\t\\t_wrappedEth = wrappedEth;\\n\\t}\\n\\n\\treceive() override external payable\\n\\t{\\n\\t\\tassert(_msgSender() == address(_wrappedEth)); // only accept ETH via fallback from the WETH contract\\n\\t}\\n\\n\\tfunction addLiquidityETH(\\n\\t\\tIERC20Metadata token,\\n\\t\\tuint256 amountTokenDesired,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) override external virtual payable ensure(deadline) returns (uint256 amountToken, uint256 amountETH, uint256 liquidity)\\n\\t{\\n\\t\\tIExofiswapPair pair;\\n\\t\\t(amountToken, amountETH, pair) = _addLiquidity(\\n\\t\\t\\ttoken,\\n\\t\\t\\t_wrappedEth,\\n\\t\\t\\tamountTokenDesired,\\n\\t\\t\\tmsg.value,\\n\\t\\t\\tamountTokenMin,\\n\\t\\t\\tamountETHMin\\n\\t\\t);\\n\\t\\tSafeERC20.safeTransferFrom(token, _msgSender(), address(pair), amountToken);\\n\\t\\t_wrappedEth.deposit{value: amountETH}();\\n\\t\\tassert(_wrappedEth.transfer(address(pair), amountETH));\\n\\t\\tliquidity = pair.mint(to);\\n\\t\\t// refund dust eth, if any\\n\\t\\tif (msg.value > amountETH) ExofiswapLibrary.safeTransferETH(_msgSender(), MathUInt256.unsafeSub(msg.value, amountETH));\\n\\t}\\n\\n\\tfunction addLiquidity(\\n\\t\\tIERC20Metadata tokenA,\\n\\t\\tIERC20Metadata tokenB,\\n\\t\\tuint256 amountADesired,\\n\\t\\tuint256 amountBDesired,\\n\\t\\tuint256 amountAMin,\\n\\t\\tuint256 amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) override external virtual ensure(deadline) returns (uint256 amountA, uint256 amountB, uint256 liquidity)\\n\\t{\\n\\t\\tIExofiswapPair pair;\\n\\t\\t(amountA, amountB, pair) = _addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);\\n\\t\\t_safeTransferFrom(tokenA, tokenB, address(pair), amountA, amountB);\\n\\t\\tliquidity = pair.mint(to);\\n\\t}\\n\\n\\tfunction removeLiquidity(\\n\\t\\tIERC20Metadata tokenA,\\n\\t\\tIERC20Metadata tokenB,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountAMin,\\n\\t\\tuint256 amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external virtual override ensure(deadline) returns (uint256, uint256)\\n\\t{\\n\\t\\tIExofiswapPair pair = ExofiswapLibrary.pairFor(_swapFactory, tokenA, tokenB);\\n\\t\\treturn _removeLiquidity(pair, tokenB < tokenA, liquidity, amountAMin, amountBMin, to);\\n\\t}\\n\\n\\tfunction removeLiquidityETH(\\n\\t\\tIERC20Metadata token,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external override virtual ensure(deadline) returns (uint256 amountToken, uint256 amountETH)\\n\\t{\\n\\t\\tIExofiswapPair pair = ExofiswapLibrary.pairFor(_swapFactory, token, _wrappedEth);\\n\\t\\t(amountToken, amountETH) = _removeLiquidity(pair, _wrappedEth < token, liquidity, amountTokenMin, amountETHMin, address(this));\\n\\t\\tSafeERC20.safeTransfer(token, to, amountToken);\\n\\t\\t_wrappedEth.withdraw(amountETH);\\n\\t\\tExofiswapLibrary.safeTransferETH(to, amountETH);\\n\\t}\\n\\n\\tfunction removeLiquidityETHSupportingFeeOnTransferTokens(\\n\\t\\tIERC20Metadata token,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) override external virtual ensure(deadline) returns (uint256 amountETH)\\n\\t{\\n\\t\\tIExofiswapPair pair = ExofiswapLibrary.pairFor(_swapFactory, token, _wrappedEth);\\n\\t\\t(, amountETH) = _removeLiquidity(pair, _wrappedEth < token, liquidity, amountTokenMin, amountETHMin, address(this));\\n\\t\\tSafeERC20.safeTransfer(token, to, token.balanceOf(address(this)));\\n\\t\\t_wrappedEth.withdraw(amountETH);\\n\\t\\tExofiswapLibrary.safeTransferETH(to, amountETH);\\n\\t}\\n\\n\\tfunction removeLiquidityETHWithPermit(\\n\\t\\tIERC20Metadata token,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline,\\n\\t\\tbool approveMax, uint8 v, bytes32 r, bytes32 s\\n\\t) external override virtual returns (uint256 amountToken, uint256 amountETH)\\n\\t{\\n\\t\\tIExofiswapPair pair = ExofiswapLibrary.pairFor(_swapFactory, token, _wrappedEth);\\n\\t\\t{\\n\\t\\t\\tuint256 value = approveMax ? type(uint256).max : liquidity;\\n\\t\\t\\tpair.permit(_msgSender(), address(this), value, deadline, v, r, s); // ensure(deadline) happens here\\n\\t\\t}\\n\\t\\t(amountToken, amountETH) = _removeLiquidity(pair, _wrappedEth < token, liquidity, amountTokenMin, amountETHMin, address(this));\\n\\t\\tSafeERC20.safeTransfer(token, to, amountToken);\\n\\t\\t_wrappedEth.withdraw(amountETH);\\n\\t\\tExofiswapLibrary.safeTransferETH(to, amountETH);\\n\\t}\\n\\n\\tfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n\\t\\tIERC20Metadata token,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline,\\n\\t\\tbool approveMax,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) override external virtual returns (uint256 amountETH)\\n\\t{\\n\\t\\t{\\n\\t\\t\\tIExofiswapPair pair = ExofiswapLibrary.pairFor(_swapFactory, token, _wrappedEth);\\n\\t\\t\\tuint256 value = approveMax ? type(uint256).max : liquidity;\\n\\t\\t\\tpair.permit(_msgSender(), address(this), value, deadline, v, r, s); // ensure(deadline) happens here\\n\\t\\t\\t(, amountETH) = _removeLiquidity(pair, _wrappedEth < token, liquidity, amountTokenMin, amountETHMin, address(this));\\n\\t\\t}\\n\\t\\tSafeERC20.safeTransfer(token, to, token.balanceOf(address(this)));\\n\\t\\t_wrappedEth.withdraw(amountETH);\\n\\t\\tExofiswapLibrary.safeTransferETH(to, amountETH);\\n\\t}\\n\\n\\tfunction removeLiquidityWithPermit(\\n\\t\\tIERC20Metadata tokenA,\\n\\t\\tIERC20Metadata tokenB,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountAMin,\\n\\t\\tuint256 amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline,\\n\\t\\tbool approveMax, uint8 v, bytes32 r, bytes32 s\\n\\t) external override virtual returns (uint256 amountA, uint256 amountB)\\n\\t{\\n\\t\\tIExofiswapPair pair = ExofiswapLibrary.pairFor(_swapFactory, tokenA, tokenB);\\n\\t\\t{\\n\\t\\t\\tuint256 value = approveMax ? type(uint256).max : liquidity;\\n\\t\\t\\tpair.permit(_msgSender(), address(this), value, deadline, v, r, s); // ensure(deadline) happens here\\n\\t\\t}\\n\\t\\t(amountA, amountB) = _removeLiquidity(pair, tokenB < tokenA, liquidity, amountAMin, amountBMin, to);\\n\\t}\\n\\n\\tfunction swapExactTokensForETH(uint256 amountIn, uint256 amountOutMin, IERC20Metadata[] calldata path, address to, uint256 deadline)\\n\\t\\toverride external virtual ensure(deadline) returns (uint256[] memory amounts)\\n\\t{\\n\\t\\tuint256 lastItem = MathUInt256.unsafeDec(path.length);\\n\\t\\trequire(path[lastItem] == _wrappedEth, \\\"ER: INVALID_PATH\\\"); // Overflow on lastItem will flail here to\\n\\t\\tamounts = ExofiswapLibrary.getAmountsOut(_swapFactory, amountIn, path);\\n\\t\\trequire(amounts[amounts.length - 1] >= amountOutMin, \\\"ER: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n\\t\\tSafeERC20.safeTransferFrom(path[0], _msgSender(), address(ExofiswapLibrary.pairFor(_swapFactory, path[0], path[1])), amounts[0]);\\n\\t\\t_swap(amounts, path, address(this));\\n\\t\\t// Lenght of amounts array must be equal to length of path array.\\n\\t\\t_wrappedEth.withdraw(amounts[lastItem]);\\n\\t\\tExofiswapLibrary.safeTransferETH(to, amounts[lastItem]);\\n\\t}\\n\\n\\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\tIERC20Metadata[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) override external virtual ensure(deadline)\\n\\t{\\n\\t\\trequire(path[MathUInt256.unsafeDec(path.length)] == _wrappedEth, \\\"ER: INVALID_PATH\\\");\\n\\t\\tSafeERC20.safeTransferFrom(path[0], _msgSender(), address(ExofiswapLibrary.pairFor(_swapFactory, path[0], path[1])), amountIn);\\n\\t\\t_swapSupportingFeeOnTransferTokens(path, address(this));\\n\\t\\tuint256 amountOut = _wrappedEth.balanceOf(address(this));\\n\\t\\trequire(amountOut >= amountOutMin, \\\"ER: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n\\t\\t_wrappedEth.withdraw(amountOut);\\n\\t\\tExofiswapLibrary.safeTransferETH(to, amountOut);\\n\\t}\\n\\n\\tfunction swapExactTokensForTokens(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\tIERC20Metadata[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external override virtual ensure(deadline) returns (uint256[] memory amounts)\\n\\t{\\n\\t\\tamounts = ExofiswapLibrary.getAmountsOut(_swapFactory, amountIn, path);\\n\\t\\trequire(amounts[MathUInt256.unsafeDec(amounts.length)] >= amountOutMin, \\\"ER: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n\\t\\tSafeERC20.safeTransferFrom(path[0], _msgSender(), address(ExofiswapLibrary.pairFor(_swapFactory, path[0], path[1])), amounts[0]);\\n\\t\\t_swap(amounts, path, to);\\n\\t}\\n\\n\\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\tIERC20Metadata[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) override external virtual ensure(deadline)\\n\\t{\\n\\t\\tSafeERC20.safeTransferFrom(path[0], _msgSender(), address(ExofiswapLibrary.pairFor(_swapFactory, path[0], path[1])), amountIn);\\n\\t\\tuint256 lastItem = MathUInt256.unsafeDec(path.length);\\n\\t\\tuint256 balanceBefore = path[lastItem].balanceOf(to);\\n\\t\\t_swapSupportingFeeOnTransferTokens(path, to);\\n\\t\\trequire((path[lastItem].balanceOf(to) - balanceBefore) >= amountOutMin, \\\"ER: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n\\t}\\n\\n\\tfunction swapTokensForExactETH(uint256 amountOut, uint256 amountInMax, IERC20Metadata[] calldata path, address to, uint256 deadline) override\\n\\t\\texternal virtual ensure(deadline) returns (uint256[] memory amounts)\\n\\t{\\n\\t\\tuint256 lastItem = MathUInt256.unsafeDec(path.length);\\n\\t\\trequire(path[lastItem] == _wrappedEth, \\\"ER: INVALID_PATH\\\"); // Overflow on lastItem will fail here too\\n\\t\\tamounts = ExofiswapLibrary.getAmountsIn(_swapFactory, amountOut, path);\\n\\t\\trequire(amounts[0] <= amountInMax, \\\"ER: EXCESSIVE_INPUT_AMOUNT\\\");\\n\\t\\tSafeERC20.safeTransferFrom(\\n\\t\\t\\tpath[0], _msgSender(), address(ExofiswapLibrary.pairFor(_swapFactory, path[0], path[1])), amounts[0]\\n\\t\\t);\\n\\t\\t_swap(amounts, path, address(this));\\n\\t\\t// amounts and path must have the same item count...\\n\\t\\t_wrappedEth.withdraw(amounts[lastItem]);\\n\\t\\tExofiswapLibrary.safeTransferETH(to, amounts[lastItem]);\\n\\t}\\n\\n\\tfunction swapTokensForExactTokens(\\n\\t\\tuint256 amountOut,\\n\\t\\tuint256 amountInMax,\\n\\t\\tIERC20Metadata[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external override virtual ensure(deadline) returns (uint256[] memory amounts)\\n\\t{\\n\\t\\tamounts = ExofiswapLibrary.getAmountsIn(_swapFactory, amountOut, path);\\n\\t\\trequire(amounts[0] <= amountInMax, \\\"ER: EXCESSIVE_INPUT_AMOUNT\\\");\\n\\t\\tSafeERC20.safeTransferFrom(\\n\\t\\t\\tpath[0], _msgSender(), address(ExofiswapLibrary.pairFor(_swapFactory, path[0], path[1])), amounts[0]\\n\\t\\t);\\n\\t\\t_swap(amounts, path, to);\\n\\t}\\n\\n\\tfunction swapETHForExactTokens(uint256 amountOut, IERC20Metadata[] calldata path, address to, uint256 deadline)\\n\\t\\toverride external virtual payable ensure(deadline) returns (uint256[] memory amounts)\\n\\t{\\n\\t\\trequire(path[0] == _wrappedEth, \\\"ER: INVALID_PATH\\\");\\n\\t\\tamounts = ExofiswapLibrary.getAmountsIn(_swapFactory, amountOut, path);\\n\\t\\trequire(amounts[0] <= msg.value, \\\"ER: EXCESSIVE_INPUT_AMOUNT\\\");\\n\\t\\t_wrappedEth.deposit{value: amounts[0]}();\\n\\t\\tassert(_wrappedEth.transfer(address(ExofiswapLibrary.pairFor(_swapFactory, path[0], path[1])), amounts[0]));\\n\\t\\t_swap(amounts, path, to);\\n\\t\\t// refund dust eth, if any\\n\\t\\tif (msg.value > amounts[0]) ExofiswapLibrary.safeTransferETH(_msgSender(), msg.value - amounts[0]);\\n\\t}\\n\\n\\tfunction swapExactETHForTokens(uint256 amountOutMin, IERC20Metadata[] calldata path, address to, uint256 deadline)\\n\\t\\toverride external virtual payable ensure(deadline) returns (uint[] memory amounts)\\n\\t{\\n\\t\\trequire(path[0] == _wrappedEth, \\\"ER: INVALID_PATH\\\");\\n\\t\\tamounts = ExofiswapLibrary.getAmountsOut(_swapFactory, msg.value, path);\\n\\t\\trequire(amounts[MathUInt256.unsafeDec(amounts.length)] >= amountOutMin, \\\"ER: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n\\t\\t_wrappedEth.deposit{value: amounts[0]}();\\n\\t\\tassert(_wrappedEth.transfer(address(ExofiswapLibrary.pairFor(_swapFactory, path[0], path[1])), amounts[0]));\\n\\t\\t_swap(amounts, path, to);\\n\\t}\\n\\n\\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\\n\\t\\tuint256 amountOutMin,\\n\\t\\tIERC20Metadata[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) override external virtual payable ensure(deadline)\\n\\t{\\n\\t\\trequire(path[0] == _wrappedEth, \\\"ER: INVALID_PATH\\\");\\n\\t\\tuint256 amountIn = msg.value;\\n\\t\\t_wrappedEth.deposit{value: amountIn}();\\n\\t\\tassert(_wrappedEth.transfer(address(ExofiswapLibrary.pairFor(_swapFactory, path[0], path[1])), amountIn));\\n\\t\\tuint256 lastItem = MathUInt256.unsafeDec(path.length);\\n\\t\\tuint256 balanceBefore = path[lastItem].balanceOf(to);\\n\\t\\t_swapSupportingFeeOnTransferTokens(path, to);\\n\\t\\trequire(path[lastItem].balanceOf(to) - balanceBefore >= amountOutMin, \\\"ER: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n\\t}\\n\\n\\tfunction factory() override external view returns (IExofiswapFactory)\\n\\t{\\n\\t\\treturn _swapFactory;\\n\\t}\\n\\n\\tfunction getAmountsIn(uint256 amountOut, IERC20Metadata[] memory path) override\\n\\t\\tpublic view virtual returns (uint[] memory amounts)\\n\\t{\\n\\t\\treturn ExofiswapLibrary.getAmountsIn(_swapFactory, amountOut, path);\\n\\t}\\n\\n\\t// solhint-disable-next-line func-name-mixedcase\\n\\tfunction WETH() override public view returns(IERC20Metadata)\\n\\t{\\n\\t\\treturn _wrappedEth;\\n\\t}\\n\\n\\tfunction getAmountsOut(uint256 amountIn, IERC20Metadata[] memory path) override\\n\\t\\tpublic view virtual returns (uint256[] memory amounts)\\n\\t{\\n\\t\\treturn ExofiswapLibrary.getAmountsOut(_swapFactory, amountIn, path);\\n\\t}\\n\\n\\tfunction getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut) override\\n\\t\\tpublic pure virtual returns (uint256 amountIn)\\n\\t{\\n\\t\\treturn ExofiswapLibrary.getAmountIn(amountOut, reserveIn, reserveOut);\\n\\t}\\n\\n\\tfunction getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) override\\n\\t\\tpublic pure virtual returns (uint256)\\n\\t{\\n\\t\\treturn ExofiswapLibrary.getAmountOut(amountIn, reserveIn, reserveOut);\\n\\t}\\n\\n\\tfunction quote(uint256 amount, uint256 reserve0, uint256 reserve1) override public pure virtual returns (uint256)\\n\\t{\\n\\t\\treturn ExofiswapLibrary.quote(amount, reserve0, reserve1);\\n\\t}\\n\\n\\tfunction _addLiquidity(\\n\\t\\tIERC20Metadata tokenA,\\n\\t\\tIERC20Metadata tokenB,\\n\\t\\tuint256 amountADesired,\\n\\t\\tuint256 amountBDesired,\\n\\t\\tuint256 amountAMin,\\n\\t\\tuint256 amountBMin\\n\\t) private returns (uint256, uint256, IExofiswapPair)\\n\\t{\\n\\t\\t// create the pair if it doesn't exist yet\\n\\t\\tIExofiswapPair pair = _swapFactory.getPair(tokenA, tokenB);\\n\\t\\tif (address(pair) == address(0))\\n\\t\\t{\\n\\t\\t\\tpair = _swapFactory.createPair(tokenA, tokenB);\\n\\t\\t}\\n\\t\\t(uint256 reserveA, uint256 reserveB, ) = pair.getReserves();\\n\\t\\tif (reserveA == 0 && reserveB == 0)\\n\\t\\t{\\n\\t\\t\\treturn (amountADesired, amountBDesired, pair);\\n\\t\\t}\\n\\t\\tif(pair.token0() == tokenB)\\n\\t\\t{\\n\\t\\t\\t(reserveB, reserveA) = (reserveA, reserveB);\\n\\t\\t}\\n\\t\\tuint256 amountBOptimal = ExofiswapLibrary.quote(amountADesired, reserveA, reserveB);\\n\\t\\tif (amountBOptimal <= amountBDesired)\\n\\t\\t{\\n\\t\\t\\trequire(amountBOptimal >= amountBMin, \\\"ER: INSUFFICIENT_B_AMOUNT\\\");\\n\\t\\t\\treturn (amountADesired, amountBOptimal, pair);\\n\\t\\t}\\n\\t\\tuint256 amountAOptimal = ExofiswapLibrary.quote(amountBDesired, reserveB, reserveA);\\n\\t\\tassert(amountAOptimal <= amountADesired);\\n\\t\\trequire(amountAOptimal >= amountAMin, \\\"ER: INSUFFICIENT_A_AMOUNT\\\");\\n\\t\\treturn (amountAOptimal, amountBDesired, pair);\\n\\t}\\n\\n\\tfunction _removeLiquidity(\\n\\tIExofiswapPair pair,\\n\\tbool reverse,\\n\\tuint256 liquidity,\\n\\tuint256 amountAMin,\\n\\tuint256 amountBMin,\\n\\taddress to\\n\\t) private returns (uint256 amountA, uint256 amountB)\\n\\t{\\n\\t\\tpair.transferFrom(_msgSender(), address(pair), liquidity); // send liquidity to pair\\n\\t\\t(amountA, amountB) = pair.burn(to);\\n\\t\\tif(reverse)\\n\\t\\t{\\n\\t\\t\\t(amountA, amountB) = (amountB, amountA);\\n\\t\\t}\\n\\t\\trequire(amountA >= amountAMin, \\\"ER: INSUFFICIENT_A_AMOUNT\\\");\\n\\t\\trequire(amountB >= amountBMin, \\\"ER: INSUFFICIENT_B_AMOUNT\\\");\\n\\t}\\n\\n\\tfunction _safeTransferFrom(IERC20Metadata tokenA, IERC20Metadata tokenB, address pair, uint256 amountA, uint256 amountB) private\\n\\t{\\n\\t\\taddress sender = _msgSender();\\n\\t\\tSafeERC20.safeTransferFrom(tokenA, sender, pair, amountA);\\n\\t\\tSafeERC20.safeTransferFrom(tokenB, sender, pair, amountB);\\n\\t}\\n\\n\\t// requires the initial amount to have already been sent to the first pair\\n\\tfunction _swap(uint256[] memory amounts, IERC20Metadata[] memory path, address to) private\\n\\t{\\n\\t\\t// TODO: Optimize for Gas. Still higher than Uniswap....maybe get all pairs from factory at once helps....\\n\\t\\tuint256 pathLengthSubTwo = MathUInt256.unsafeSub(path.length, 2);\\n\\t\\tuint256 j;\\n\\t\\tuint256 i;\\n\\t\\twhile (i < pathLengthSubTwo)\\n\\t\\t{\\n\\t\\t\\tj = MathUInt256.unsafeInc(i);\\n\\t\\t\\tIExofiswapPair pair = ExofiswapLibrary.pairFor(_swapFactory, path[i], path[j]);\\n\\t\\t\\t(uint256 amount0Out, uint256 amount1Out) = path[i] == pair.token0() ? (uint256(0), amounts[j]) : (amounts[j], uint256(0));\\n\\t\\t\\tpair.swap(amount0Out, amount1Out, address(ExofiswapLibrary.pairFor(_swapFactory, path[j], path[MathUInt256.unsafeInc(j)])), new bytes(0));\\n\\t\\t\\ti = j;\\n\\t\\t}\\n\\t\\tj = MathUInt256.unsafeInc(i);\\n\\t\\tIExofiswapPair pair2 = ExofiswapLibrary.pairFor(_swapFactory, path[i], path[j]);\\n\\t\\t(uint256 amount0Out2, uint256 amount1Out2) = path[i] == pair2.token0() ? (uint256(0), amounts[j]) : (amounts[j], uint256(0));\\n\\t\\tpair2.swap(amount0Out2, amount1Out2, to, new bytes(0));\\n\\t}\\n\\n\\tfunction _swapSupportingFeeOnTransferTokens(IERC20Metadata[] memory path, address to) private\\n\\t{\\n\\t\\tuint256 pathLengthSubTwo = MathUInt256.unsafeSub(path.length, 2);\\n\\t\\tuint256 j;\\n\\t\\tuint256 i;\\n\\t\\twhile (i < pathLengthSubTwo)\\n\\t\\t{\\n\\t\\t\\tj = MathUInt256.unsafeInc(i);\\n\\t\\t\\tIExofiswapPair pair = ExofiswapLibrary.pairFor(_swapFactory, path[i], path[j]);\\n\\t\\t\\tuint256 amountInput;\\n\\t\\t\\tuint256 amountOutput;\\n\\t\\t\\tIERC20Metadata token0 = pair.token0();\\n\\t\\t\\t{ // scope to avoid stack too deep errors\\n\\t\\t\\t\\t(uint256 reserveInput, uint256 reserveOutput,) = pair.getReserves();\\n\\t\\t\\t\\tif (path[j] == token0)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t(reserveInput, reserveOutput) = (reserveOutput, reserveInput);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tamountInput = (path[i].balanceOf(address(pair)) - reserveInput);\\n\\t\\t\\t\\tamountOutput = ExofiswapLibrary.getAmountOut(amountInput, reserveInput, reserveOutput);\\n\\t\\t\\t}\\n\\t\\t\\t(uint256 amount0Out, uint256 amount1Out) = path[i] == token0 ? (uint256(0), amountOutput) : (amountOutput, uint256(0));\\n\\t\\t\\taddress receiver = address(ExofiswapLibrary.pairFor(_swapFactory, path[j], path[MathUInt256.unsafeInc(j)]));\\n\\t\\t\\tpair.swap(amount0Out, amount1Out, receiver, new bytes(0));\\n\\t\\t\\ti = j;\\n\\t\\t}\\n\\t\\tj = MathUInt256.unsafeInc(i);\\n\\t\\tIExofiswapPair pair2 = ExofiswapLibrary.pairFor(_swapFactory, path[i], path[j]);\\n\\t\\tuint256 amountInput2;\\n\\t\\tuint256 amountOutput2;\\n\\t\\tIERC20Metadata token02 = pair2.token0();\\n\\t\\t{ // scope to avoid stack too deep errors\\n\\t\\t\\t(uint256 reserveInput, uint256 reserveOutput,) = pair2.getReserves();\\n\\t\\t\\tif (path[j] == token02)\\n\\t\\t\\t{\\n\\t\\t\\t\\t(reserveInput, reserveOutput) = (reserveOutput, reserveInput);\\n\\t\\t\\t}\\n\\t\\t\\tamountInput2 = (path[i].balanceOf(address(pair2)) - reserveInput);\\n\\t\\t\\tamountOutput2 = ExofiswapLibrary.getAmountOut(amountInput2, reserveInput, reserveOutput);\\n\\t\\t}\\n\\t\\t(uint256 amount0Out2, uint256 amount1Out2) = path[i] == token02? (uint256(0), amountOutput2) : (amountOutput2, uint256(0));\\n\\t\\tpair2.swap(amount0Out2, amount1Out2, to, new bytes(0));\\n\\t}\\n}\\n\"\n    },\n    \"contracts/Exofiswap/libraries/ExofiswapLibrary.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./MathUInt256.sol\\\";\\nimport \\\"../interfaces/IExofiswapPair.sol\\\";\\n\\nlibrary ExofiswapLibrary\\n{\\n\\tfunction safeTransferETH(address to, uint256 value) internal\\n\\t{\\n\\t\\t// solhint-disable-next-line avoid-low-level-calls\\n\\t\\t(bool success, ) = to.call{value: value}(new bytes(0));\\n\\t\\trequire(success, \\\"ER: ETH transfer failed\\\");\\n\\t}\\n\\n\\t// performs chained getAmountIn calculations on any number of pairs\\n\\tfunction getAmountsIn(IExofiswapFactory factory, uint256 amountOut, IERC20Metadata[] memory path)\\n\\tinternal view returns (uint256[] memory amounts)\\n\\t{\\n\\t\\t// can not underflow since path.length >= 2;\\n\\t\\tuint256 j = path.length;\\n\\t\\trequire(j >= 2, \\\"EL: INVALID_PATH\\\");\\n\\t\\tamounts = new uint256[](j);\\n\\t\\tj = MathUInt256.unsafeDec(j);\\n\\t\\tamounts[j] = amountOut;\\n\\t\\tfor (uint256 i = j; i > 0; i = j)\\n\\t\\t{\\n\\t\\t\\tj = MathUInt256.unsafeDec(j);\\n\\t\\t\\t(uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[j], path[i]);\\n\\t\\t\\tamounts[j] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n\\t\\t}\\n\\t}\\n\\n\\t// performs chained getAmountOut calculations on any number of pairs\\n\\tfunction getAmountsOut(IExofiswapFactory factory, uint256 amountIn, IERC20Metadata[] memory path)\\n\\tinternal view returns (uint256[] memory amounts)\\n\\t{\\n\\t\\trequire(path.length >= 2, \\\"EL: INVALID_PATH\\\");\\n\\t\\tamounts = new uint256[](path.length);\\n\\t\\tamounts[0] = amountIn;\\n\\t\\t// can not underflow since path.length >= 2;\\n\\t\\tuint256 to = MathUInt256.unsafeDec(path.length);\\n\\t\\tuint256 j;\\n\\t\\tfor (uint256 i; i < to; i = j)\\n\\t\\t{\\n\\t\\t\\tj = MathUInt256.unsafeInc(i);\\n\\t\\t\\t(uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i], path[j]);\\n\\t\\t\\tamounts[j] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction getReserves(IExofiswapFactory factory, IERC20Metadata token0, IERC20Metadata token1) internal view returns (uint256, uint256)\\n\\t{\\n\\t\\t(IERC20Metadata tokenL,) = sortTokens(token0, token1);\\n\\t\\t(uint reserve0, uint reserve1,) = pairFor(factory, token0, token1).getReserves();\\n\\t\\treturn tokenL == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n\\t}\\n\\n\\t// calculates the CREATE2 address. It uses the factory for this since Factory already has the Pair contract included.\\n\\t// Otherwise this library would add the size of the Pair Contract to every contract using this function.\\n\\tfunction pairFor(IExofiswapFactory factory, IERC20Metadata token0, IERC20Metadata token1) internal pure returns (IExofiswapPair) {\\n\\t\\t\\n\\t\\t(IERC20Metadata tokenL, IERC20Metadata tokenR) = token0 < token1 ? (token0, token1) : (token1, token0);\\n\\t\\treturn IExofiswapPair(address(uint160(uint256(keccak256(abi.encodePacked(\\n\\t\\t\\t\\thex'ff', // CREATE2\\n\\t\\t\\t\\taddress(factory), // sender\\n\\t\\t\\t\\tkeccak256(abi.encodePacked(tokenL, tokenR)), // salt\\n\\t\\t\\t\\thex'2b030e03595718f09be5b952e8e9e44159b3fcf385422d5db25485106f124f44' // init code hash keccak256(type(ExofiswapPair).creationCode);\\n\\t\\t\\t))))));\\n\\t}\\n\\n\\t// given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n\\tfunction getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut) internal pure returns (uint amountIn)\\n\\t{\\n\\t\\trequire(amountOut > 0, \\\"EL: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n\\t\\trequire(reserveIn > 0 && reserveOut > 0, \\\"EL: INSUFFICIENT_LIQUIDITY\\\");\\n\\t\\tuint256 numerator = reserveIn * amountOut * 1000;\\n\\t\\tuint256 denominator = (reserveOut - amountOut) * 997;\\n\\t\\t// Div of uint can not overflow\\n\\t\\t// numerator is calulated in a way that if no overflow happens it is impossible to be type(uint256).max.\\n\\t\\t// The most simple explanation is that * 1000 is a multiplikation with an even number so the result hast to be even to.\\n\\t\\t// since type(uint256).max is uneven the result has to be smaler than type(uint256).max or an overflow would have occured.\\n\\t\\treturn MathUInt256.unsafeInc(MathUInt256.unsafeDiv(numerator, denominator));\\n\\t}\\n\\n\\tfunction getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) internal pure returns (uint256)\\n\\t{\\n\\t\\trequire(amountIn > 0, \\\"EL: INSUFFICIENT_INPUT_AMOUNT\\\");\\n\\t\\trequire(reserveIn > 0, \\\"EL: INSUFFICIENT_LIQUIDITY\\\");\\n\\t\\trequire(reserveOut > 0, \\\"EL: INSUFFICIENT_LIQUIDITY\\\");\\n\\t\\tuint256 amountInWithFee = amountIn * 997;\\n\\t\\tuint256 numerator = amountInWithFee * reserveOut;\\n\\t\\tuint256 denominator = (reserveIn * 1000) + amountInWithFee;\\n\\t\\t// Div of uint can not overflow\\n\\t\\treturn MathUInt256.unsafeDiv(numerator, denominator);\\n\\t}\\n\\n\\t// given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n\\tfunction quote(uint256 amount, uint256 reserve0, uint256 reserve1) internal pure returns (uint256) {\\n\\t\\trequire(amount > 0, \\\"EL: INSUFFICIENT_AMOUNT\\\");\\n\\t\\trequire(reserve0 > 0, \\\"EL: INSUFFICIENT_LIQUIDITY\\\");\\n\\t\\trequire(reserve1 > 0, \\\"EL: INSUFFICIENT_LIQUIDITY\\\");\\n\\t\\t// Division with uint can not overflow.\\n\\t\\treturn MathUInt256.unsafeDiv(amount * reserve1, reserve0);\\n\\t}\\n\\n\\t// returns sorted token addresses, used to handle return values from pairs sorted in this order\\n\\tfunction sortTokens(IERC20Metadata token0, IERC20Metadata token1) internal pure returns (IERC20Metadata tokenL, IERC20Metadata tokenR)\\n\\t{\\n\\t\\trequire(token0 != token1, \\\"EL: IDENTICAL_ADDRESSES\\\");\\n\\t\\t(tokenL, tokenR) = token0 < token1 ? (token0, token1) : (token1, token0);\\n\\t\\trequire(address(tokenL) != address(0), \\\"EL: ZERO_ADDRESS\\\");\\n\\t}\\n}\"\n    },\n    \"contracts/Exofiswap/libraries/MathUInt256.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary MathUInt256\\n{\\n\\tfunction min(uint256 a, uint256 b) internal pure returns(uint256)\\n\\t{\\n\\t\\treturn a > b ? b : a;\\n\\t}\\n\\n\\t// solhint-disable-next-line code-complexity\\n\\tfunction sqrt(uint256 x) internal pure returns (uint256)\\n\\t{\\n\\t\\tif (x == 0)\\n\\t\\t{\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\t// Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\\n\\t\\tuint256 xAux = x;\\n\\t\\tuint256 result = 1;\\n\\t\\tif (xAux >= 0x100000000000000000000000000000000)\\n\\t\\t{\\n\\t\\t\\txAux >>= 128;\\n\\t\\t\\tresult <<= 64;\\n\\t\\t}\\n\\t\\tif (xAux >= 0x10000000000000000)\\n\\t\\t{\\n\\t\\t\\txAux >>= 64;\\n\\t\\t\\tresult <<= 32;\\n\\t\\t}\\n\\t\\tif (xAux >= 0x100000000)\\n\\t\\t{\\n\\t\\t\\txAux >>= 32;\\n\\t\\t\\tresult <<= 16;\\n\\t\\t}\\n\\t\\tif (xAux >= 0x10000)\\n\\t\\t{\\n\\t\\t\\txAux >>= 16;\\n\\t\\t\\tresult <<= 8;\\n\\t\\t}\\n\\t\\tif (xAux >= 0x100)\\n\\t\\t{\\n\\t\\t\\txAux >>= 8;\\n\\t\\t\\tresult <<= 4;\\n\\t\\t}\\n\\t\\tif (xAux >= 0x10)\\n\\t\\t{\\n\\t\\t\\txAux >>= 4;\\n\\t\\t\\tresult <<= 2;\\n\\t\\t}\\n\\t\\tif (xAux >= 0x4)\\n\\t\\t{\\n\\t\\t\\tresult <<= 1;\\n\\t\\t}\\n\\n\\t\\t// The operations can never overflow because the result is max 2^127 when it enters this block.\\n\\t\\tunchecked\\n\\t\\t{\\n\\t\\t\\tresult = (result + x / result) >> 1;\\n\\t\\t\\tresult = (result + x / result) >> 1;\\n\\t\\t\\tresult = (result + x / result) >> 1;\\n\\t\\t\\tresult = (result + x / result) >> 1;\\n\\t\\t\\tresult = (result + x / result) >> 1;\\n\\t\\t\\tresult = (result + x / result) >> 1;\\n\\t\\t\\tresult = (result + x / result) >> 1; // Seven iterations should be enough\\n\\t\\t\\tuint256 roundedDownResult = x / result;\\n\\t\\t\\treturn result >= roundedDownResult ? roundedDownResult : result;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction unsafeDec(uint256 a) internal pure returns (uint256)\\n\\t{\\n\\t\\tunchecked \\n\\t\\t{\\n\\t\\t\\treturn a - 1;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction unsafeDiv(uint256 a, uint256 b) internal pure returns (uint256)\\n\\t{\\n\\t\\tunchecked\\n\\t\\t{\\n\\t\\t\\treturn a / b;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction unsafeInc(uint256 a) internal pure returns (uint256)\\n\\t{\\n\\t\\tunchecked \\n\\t\\t{\\n\\t\\t\\treturn a + 1;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction unsafeMul(uint256 a, uint256 b) internal pure returns (uint256)\\n\\t{\\n\\t\\tunchecked\\n\\t\\t{\\n\\t\\t\\treturn a * b;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction unsafeSub(uint256 a, uint256 b) internal pure returns (uint256)\\n\\t{\\n\\t\\tunchecked\\n\\t\\t{\\n\\t\\t\\treturn a - b;\\n\\t\\t}\\n\\t}\\n}\"\n    },\n    \"contracts/Exofiswap/interfaces/IExofiswapFactory.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@exoda/contracts/interfaces/access/IOwnable.sol\\\";\\nimport \\\"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IExofiswapFactory.sol\\\";\\nimport \\\"./IExofiswapPair.sol\\\";\\nimport \\\"./IMigrator.sol\\\";\\n\\ninterface IExofiswapFactory is IOwnable\\n{\\n\\tevent PairCreated(IERC20Metadata indexed token0, IERC20Metadata indexed token1, IExofiswapPair pair, uint256 pairCount);\\n\\n\\tfunction createPair(IERC20Metadata tokenA, IERC20Metadata tokenB) external returns (IExofiswapPair pair);\\n\\tfunction setFeeTo(address) external;\\n\\tfunction setMigrator(IMigrator) external;\\n\\t\\n\\tfunction allPairs(uint256 index) external view returns (IExofiswapPair);\\n\\tfunction allPairsLength() external view returns (uint);\\n\\tfunction feeTo() external view returns (address);\\n\\tfunction getPair(IERC20Metadata tokenA, IERC20Metadata tokenB) external view returns (IExofiswapPair);\\n\\tfunction migrator() external view returns (IMigrator);\\n\\n\\tfunction pairCodeHash() external pure returns (bytes32);\\n}\\n\"\n    },\n    \"contracts/Exofiswap/interfaces/IExofiswapPair.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IExofiswapCallee.sol\\\";\\nimport \\\"./IExofiswapERC20.sol\\\";\\nimport \\\"./IExofiswapFactory.sol\\\";\\n\\ninterface IExofiswapPair is IExofiswapERC20\\n{\\n\\tevent Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n\\tevent Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n\\tevent Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\\n\\tevent Sync(uint112 reserve0, uint112 reserve1);\\n\\n\\tfunction burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\tfunction initialize(IERC20Metadata token0Init, IERC20Metadata token1Init) external;\\n\\tfunction mint(address to) external returns (uint256 liquidity);\\n\\tfunction skim(address to) external;\\n\\tfunction swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\\n\\tfunction sync() external;\\n\\n\\tfunction factory() external view returns (IExofiswapFactory);\\n\\tfunction getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\tfunction kLast() external view returns (uint256);\\n\\tfunction price0CumulativeLast() external view returns (uint256);\\n\\tfunction price1CumulativeLast() external view returns (uint256);\\n\\tfunction token0() external view returns (IERC20Metadata);\\n\\tfunction token1() external view returns (IERC20Metadata);\\n\\n\\tfunction MINIMUM_LIQUIDITY() external pure returns (uint256); //solhint-disable-line func-name-mixedcase\\n}\"\n    },\n    \"contracts/Exofiswap/interfaces/IExofiswapRouter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IExofiswapFactory.sol\\\";\\n\\ninterface IExofiswapRouter {\\n\\treceive() external payable;\\n\\n\\tfunction addLiquidityETH(\\n\\t\\tIERC20Metadata token,\\n\\t\\tuint256 amountTokenDesired,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\n\\n\\tfunction addLiquidity(\\n\\t\\tIERC20Metadata tokenA,\\n\\t\\tIERC20Metadata tokenB,\\n\\t\\tuint256 amountADesired,\\n\\t\\tuint256 amountBDesired,\\n\\t\\tuint256 amountAMin,\\n\\t\\tuint256 amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n\\n\\tfunction removeLiquidity(\\n\\t\\tIERC20Metadata tokenA,\\n\\t\\tIERC20Metadata tokenB,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountAMin,\\n\\t\\tuint256 amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256 amountA, uint256 amountB);\\n\\n\\tfunction removeLiquidityETH(\\n\\t\\tIERC20Metadata token,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256 amountToken, uint256 amountETH);\\n\\n\\tfunction removeLiquidityETHSupportingFeeOnTransferTokens(\\n\\t\\tIERC20Metadata token,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256 amountETH);\\n\\n\\tfunction removeLiquidityETHWithPermit(\\n\\t\\tIERC20Metadata token,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline,\\n\\t\\tbool approveMax,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external returns (uint256 amountToken, uint256 amountETH);\\n\\n\\tfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n\\t\\tIERC20Metadata token,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline,\\n\\t\\tbool approveMax,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external returns (uint256 amountETH);\\n\\n\\tfunction removeLiquidityWithPermit(\\n\\t\\tIERC20Metadata tokenA,\\n\\t\\tIERC20Metadata tokenB,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountAMin,\\n\\t\\tuint256 amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline,\\n\\t\\tbool approveMax,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external returns (uint256 amountA, uint256 amountB);\\n\\n\\tfunction swapETHForExactTokens(\\n\\t\\tuint256 amountOut,\\n\\t\\tIERC20Metadata[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external payable returns (uint256[] memory amounts);\\n\\n\\tfunction swapExactETHForTokens(\\n\\t\\tuint256 amountOutMin,\\n\\t\\tIERC20Metadata[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external payable returns (uint256[] memory amounts);\\n\\n\\tfunction swapExactTokensForETH(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\tIERC20Metadata[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256[] memory amounts);\\n\\n\\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\tIERC20Metadata[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external;\\n\\n\\tfunction swapExactTokensForTokens(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\tIERC20Metadata[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256[] memory amounts);\\n\\n\\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\tIERC20Metadata[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external;\\n\\n\\tfunction swapTokensForExactETH(\\n\\t\\tuint256 amountOut,\\n\\t\\tuint256 amountInMax,\\n\\t\\tIERC20Metadata[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256[] memory amounts);\\n\\n\\tfunction swapTokensForExactTokens(\\n\\t\\tuint256 amountOut,\\n\\t\\tuint256 amountInMax,\\n\\t\\tIERC20Metadata[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256[] memory amounts);\\n\\n\\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\\n\\t\\tuint256 amountOutMin,\\n\\t\\tIERC20Metadata[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external payable;\\n\\n\\t\\tfunction factory() external view returns (IExofiswapFactory);\\n\\n\\tfunction getAmountsIn(uint256 amountOut, IERC20Metadata[] calldata path)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256[] memory amounts);\\n\\n\\tfunction WETH() external view returns (IERC20Metadata); // solhint-disable-line func-name-mixedcase\\n\\n\\tfunction getAmountsOut(uint256 amountIn, IERC20Metadata[] calldata path)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256[] memory amounts);\\n\\n\\tfunction getAmountOut(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 reserveIn,\\n\\t\\tuint256 reserveOut\\n\\t) external pure returns (uint256 amountOut);\\n\\n\\tfunction getAmountIn(\\n\\t\\tuint256 amountOut,\\n\\t\\tuint256 reserveIn,\\n\\t\\tuint256 reserveOut\\n\\t) external pure returns (uint256);\\n\\n\\tfunction quote(\\n\\t\\tuint256 amount,\\n\\t\\tuint256 reserve0,\\n\\t\\tuint256 reserve1\\n\\t) external pure returns (uint256);\\n}\\n\"\n    },\n    \"contracts/Exofiswap/interfaces/IWETH9.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IWETH9 is IERC20Metadata\\n{\\n\\tevent Deposit(address indexed from, uint256 value);\\n\\tevent Withdraw(address indexed to, uint256 value);\\n\\t\\n\\tfunction deposit() external payable;\\n\\tfunction withdraw(uint256 value) external;\\n}\"\n    },\n    \"contracts/Exofiswap/interfaces/IExofiswapCallee.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IExofiswapCallee\\n{\\n    function exofiswapCall(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\"\n    },\n    \"contracts/Exofiswap/interfaces/IExofiswapERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20AltApprove.sol\\\";\\nimport \\\"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IExofiswapERC20 is IERC20AltApprove, IERC20Metadata\\n{\\n\\t// Functions as described in EIP 2612\\n\\tfunction permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\tfunction nonces(address owner) external view returns (uint256);\\n\\tfunction DOMAIN_SEPARATOR() external view returns (bytes32); // solhint-disable-line func-name-mixedcase\\n\\tfunction PERMIT_TYPEHASH() external pure returns (bytes32); //solhint-disable-line func-name-mixedcase\\n}\"\n    },\n    \"contracts/Exofiswap/interfaces/IMigrator.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IMigrator\\n{\\n\\t// Return the desired amount of liquidity token that the migrator wants.\\n\\tfunction desiredLiquidity() external view returns (uint256);\\n}\"\n    },\n    \"contracts/test/RouterEventEmitter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Exofiswap/interfaces/IExofiswapRouter.sol\\\";\\n\\ninterface IRouterEventEmitter\\n{\\n    receive() external payable;\\n    function swapExactTokensForTokens(\\n        IExofiswapRouter router,\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapTokensForExactTokens(\\n        IExofiswapRouter router,\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokens(\\n        IExofiswapRouter router,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapTokensForExactETH(\\n        IExofiswapRouter router,\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactTokensForETH(\\n        IExofiswapRouter router,\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapETHForExactTokens(\\n        IExofiswapRouter router,\\n        uint amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n}\\n\\ncontract RouterEventEmitter is IRouterEventEmitter {\\n    event Amounts(uint[] amounts);\\n\\n    receive() override external payable {} // solhint-disable-line no-empty-blocks\\n\\n    function swapExactTokensForTokens(\\n        IExofiswapRouter router,\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) override external {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returnData) = address(router).delegatecall(abi.encodeWithSelector(\\n            router.swapExactTokensForTokens.selector, amountIn, amountOutMin, path, to, deadline\\n        ));\\n        assert(success);\\n        emit Amounts(abi.decode(returnData, (uint[])));\\n    }\\n\\n    function swapTokensForExactTokens(\\n        IExofiswapRouter router,\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) override external {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returnData) = address(router).delegatecall(abi.encodeWithSelector(\\n            router.swapTokensForExactTokens.selector, amountOut, amountInMax, path, to, deadline\\n        ));\\n        assert(success);\\n        emit Amounts(abi.decode(returnData, (uint[])));\\n    }\\n\\n    function swapExactETHForTokens(\\n        IExofiswapRouter router,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) override external payable {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returnData) = address(router).delegatecall(abi.encodeWithSelector(\\n            router.swapExactETHForTokens.selector, amountOutMin, path, to, deadline\\n        ));\\n        assert(success);\\n        emit Amounts(abi.decode(returnData, (uint[])));\\n    }\\n\\n    function swapTokensForExactETH(\\n        IExofiswapRouter router,\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) override external {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returnData) = address(router).delegatecall(abi.encodeWithSelector(\\n            router.swapTokensForExactETH.selector, amountOut, amountInMax, path, to, deadline\\n        ));\\n        assert(success);\\n        emit Amounts(abi.decode(returnData, (uint[])));\\n    }\\n\\n    function swapExactTokensForETH(\\n        IExofiswapRouter router,\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) override external {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returnData) = address(router).delegatecall(abi.encodeWithSelector(\\n            router.swapExactTokensForETH.selector, amountIn, amountOutMin, path, to, deadline\\n        ));\\n        assert(success);\\n        emit Amounts(abi.decode(returnData, (uint[])));\\n    }\\n\\n    function swapETHForExactTokens(\\n        IExofiswapRouter router,\\n        uint amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) override external payable {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returnData) = address(router).delegatecall(abi.encodeWithSelector(\\n            router.swapETHForExactTokens.selector, amountOut, path, to, deadline\\n        ));\\n        assert(success);\\n        emit Amounts(abi.decode(returnData, (uint[])));\\n    }\\n}\\n\"\n    },\n    \"contracts/Exofiswap/ExofiswapPair.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@exoda/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IExofiswapCallee.sol\\\";\\nimport \\\"./interfaces/IExofiswapFactory.sol\\\";\\nimport \\\"./interfaces/IExofiswapPair.sol\\\";\\nimport \\\"./interfaces/IMigrator.sol\\\";\\nimport \\\"./ExofiswapERC20.sol\\\";\\nimport \\\"./libraries/MathUInt32.sol\\\";\\nimport \\\"./libraries/MathUInt256.sol\\\";\\nimport \\\"./libraries/UQ144x112.sol\\\";\\n\\ncontract ExofiswapPair is IExofiswapPair, ExofiswapERC20\\n{\\n\\t// using UQ144x112 for uint256;\\n\\t// using SafeERC20 for IERC20Metadata; // For some unknown reason using this needs a little more gas than using the library without it.\\n\\tstruct SwapAmount // needed to reduce stack deep;\\n\\t{\\n\\t\\tuint256 balance0;\\n\\t\\tuint256 balance1;\\n\\t\\tuint112 reserve0;\\n\\t\\tuint112 reserve1;\\n\\t}\\n\\n\\tuint256 private constant _MINIMUM_LIQUIDITY = 10**3;\\n\\tuint256 private _price0CumulativeLast;\\n\\tuint256 private _price1CumulativeLast;\\n\\tuint256 private _kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\\n\\tuint256 private _unlocked = 1;\\n\\tuint112 private _reserve0;           // uses single storage slot, accessible via getReserves\\n\\tuint112 private _reserve1;           // uses single storage slot, accessible via getReserves\\n\\tuint32  private _blockTimestampLast; // uses single storage slot, accessible via getReserves\\n\\tIExofiswapFactory private immutable _factory;\\n\\tIERC20Metadata private _token0;\\n\\tIERC20Metadata private _token1;\\n\\n\\tmodifier lock()\\n\\t{\\n\\t\\trequire(_unlocked == 1, \\\"EP: LOCKED\\\");\\n\\t\\t_unlocked = 0;\\n\\t\\t_;\\n\\t\\t_unlocked = 1;\\n\\t}\\n\\n\\tconstructor() ExofiswapERC20(\\\"Plasma\\\")\\n\\t{\\n\\t\\t_factory = IExofiswapFactory(_msgSender());\\n\\t}\\n\\n\\t// called once by the factory at time of deployment\\n\\tfunction initialize(IERC20Metadata token0Init, IERC20Metadata token1Init) override external\\n\\t{\\n\\t\\trequire(_msgSender() == address(_factory), \\\"EP: FORBIDDEN\\\");\\n\\t\\t_token0 = token0Init;\\n\\t\\t_token1 = token1Init;\\n\\t}\\n\\n\\t// this low-level function should be called from a contract which performs important safety checks\\n\\tfunction burn(address to) override public lock returns (uint, uint)\\n\\t{\\n\\t\\tSwapAmount memory sa;\\n\\t\\t(sa.reserve0, sa.reserve1,) = getReserves(); // gas savings\\n\\t\\tsa.balance0 = _token0.balanceOf(address(this));\\n\\t\\tsa.balance1 = _token1.balanceOf(address(this));\\n\\t\\tuint256 liquidity = balanceOf(address(this));\\n\\n\\t\\t// Can not overflow\\n\\t\\tbool feeOn = _mintFee(MathUInt256.unsafeMul(sa.reserve0, sa.reserve1));\\n\\t\\tuint256 totalSupplyValue = _totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n\\t\\tuint256 amount0 = MathUInt256.unsafeDiv(liquidity * sa.balance0, totalSupplyValue); // using balances ensures pro-rata distribution\\n\\t\\tuint256 amount1 = MathUInt256.unsafeDiv(liquidity * sa.balance1, totalSupplyValue); // using balances ensures pro-rata distribution\\n\\t\\trequire(amount0 > 0 && amount1 > 0, \\\"EP: INSUFFICIENT_LIQUIDITY\\\");\\n\\t\\t_burn(address(this), liquidity);\\n\\t\\tSafeERC20.safeTransfer(_token0, to, amount0);\\n\\t\\tSafeERC20.safeTransfer(_token1, to, amount1);\\n\\t\\tsa.balance0 = _token0.balanceOf(address(this));\\n\\t\\tsa.balance1 = _token1.balanceOf(address(this));\\n\\n\\t\\t_update(sa);\\n\\n\\t\\tif (feeOn)\\n\\t\\t{\\n\\t\\t\\tunchecked // Can not overflow\\n\\t\\t\\t{\\n\\t\\t\\t\\t// _reserve0 and _reserve1 are up-to-date\\n\\t\\t\\t\\t// What _update(sa) does is set _reserve0 to sa.balance0 and _reserve1 to sa.balance1\\n\\t\\t\\t\\t// So there is no neet to access and converte the _reserves directly,\\n\\t\\t\\t\\t// instead use the known balances that are already in the correct type.\\n\\t\\t\\t\\t_kLast = sa.balance0 * sa.balance1; \\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\temit Burn(msg.sender, amount0, amount1, to);\\n\\t\\treturn (amount0, amount1);\\n\\t}\\n\\n\\t// this low-level function should be called from a contract which performs important safety checks\\n\\tfunction mint(address to) override public lock returns (uint256)\\n\\t{\\n\\t\\tSwapAmount memory sa;\\n\\t\\t(sa.reserve0, sa.reserve1,) = getReserves(); // gas savings\\n\\t\\tsa.balance0 = _token0.balanceOf(address(this));\\n\\t\\tsa.balance1 = _token1.balanceOf(address(this));\\n\\t\\tuint256 amount0 = sa.balance0 - sa.reserve0;\\n\\t\\tuint256 amount1 = sa.balance1 - sa.reserve1;\\n\\n\\t\\tbool feeOn = _mintFee(MathUInt256.unsafeMul(sa.reserve0, sa.reserve1));\\n\\t\\tuint256 totalSupplyValue = _totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n\\t\\tuint256 liquidity;\\n\\n\\t\\tif (totalSupplyValue == 0)\\n\\t\\t{\\n\\t\\t\\tIMigrator migrator = _factory.migrator();\\n\\t\\t\\tif (_msgSender() == address(migrator))\\n\\t\\t\\t{\\n\\t\\t\\t\\tliquidity = migrator.desiredLiquidity();\\n\\t\\t\\t\\trequire(liquidity > 0 && liquidity != type(uint256).max, \\\"EP: Liquidity Error\\\");\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\trequire(address(migrator) == address(0), \\\"EP: Migrator set\\\");\\n\\t\\t\\t\\tliquidity = MathUInt256.sqrt(amount0 * amount1) - _MINIMUM_LIQUIDITY;\\n\\t\\t\\t\\t_mintMinimumLiquidity();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\t//Div by uint can not overflow\\n\\t\\t\\tliquidity = \\n\\t\\t\\t\\tMathUInt256.min(\\n\\t\\t\\t\\t\\tMathUInt256.unsafeDiv(amount0 * totalSupplyValue, sa.reserve0),\\n\\t\\t\\t\\t\\tMathUInt256.unsafeDiv(amount1 * totalSupplyValue, sa.reserve1)\\n\\t\\t\\t\\t);\\n\\t\\t}\\n\\t\\trequire(liquidity > 0, \\\"EP: INSUFFICIENT_LIQUIDITY\\\");\\n\\t\\t_mint(to, liquidity);\\n\\n\\t\\t_update(sa);\\n\\t\\tif (feeOn)\\n\\t\\t{\\n\\t\\t\\t// _reserve0 and _reserve1 are up-to-date\\n\\t\\t\\t// What _update(sa) does is set _reserve0 to sa.balance0 and _reserve1 to sa.balance1\\n\\t\\t\\t// So there is no neet to access and converte the _reserves directly,\\n\\t\\t\\t// instead use the known balances that are already in the correct type.\\n\\t\\t\\t_kLast = sa.balance0 * sa.balance1; \\n\\t\\t}\\n\\t\\temit Mint(_msgSender(), amount0, amount1);\\n\\t\\treturn liquidity;\\n\\t}\\n\\n\\t// force balances to match reserves\\n\\tfunction skim(address to) override public lock\\n\\t{\\n\\t\\tSafeERC20.safeTransfer(_token0, to, _token0.balanceOf(address(this)) - _reserve0);\\n\\t\\tSafeERC20.safeTransfer(_token1, to, _token1.balanceOf(address(this)) - _reserve1);\\n\\t}\\n\\n\\t// this low-level function should be called from a contract which performs important safety checks\\n\\tfunction swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) override public lock\\n\\t{\\n\\t\\trequire(amount0Out > 0 || amount1Out > 0, \\\"EP: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n\\t\\tSwapAmount memory sa;\\n\\t\\t(sa.reserve0, sa.reserve1, ) = getReserves(); // gas savings\\n\\t\\trequire(amount0Out < sa.reserve0, \\\"EP: INSUFFICIENT_LIQUIDITY\\\");\\n\\t\\trequire(amount1Out < sa.reserve1, \\\"EP: INSUFFICIENT_LIQUIDITY\\\");\\n\\n\\t\\t(sa.balance0, sa.balance1) = _transferTokens(to, amount0Out, amount1Out, data);\\n\\n\\t\\t(uint256 amount0In, uint256 amount1In) = _getInAmounts(amount0Out, amount1Out, sa);\\n\\t\\trequire(amount0In > 0 || amount1In > 0, \\\"EP: INSUFFICIENT_INPUT_AMOUNT\\\");\\n\\t\\t{ \\n\\t\\t\\t// This is a sanity check to make sure we don't lose from the swap.\\n\\t\\t\\t// scope for reserve{0,1} Adjusted, avoids stack too deep errors\\n\\t\\t\\tuint256 balance0Adjusted = (sa.balance0 * 1000) - (amount0In * 3); \\n\\t\\t\\tuint256 balance1Adjusted = (sa.balance1 * 1000) - (amount1In * 3); \\n\\t\\t\\t// 112 bit * 112 bit * 20 bit can not overflow a 256 bit value\\n\\t\\t\\t// Bigest possible number is 2,695994666715063979466701508702e+73\\n\\t\\t\\t// uint256 maxvalue is 1,1579208923731619542357098500869e+77\\n\\t\\t\\t// or 2**112 * 2**112 * 2**20 = 2**244 < 2**256\\n\\t\\t\\trequire(balance0Adjusted * balance1Adjusted >= MathUInt256.unsafeMul(MathUInt256.unsafeMul(sa.reserve0, sa.reserve1), 1_000_000), \\\"EP: K\\\");\\n\\t\\t}\\n\\t\\t_update(sa);\\n\\t\\temit Swap(_msgSender(), amount0In, amount1In, amount0Out, amount1Out, to);\\n\\t}\\n\\n\\t\\n\\t// force reserves to match balances\\n\\tfunction sync() override public lock\\n\\t{\\n\\t\\t_update(SwapAmount(_token0.balanceOf(address(this)), _token1.balanceOf(address(this)), _reserve0, _reserve1));\\n\\t}\\n\\t\\n\\tfunction factory() override public view returns (IExofiswapFactory)\\n\\t{\\n\\t\\treturn _factory;\\n\\t}\\n\\n\\tfunction getReserves() override public view returns (uint112, uint112, uint32)\\n\\t{\\n\\t\\treturn (_reserve0, _reserve1, _blockTimestampLast);\\n\\t}\\n\\n\\tfunction kLast() override public view returns (uint256)\\n\\t{\\n\\t\\treturn _kLast;\\n\\t}\\n\\t\\n\\tfunction name() override(ERC20, IERC20Metadata) public view virtual returns (string memory)\\n\\t{\\n\\t\\treturn string(abi.encodePacked(_token0.symbol(), \\\"/\\\", _token1.symbol(), \\\" \\\", super.name()));\\n\\t}\\n\\n\\tfunction price0CumulativeLast() override public view returns (uint256)\\n\\t{\\n\\t\\treturn _price0CumulativeLast;\\n\\t}\\n\\n\\tfunction price1CumulativeLast() override public view returns (uint256)\\n\\t{\\n\\t\\treturn _price1CumulativeLast;\\n\\t}\\n\\n\\n\\tfunction token0() override public view returns (IERC20Metadata)\\n\\t{\\n\\t\\treturn _token0;\\n\\t}\\n\\t\\n\\tfunction token1() override public view returns (IERC20Metadata)\\n\\t{\\n\\t\\treturn _token1;\\n\\t}\\n\\n\\tfunction MINIMUM_LIQUIDITY() override public pure returns (uint256) //solhint-disable-line func-name-mixedcase\\n\\t{\\n\\t\\treturn _MINIMUM_LIQUIDITY;\\n\\t}\\n\\n\\tfunction _mintMinimumLiquidity() private\\n\\t{\\n\\t\\trequire(_totalSupply == 0, \\\"EP: Total supply not 0\\\");\\n\\n\\t\\t_totalSupply += _MINIMUM_LIQUIDITY;\\n\\t\\t_balances[address(0)] += _MINIMUM_LIQUIDITY;\\n\\t\\temit Transfer(address(0), address(0), _MINIMUM_LIQUIDITY);\\n\\t}\\n\\n\\tfunction _transferTokens(address to, uint256 amount0Out, uint256 amount1Out, bytes calldata data) private returns (uint256, uint256)\\n\\t{\\n\\t\\trequire(address(to) != address(_token0) && to != address(_token1), \\\"EP: INVALID_TO\\\");\\n\\t\\tif (amount0Out > 0) SafeERC20.safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n\\t\\tif (amount1Out > 0) SafeERC20.safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n\\t\\tif (data.length > 0) IExofiswapCallee(to).exofiswapCall(_msgSender(), amount0Out, amount1Out, data);\\n\\t\\treturn (_token0.balanceOf(address(this)), _token1.balanceOf(address(this)));\\n\\t}\\n\\n\\t// if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\\n\\tfunction _mintFee(uint256 k) private returns (bool)\\n\\t{\\n\\t\\taddress feeTo = _factory.feeTo();\\n\\t\\tuint256 kLastHelp = _kLast; // gas savings\\n\\t\\tif (feeTo != address(0))\\n\\t\\t{\\n\\t\\t\\tif (kLastHelp != 0)\\n\\t\\t\\t{\\n\\t\\t\\t\\tuint256 rootK = MathUInt256.sqrt(k);\\n\\t\\t\\t\\tuint256 rootKLast = MathUInt256.sqrt(kLastHelp);\\n\\t\\t\\t\\tif (rootK > rootKLast)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tuint256 numerator = _totalSupply * MathUInt256.unsafeSub(rootK, rootKLast);\\n\\t\\t\\t\\t\\t// Since rootK is the sqrt of k. Multiplication by 5 can never overflow\\n\\t\\t\\t\\t\\tuint256 denominator = MathUInt256.unsafeMul(rootK, 5) + rootKLast;\\n\\t\\t\\t\\t\\tuint256 liquidity = MathUInt256.unsafeDiv(numerator, denominator);\\n\\t\\t\\t\\t\\tif (liquidity > 0)\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t_mint(feeTo, liquidity);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif(kLastHelp != 0)\\n\\t\\t{\\n\\t\\t\\t_kLast = 0;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// update reserves and, on the first call per block, price accumulators\\n\\tfunction _update(SwapAmount memory sa) private\\n\\t{\\n\\t\\trequire(sa.balance0 <= type(uint112).max, \\\"EP: OVERFLOW\\\");\\n\\t\\trequire(sa.balance1 <= type(uint112).max, \\\"EP: OVERFLOW\\\");\\n\\t\\t// solhint-disable-next-line not-rely-on-time\\n\\t\\tuint32 blockTimestamp = uint32(block.timestamp);\\n\\t\\tif (sa.reserve1 != 0)\\n\\t\\t{\\n\\t\\t\\tif (sa.reserve0 != 0)\\n\\t\\t\\t{\\t\\n\\t\\t\\t\\tuint32 timeElapsed = MathUInt32.unsafeSub32(blockTimestamp, _blockTimestampLast); // overflow is desired\\n\\t\\t\\t\\tif (timeElapsed > 0)\\n\\t\\t\\t\\t{\\t\\n\\t\\t\\t\\t\\t// * never overflows, and + overflow is desired\\n\\t\\t\\t\\t\\tunchecked\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t_price0CumulativeLast += (UQ144x112.uqdiv(UQ144x112.encode(sa.reserve1),sa.reserve0) * timeElapsed);\\n\\t\\t\\t\\t\\t\\t_price1CumulativeLast += (UQ144x112.uqdiv(UQ144x112.encode(sa.reserve0), sa.reserve1) * timeElapsed);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t_reserve0 = uint112(sa.balance0);\\n\\t\\t_reserve1 = uint112(sa.balance1);\\n\\t\\t_blockTimestampLast = blockTimestamp;\\n\\t\\temit Sync(_reserve0, _reserve1);\\n\\t}\\n\\n\\tfunction _getInAmounts(uint256 amount0Out, uint256 amount1Out, SwapAmount memory sa)\\n\\t\\tprivate pure returns(uint256, uint256)\\n\\t{\\n\\t\\tuint256 div0 = MathUInt256.unsafeSub(sa.reserve0, amount0Out);\\n\\t\\tuint256 div1 = MathUInt256.unsafeSub(sa.reserve1, amount1Out);\\n\\t\\treturn (sa.balance0 > div0 ? MathUInt256.unsafeSub(sa.balance0, div0) : 0, sa.balance1 > div1 ? MathUInt256.unsafeSub(sa.balance1, div1) : 0);\\n\\t}\\n}\\n\"\n    },\n    \"contracts/Exofiswap/ExofiswapERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@exoda/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./interfaces/IExofiswapERC20.sol\\\";\\n\\ncontract ExofiswapERC20 is ERC20, IExofiswapERC20\\n{\\n\\t// keccak256(\\\"permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\tbytes32 private constant _PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\tmapping(address => uint256) private _nonces;\\n\\n\\tconstructor(string memory tokenName) ERC20(tokenName, \\\"ENERGY\\\")\\n\\t{ } // solhint-disable-line no-empty-blocks\\n\\n\\t// The standard ERC-20 race condition for approvals applies to permit as well.\\n\\tfunction permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) override public\\n\\t{\\n\\t\\t// solhint-disable-next-line not-rely-on-time\\n\\t\\trequire(deadline >= block.timestamp, \\\"Exofiswap: EXPIRED\\\");\\n\\t\\tbytes32 digest = keccak256(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\\"\\\\x19\\\\x01\\\",\\n\\t\\t\\t\\tDOMAIN_SEPARATOR(),\\n\\t\\t\\t\\tkeccak256(\\n\\t\\t\\t\\t\\tabi.encode(\\n\\t\\t\\t\\t\\t\\t_PERMIT_TYPEHASH,\\n\\t\\t\\t\\t\\t\\towner,\\n\\t\\t\\t\\t\\t\\tspender,\\n\\t\\t\\t\\t\\t\\tvalue,\\n\\t\\t\\t\\t\\t\\t_nonces[owner]++,\\n\\t\\t\\t\\t\\t\\tdeadline\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t)\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\taddress recoveredAddress = ecrecover(digest, v, r, s);\\n\\t\\t// Since the ecrecover precompile fails silently and just returns the zero address as signer when given malformed messages,\\n\\t\\t// it is important to ensure owner != address(0) to avoid permit from creating an approval to spend “zombie funds”\\n\\t\\t// belong to the zero address.\\n\\t\\trequire(recoveredAddress != address(0) && recoveredAddress == owner, \\\"Exofiswap: INVALID_SIGNATURE\\\");\\n\\t\\t_approve(owner, spender, value);\\n\\t}\\n\\n\\t// solhint-disable-next-line func-name-mixedcase\\n\\tfunction DOMAIN_SEPARATOR() override public view returns(bytes32)\\n\\t{\\n\\t\\t// If the DOMAIN_SEPARATOR contains the chainId and is defined at contract deployment instead of reconstructed\\n\\t\\t// for every signature, there is a risk of possible replay attacks between chains in the event of a future chain split\\n\\t\\treturn keccak256(\\n\\t\\t\\tabi.encode(\\n\\t\\t\\t\\tkeccak256(\\n\\t\\t\\t\\t\\t\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n\\t\\t\\t\\t),\\n\\t\\t\\t\\tkeccak256(bytes(name())),\\n\\t\\t\\t\\tkeccak256(bytes(\\\"1\\\")),\\n\\t\\t\\t\\tblock.chainid,\\n\\t\\t\\t\\taddress(this)\\n\\t\\t\\t)\\n\\t\\t);\\n\\t}\\n\\n\\tfunction nonces(address owner) override public view returns (uint256)\\n\\t{\\n\\t\\treturn _nonces[owner];\\n\\t}\\n\\n\\tfunction PERMIT_TYPEHASH() override public pure returns (bytes32) //solhint-disable-line func-name-mixedcase\\n\\t{\\n\\t\\treturn _PERMIT_TYPEHASH;\\n\\t}\\n}\\n\"\n    },\n    \"contracts/Exofiswap/libraries/MathUInt32.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary MathUInt32\\n{\\n\\tfunction unsafeSub32(uint32 a, uint32 b) internal pure returns (uint32)\\n\\t{\\n\\t\\tunchecked\\n\\t\\t{\\n\\t\\t\\treturn a - b;\\n\\t\\t}\\n\\t}\\n}\"\n    },\n    \"contracts/Exofiswap/libraries/UQ144x112.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**144 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ144x112\\n{\\n\\tuint256 private constant _Q112 = 2**112;\\n\\n\\t// encode a uint112 as a UQ144x112\\n\\tfunction encode(uint112 y) internal pure returns (uint256)\\n\\t{\\n\\t\\tunchecked\\n\\t\\t{\\n\\t\\t\\treturn uint256(y) * _Q112; // never overflows\\n\\t\\t}\\n\\t}\\n\\n\\t// divide a UQ144x112 by a uint112, returning a UQ144x112\\n    function uqdiv(uint256 x, uint112 y) internal pure returns (uint256)\\n\\t{\\n        return x / uint256(y);\\n    }\\n}\"\n    },\n    \"contracts/mocks/ExofiswapERC20Mock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Exofiswap/ExofiswapERC20.sol\\\";\\n\\ncontract ExofiswapERC20Mock is ExofiswapERC20\\n{\\n\\tconstructor(string memory name, uint256 supply) ExofiswapERC20(name)\\n\\t{\\n\\t\\t_mint(msg.sender, supply);\\n\\t}\\n}\"\n    },\n    \"contracts/mocks/ERC20Mock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@exoda/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract ERC20Mock is ERC20\\n{\\n\\tconstructor(string memory name, string memory symbol, uint256 supply) ERC20(name, symbol)\\n\\t{\\n\\t\\t_mint(msg.sender, supply);\\n\\t}\\n}\"\n    },\n    \"contracts/Planet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@exoda/contracts/access/Ownable.sol\\\";\\nimport \\\"@exoda/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@exoda/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IPlanet.sol\\\";\\n\\ncontract Planet is Ownable, ERC20, IPlanet\\n{\\n\\tIERC20Metadata private immutable _token;\\n\\n\\tconstructor(IERC20Metadata tokenInit) ERC20(\\\"Planet\\\", \\\"GRAVITY\\\") Ownable()\\n\\t{\\n\\t\\t_token = tokenInit;\\n\\t}\\n\\n\\t// Locks Tokens and mints PlanetTokens.\\n\\tfunction enter(uint256 amount, address to) override external onlyOwner\\n\\t{\\n\\t\\t// Mint PlanetToken at 1:1 ratio\\n\\t\\t_mint(to, amount);\\n\\t\\t// Lock Token in the contract\\n\\t\\tSafeERC20.safeTransferFrom(_token, _msgSender(), address(this), amount);\\n\\t\\temit Enter(_msgSender(), amount, to);\\n\\t}\\n\\n\\t// this low-level function should be called from a contract which performs important safety checks\\n\\tfunction leave(uint256 amount, address to) override external onlyOwner\\n\\t{\\n\\t\\t// Burn PlanetToken at 1:1 ratio\\n\\t\\t_burn(_msgSender(), amount);\\n\\t\\t// Transfer Token\\n\\t\\tSafeERC20.safeTransfer(_token, to, amount);\\n\\t\\temit Leave(_msgSender(), amount, to);\\n\\t}\\n\\n\\tfunction token() override external view returns (IERC20Metadata)\\n\\t{\\n\\t\\treturn _token;\\n\\t}\\n\\n\\tfunction name() override(ERC20, IERC20Metadata) public view virtual returns (string memory)\\n\\t{\\n\\t\\treturn string(abi.encodePacked(super.name(), \\\" \\\", _token.symbol()));\\n\\t}\\n}\\n\"\n    },\n    \"contracts/FermionReactor.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@exoda/contracts/access/Ownable.sol\\\";\\nimport \\\"@exoda/contracts/interfaces/token/ERC20/IERC20.sol\\\";\\nimport \\\"@exoda/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IFermionReactor.sol\\\";\\nimport \\\"./interfaces/IFermion.sol\\\";\\n\\ncontract FermionReactor is IFermionReactor, Ownable\\n{\\n\\tuint256 private immutable _lowerLimit;\\n\\tuint256 private immutable _upperLimit;\\n\\tuint256 private immutable _rate;\\n\\tIFermion private immutable _fermion;\\n\\tbool private _active;\\n\\n\\tconstructor(uint256 lowerLimit, uint256 upperLimit, IFermion fermion, uint256 rate) Ownable()\\n\\t{\\n\\t\\trequire(rate > 0, \\\"FR: Rate < 0\\\");\\n\\t\\trequire(upperLimit > lowerLimit, \\\"FR: upperLimit <= lowerLimit\\\");\\n\\t\\t_lowerLimit = lowerLimit;\\n\\t\\t_upperLimit = upperLimit;\\n\\t\\t_rate = rate;\\n\\t\\t_fermion = fermion;\\n\\t\\t_active = true;\\n\\t}\\n\\n\\tfunction buyFermion() override external payable\\n\\t{\\n\\t\\trequire(_active, \\\"FR: Contract is not active\\\");\\n\\t\\tuint256 amountETH = msg.value;\\n\\t\\trequire(amountETH >= _lowerLimit, \\\"FR: Insufficient ETH\\\");\\n\\t\\trequire(amountETH <= _upperLimit, \\\"FR: ETH exceeds upper Limit\\\");\\n\\t\\t// Get available Fermions\\n\\t\\tuint256 fAvailable = _fermion.balanceOf(address(this));\\n\\t\\t// Calculate Fermion Amount\\n\\t\\tuint256 fAmount = amountETH * _rate;\\n\\t\\t// Check if enought Fermions\\n\\t\\tif(fAvailable < fAmount)\\n\\t\\t{\\n\\t\\t\\tunchecked\\n\\t\\t\\t{\\n\\t\\t\\t\\t// If not enouth use max possible amount of Fermions and refund unused eth\\n\\t\\t\\t\\tfAmount = fAvailable;\\n\\t\\t\\t\\tamountETH = fAmount / _rate;\\n\\t\\t\\t\\t// refund unused eth\\n\\t\\t\\t\\t_safeTransferETH(_msgSender(), (msg.value - amountETH));\\n\\t\\t\\t\\t_active = false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Transfer ETH to owner\\n\\t\\t_safeTransferETH(owner(), amountETH);\\n\\t\\t// Transfer Fermions to caller\\n\\t\\tSafeERC20.safeTransfer(_fermion, _msgSender(), fAmount);\\n\\t\\temit Buy(_msgSender(), amountETH, fAmount);\\n\\t}\\n\\n\\tfunction disable() override external onlyOwner\\n\\t{\\n\\t\\t_active = false;\\n\\t\\tuint256 fAvailable = _fermion.balanceOf(address(this));\\n\\t\\tSafeERC20.safeTransfer(_fermion, owner(), fAvailable);\\n\\t}\\n\\n\\tfunction transferOtherERC20Token(IERC20 token) override external onlyOwner returns (bool)\\n\\t{\\n\\t\\trequire(token != _fermion, \\\"FR: Fermion can not be removed.\\\");\\n\\t\\treturn token.transfer(owner(), token.balanceOf(address(this)));\\n\\t}\\n\\n\\tfunction getFermionAddress() override external view returns(IFermion)\\n\\t{\\n\\t\\treturn _fermion;\\n\\t}\\n\\n\\tfunction getLowerEthLimit() override external view returns(uint256)\\n\\t{\\n\\t\\treturn _lowerLimit;\\n\\t}\\n\\n\\tfunction getRate() override external view returns(uint256)\\n\\t{\\n\\t\\treturn _rate;\\n\\t}\\n\\n\\tfunction getUpperEthLimit() override external view returns(uint256)\\n\\t{\\n\\t\\treturn _upperLimit;\\n\\t}\\n\\n\\tfunction isActive() override external view returns(bool)\\n\\t{\\n\\t\\treturn _active;\\n\\t}\\n\\n\\tfunction _safeTransferETH(address to, uint256 value) private\\n\\t{\\n\\t\\t// solhint-disable-next-line avoid-low-level-calls\\n\\t\\t(bool success, ) = to.call{value: value}(new bytes(0));\\n\\t\\trequire(success, \\\"FR: ETH transfer failed\\\");\\n\\t}\\n}\"\n    },\n    \"contracts/interfaces/IFermionReactor.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@exoda/contracts/interfaces/access/IOwnable.sol\\\";\\nimport \\\"@exoda/contracts/interfaces/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IFermion.sol\\\";\\nimport \\\"./IMagneticFieldGenerator.sol\\\";\\n\\ninterface IFermionReactor is IOwnable\\n{\\n\\tevent Buy(address indexed user, uint256 ethAmount, uint256 fermionAmount);\\n\\n\\tfunction buyFermion() external payable;\\n\\t\\n\\tfunction disable() external;\\n\\tfunction transferOtherERC20Token(IERC20 token) external returns(bool);\\n\\n\\tfunction getFermionAddress() external view returns(IFermion);\\n\\tfunction getLowerEthLimit() external view returns(uint256);\\n\\tfunction getRate() external view returns(uint256);\\n\\tfunction getUpperEthLimit() external view returns(uint256);\\n\\tfunction isActive() external view returns(bool);\\n}\"\n    },\n    \"contracts/FerMigrator.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IMigratorDevice.sol\\\";\\nimport \\\"./Planet.sol\\\";\\n\\ncontract FerMigrator is IMigratorDevice\\n{\\n\\taddress private immutable _beneficiary;\\n\\taddress private immutable _planet;\\n\\tconstructor(address beneficiaryAddress, address planet)\\n\\t{\\n\\t\\t_beneficiary = beneficiaryAddress;\\n\\t\\t_planet = planet;\\n\\t}\\n\\n\\tfunction migrate(IERC20 src) override public returns (address)\\n\\t{\\n\\t\\trequire(address(src) == address(0x7d5e85d281CE6E93C6D17b4887e58242A23703c3), \\\"FerMigrator: Not Fermion token\\\");\\n\\t\\tuint256 bal = src.balanceOf(msg.sender);\\n\\t\\tsrc.transferFrom(msg.sender, address(this), bal);\\n\\t\\tsrc.approve(address(_planet), bal);\\n\\t\\tPlanet(_planet).enter(bal, _beneficiary);\\n\\t\\treturn _planet;\\n\\t}\\n\\n\\tfunction beneficiary() override public view returns(address)\\n\\t{\\n\\t\\treturn _beneficiary;\\n\\t}\\n}\"\n    },\n    \"contracts/UniMigrator.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IMigratorDevice.sol\\\";\\nimport \\\"./FakeERC20.sol\\\";\\n\\ncontract UniMigrator is IMigratorDevice\\n{\\n\\taddress private immutable _beneficiary;\\n\\n\\tconstructor(address beneficiaryAddress)\\n\\t{\\n\\t\\t_beneficiary = beneficiaryAddress;\\n\\t}\\n\\n\\tfunction migrate(IERC20 src) override public returns (address)\\n\\t{\\n\\t\\trequire(address(src) == address(0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984), \\\"UniMigrator: Not uni token\\\");\\n\\t\\tuint256 bal = src.balanceOf(msg.sender);\\n\\t\\tsrc.transferFrom(msg.sender, _beneficiary, bal);\\n\\t\\treturn address(new FakeERC20(bal));\\n\\t}\\n\\n\\tfunction beneficiary() override public view returns(address)\\n\\t{\\n\\t\\treturn _beneficiary;\\n\\t}\\n}\"\n    },\n    \"contracts/FakeERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IFakeERC20.sol\\\";\\n\\ncontract FakeERC20 is IFakeERC20\\n{\\n\\tuint256 public amount;\\n\\n\\tconstructor(uint256 initialAmount)\\n\\t{\\n\\t\\tamount = initialAmount;\\n\\t}\\n\\n\\tfunction balanceOf(address) override public view returns (uint256)\\n\\t{\\n\\t\\treturn amount;\\n\\t}\\n}\"\n    },\n    \"contracts/interfaces/IFakeERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IFakeERC20\\n{\\n\\tfunction balanceOf(address) external view returns (uint256);\\n}\"\n    },\n    \"contracts/mocks/UniMigratorMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IMigratorDevice.sol\\\";\\nimport \\\"../FakeERC20.sol\\\";\\n\\ncontract UniMigratorMock is IMigratorDevice\\n{\\n\\taddress private _beneficiary;\\n\\taddress private _testToken;\\n\\n\\tconstructor(address beneficiaryAddress, address testToken)\\n\\t{\\n\\t\\t_beneficiary = beneficiaryAddress;\\n\\t\\t_testToken = testToken;\\n\\t}\\n\\n\\tfunction migrate(IERC20 src) override public returns (address)\\n\\t{\\n\\t\\trequire(address(src) == _testToken, \\\"UniMigratorMock: Not correct token\\\"); //solhint-disable-line reason-string\\n\\t\\tuint256 bal = src.balanceOf(msg.sender);\\n\\t\\tsrc.transferFrom(msg.sender, _beneficiary, bal);\\n\\t\\treturn address(new FakeERC20(bal));\\n\\t}\\n\\n\\tfunction beneficiary() override public view returns(address)\\n\\t{\\n\\t\\treturn _beneficiary;\\n\\t}\\n}\"\n    },\n    \"contracts/Exofiswap/ExofiswapFactory.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@exoda/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IExofiswapFactory.sol\\\";\\nimport \\\"./interfaces/IExofiswapPair.sol\\\";\\nimport \\\"./ExofiswapPair.sol\\\";\\n\\ncontract ExofiswapFactory is IExofiswapFactory, Ownable\\n{\\n\\taddress private _feeTo;\\n\\tIMigrator private _migrator;\\n\\tmapping(IERC20Metadata => mapping(IERC20Metadata => IExofiswapPair)) private _getPair;\\n\\tIExofiswapPair[] private _allPairs;\\n\\n\\tconstructor()\\n\\t{} // solhint-disable-line no-empty-blocks\\n\\n\\tfunction createPair(IERC20Metadata tokenA, IERC20Metadata tokenB) override public returns (IExofiswapPair)\\n\\t{\\n\\t\\trequire(tokenA != tokenB, \\\"EF: IDENTICAL_ADDRESSES\\\");\\n\\t\\t(IERC20Metadata token0, IERC20Metadata token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n\\t\\trequire(address(token0) != address(0), \\\"EF: ZERO_ADDRESS\\\");\\n\\t\\trequire(address(_getPair[token0][token1]) == address(0), \\\"EF: PAIR_EXISTS\\\"); // single check is sufficient\\n\\n\\t\\tbytes32 salt = keccak256(abi.encodePacked(token0, token1));\\n\\t\\tIExofiswapPair pair = new ExofiswapPair{salt: salt}(); // Use create2\\n\\t\\tpair.initialize(token0, token1);\\n\\n\\t\\t_getPair[token0][token1] = pair;\\n\\t\\t_getPair[token1][token0] = pair; // populate mapping in the reverse direction\\n\\t\\t_allPairs.push(pair);\\n\\t\\temit PairCreated(token0, token1, pair, _allPairs.length);\\n\\t\\treturn pair;\\n\\t}\\n\\n\\tfunction setFeeTo(address newFeeTo) override public onlyOwner\\n\\t{\\n\\t\\t_feeTo = newFeeTo;\\n\\t}\\n\\n\\tfunction setMigrator(IMigrator newMigrator) override public onlyOwner\\n\\t{\\n\\t\\t_migrator = newMigrator;\\n\\t}\\n\\n\\tfunction allPairs(uint256 index) override public view returns (IExofiswapPair)\\n\\t{\\n\\t\\treturn _allPairs[index];\\n\\t}\\n\\n\\tfunction allPairsLength() override public view returns (uint256)\\n\\t{\\n\\t\\treturn _allPairs.length;\\n\\t}\\n\\n\\tfunction feeTo() override public view returns (address)\\n\\t{\\n\\t\\treturn _feeTo;\\n\\t}\\n\\n\\tfunction getPair(IERC20Metadata tokenA, IERC20Metadata tokenB) override public view returns (IExofiswapPair)\\n\\t{\\n\\t\\treturn _getPair[tokenA][tokenB];\\n\\t}\\n\\n\\tfunction migrator() override public view returns (IMigrator)\\n\\t{\\n\\t\\treturn _migrator;\\n\\t}\\n\\n\\tfunction pairCodeHash() override public pure returns (bytes32)\\n\\t{\\n\\t\\treturn keccak256(type(ExofiswapPair).creationCode);\\n\\t}\\n}\\n\"\n    },\n    \"contracts/Fermion.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@exoda/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@exoda/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IFermion.sol\\\";\\n\\n/**\\n* @dev Implementation of the {IFermion} interface.\\n*/\\ncontract Fermion is Ownable, ERC20Burnable, IFermion\\n{\\n\\tuint256 private constant _MAX_SUPPLY = (1000000000 * (10**18));\\n\\n\\tconstructor() ERC20Burnable(\\\"Fermion\\\", \\\"EXOFI\\\")\\n\\t{\\n\\t\\t_mint(owner(), (_MAX_SUPPLY * 4) / 10); // 40%\\n\\t}\\n\\n\\t/// @notice Creates `amount` token to `to`. Must only be called by the owner (MagneticFieldGenerator).\\n\\tfunction mint(address to, uint256 amount) override public onlyOwner\\n\\t{\\n\\t\\trequire(totalSupply() < _MAX_SUPPLY, \\\"Fermion: Max supply reached\\\");\\n\\t\\t_mint(to, amount);\\n\\t}\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 500000,\n      \"details\": {\n        \"orderLiterals\": true,\n        \"deduplicate\": true,\n        \"cse\": true,\n        \"constantOptimizer\": true\n      }\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "f508043b74f4b393b3cbf875a292de29",
      "transactionHash": "0xee42f84b1aaab4360000b92406187c7be7773ee7311714687cdfce2260d2ee13",
      "args": []
    },
    "decoded": {
      "from": "0x80b2cAb47FbD1570E5b0241eC90640321d286B2A",
      "gasPrice": "4000000000",
      "gasLimit": "901292",
      "to": null,
      "value": "0",
      "nonce": 68,
      "data": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610ef68061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80638da5cb5b116100505780638da5cb5b146100ba578063baaf2d4f146100e2578063f2fde38b1461010557600080fd5b806335b7163f146100775780634f8072d01461008c578063715018a6146100b2575b600080fd5b61008a610085366004610a60565b610118565b005b61009f61009a366004610a60565b610571565b6040519081526020015b60405180910390f35b61008a6106f8565b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100a9565b6100f56100f0366004610afd565b610785565b60405190151581526020016100a9565b61008a610113366004610b29565b6108e1565b60005473ffffffffffffffffffffffffffffffffffffffff16331461019e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b808060005b84811015610500578585828181106101bd576101bd610b4d565b90506020028101906101cf9190610b7c565b6101dd906020810190610bba565b60008181106101ee576101ee610b4d565b90506020020160208101906102039190610b29565b73ffffffffffffffffffffffffffffffffffffffff1663095ea7b387878481811061023057610230610b4d565b90506020028101906102429190610b7c565b610250906020810190610b29565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602481018590526044016020604051808303816000875af11580156102c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e69190610c29565b508585828181106102f9576102f9610b4d565b905060200281019061030b9190610b7c565b610319906020810190610b29565b73ffffffffffffffffffffffffffffffffffffffff16635c11d79583600189898681811061034957610349610b4d565b905060200281019061035b9190610b7c565b610369906020810190610bba565b306103764261012c610c7a565b6040518763ffffffff1660e01b815260040161039796959493929190610ce3565b600060405180830381600087803b1580156103b157600080fd5b505af11580156103c5573d6000803e3d6000fd5b505050508585828181106103db576103db610b4d565b90506020028101906103ed9190610b7c565b6103fb906020810190610bba565b600188888581811061040f5761040f610b4d565b90506020028101906104219190610b7c565b61042f906020810190610bba565b61043a929150610d2e565b81811061044957610449610b4d565b905060200201602081019061045e9190610b29565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff91909116906370a0823190602401602060405180830381865afa1580156104ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ee9190610d41565b91506104f981610d5a565b90506101a3565b5081811161056a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f54726164652052657665727465642c204e6f2050726f666974204d61646500006044820152606401610195565b5050505050565b600081815b848110156106ef57600086868381811061059257610592610b4d565b90506020028101906105a49190610b7c565b6105b2906020810190610b29565b73ffffffffffffffffffffffffffffffffffffffff1663d06ca61f848989868181106105e0576105e0610b4d565b90506020028101906105f29190610b7c565b610600906020810190610bba565b6040518463ffffffff1660e01b815260040161061e93929190610d92565b600060405180830381865afa15801561063b573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526106819190810190610de4565b905080600188888581811061069857610698610b4d565b90506020028101906106aa9190610b7c565b6106b8906020810190610bba565b6106c3929150610d2e565b815181106106d3576106d3610b4d565b6020026020010151925050806106e890610d5a565b9050610576565b50949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610779576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610195565b61078360006109eb565b565b6000805473ffffffffffffffffffffffffffffffffffffffff163314610807576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610195565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb61084260005473ffffffffffffffffffffffffffffffffffffffff1690565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602481018590526044016020604051808303816000875af11580156108b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d89190610c29565b90505b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610962576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610195565b73ffffffffffffffffffffffffffffffffffffffff81166109df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a206e6577206f776e657220697320616464726573732830296044820152606401610195565b6109e8816109eb565b50565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600060408486031215610a7557600080fd5b833567ffffffffffffffff80821115610a8d57600080fd5b818601915086601f830112610aa157600080fd5b813581811115610ab057600080fd5b8760208260051b8501011115610ac557600080fd5b6020928301989097509590910135949350505050565b73ffffffffffffffffffffffffffffffffffffffff811681146109e857600080fd5b60008060408385031215610b1057600080fd5b8235610b1b81610adb565b946020939093013593505050565b600060208284031215610b3b57600080fd5b8135610b4681610adb565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1833603018112610bb057600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610bef57600080fd5b83018035915067ffffffffffffffff821115610c0a57600080fd5b6020019150600581901b3603821315610c2257600080fd5b9250929050565b600060208284031215610c3b57600080fd5b81518015158114610b4657600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156108db576108db610c4b565b8183526000602080850194508260005b85811015610cd8578135610cb081610adb565b73ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101610c9d565b509495945050505050565b86815285602082015260a060408201526000610d0360a083018688610c8d565b73ffffffffffffffffffffffffffffffffffffffff9490941660608301525060800152949350505050565b818103818111156108db576108db610c4b565b600060208284031215610d5357600080fd5b5051919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d8b57610d8b610c4b565b5060010190565b838152604060208201526000610dac604083018486610c8d565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020808385031215610df757600080fd5b825167ffffffffffffffff80821115610e0f57600080fd5b818501915085601f830112610e2357600080fd5b815181811115610e3557610e35610db5565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108582111715610e7857610e78610db5565b604052918252848201925083810185019188831115610e9657600080fd5b938501935b82851015610eb457845184529385019392850192610e9b565b9897505050505050505056fea264697066735822122017a0bfb0a7a59551af46dd19d372a3956b7624e5ddd805d5fb26e317fe8754f064736f6c63430008110033",
      "r": "0x060541ec827c6ebe0178dc55111af0494f90cad1ddf1865da987d160094092d0",
      "s": "0x56f7d4b2a22dbbd44b8823121c001151731af241eea904c626f901fc425127b4",
      "v": 37,
      "chainId": 1
    }
  }
}
{
  "language": "Solidity",
  "sources": {
    "@exoda/contracts/interfaces/access/IOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @title Ownable interface.\n/// @author Ing. Michael Goldfinger\n/// @notice This interface contains all visible functions and events for the Ownable contract module.\ninterface IOwnable\n{\n\t/// @notice Emitted when ownership is moved from one address to another.\n\t/// @param previousOwner (indexed) The owner of the contract until now.\n\t/// @param newOwner (indexed) The new owner of the contract.\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\t/**\n\t * @notice Leaves the contract without an owner. It will not be possible to call {onlyOwner} functions anymore.\n\t *\n\t * NOTE: Renouncing ownership will leave the contract without an owner,\n\t * thereby removing any functionality that is only available to the owner.\n\t *\n\t * Emits an [`OwnershipTransferred`](#ownershiptransferred) event indicating the renounced ownership.\n\t *\n\t * Requirements:\n\t * - Can only be called by the current owner.\n\t * \n\t * @dev Sets the zero address as the new contract owner.\n\t */\n\tfunction renounceOwnership() external;\n\n\t/**\n\t * @notice Transfers ownership of the contract to a new address.\n\t *\n\t * Emits an [`OwnershipTransferred`](#ownershiptransferred) event indicating the transfered ownership.\n\t *\n\t * Requirements:\n\t * - Can only be called by the current owner.\n\t *\n\t * @param newOwner The new owner of the contract.\n\t */\n\tfunction transferOwnership(address newOwner) external;\n\n\t/// @notice Returns the current owner.\n\t/// @return The current owner.\n\tfunction owner() external view returns (address);\n}"
    },
    "@exoda/contracts/interfaces/token/ERC20/extensions/IERC20AltApprove.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @title ERC20Metadata interface.\n/// @author Ing. Michael Goldfinger\n/// @notice Interface for an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.\n/// @dev This is not part of the ERC20 specification.\ninterface IERC20AltApprove\n{\n\t/**\n\t* @notice Atomically decreases the allowance granted to `spender` by the caller.\n\t*\n\t* This is an alternative to {approve} that can be used as a mitigation for\n\t* problems described in {IERC20-approve}.\n\t*\n\t* Emits an {Approval} event indicating the updated allowance.\n\t*\n\t* Requirements:\n\t*\n\t* - `spender` cannot be the zero address.\n\t* - `spender` must have allowance for the caller of at least\n\t* `subtractedValue`.\n\t*/\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\n\n\t/**\n\t* @notice Atomically increases the allowance granted to `spender` by the caller.\n\t*\n\t* This is an alternative to {approve} that can be used as a mitigation for\n\t* problems described in {IERC20-approve}.\n\t*\n\t* Emits an {Approval} event indicating the updated allowance.\n\t*\n\t* Requirements:\n\t*\n\t* - `spender` cannot be the zero address.\n\t*/\n\tfunction increaseAllowance(address spender, uint256 addedValue) external returns (bool);\n}\n"
    },
    "@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport { IERC20 } from \"../IERC20.sol\";\n\n/// @title ERC20Metadata interface.\n/// @author Ing. Michael Goldfinger\n/// @notice Interface for the optional metadata functions from the ERC20 standard.\ninterface IERC20Metadata is IERC20\n{\n\t/// @notice Returns the name of the token.\n\t/// @return The token name.\n\tfunction name() external view returns (string memory);\n\n\t/// @notice Returns the symbol of the token.\n\t/// @return The symbol for the token.\n\tfunction symbol() external view returns (string memory);\n\n\t/// @notice Returns the decimals of the token.\n\t/// @return The decimals for the token.\n\tfunction decimals() external pure returns (uint8);\n}\n"
    },
    "@exoda/contracts/interfaces/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @title ERC20 interface.\n * @author Ing. Michael Goldfinger\n * @notice Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20\n{\n\t/**\n\t * @notice Emitted when the allowance of a {spender} for an {owner} is set to a new value.\n\t *\n\t * NOTE: {value} may be zero.\n\t * @param owner (indexed) The owner of the tokens.\n\t * @param spender (indexed) The spender for the tokens.\n\t * @param value The amount of tokens that got an allowance.\n\t */\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n\n\t/**\n\t * @notice Emitted when {value} tokens are moved from one address {from} to another {to}.\n\t *\n\t * NOTE: {value} may be zero.\n\t * @param from (indexed) The origin of the transfer.\n\t * @param to (indexed) The target of the transfer.\n\t * @param value The amount of tokens that got transfered.\n\t */\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n\t/**\n\t* @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n\t*\n\t* Returns a boolean value indicating whether the operation succeeded.\n\t*\n\t* IMPORTANT: Beware that changing an allowance with this method brings the risk\n\t* that someone may use both the old and the new allowance by unfortunate\n\t* transaction ordering. One possible solution to mitigate this race\n\t* condition is to first reduce the spender's allowance to 0 and set the\n\t* desired value afterwards:\n\t* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\t*\n\t* Emits an {Approval} event.\n\t*/\n\tfunction approve(address spender, uint256 amount) external returns (bool);\n\n\t/**\n\t* @dev Moves `amount` tokens from the caller's account to `to`.\n\t*\n\t* Returns a boolean value indicating whether the operation succeeded.\n\t*\n\t* Emits a {Transfer} event.\n\t*/\n\tfunction transfer(address to, uint256 amount) external returns (bool);\n\n\t/**\n\t* @dev Moves `amount` tokens from `from` to `to` using the allowance mechanism.\n\t* `amount` is then deducted from the caller's allowance.\n\t*\n\t* Returns a boolean value indicating whether the operation succeeded.\n\t*\n\t* Emits a {Transfer} event.\n\t*/\n\tfunction transferFrom(address from, address to, uint256 amount) external returns (bool);\n\n\t/**\n\t* @dev Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}.\n\t* This is zero by default.\n\t*\n\t* This value changes when {approve}, {increaseAllowance}, {decreseAllowance} or {transferFrom} are called.\n\t*/\n\tfunction allowance(address owner, address spender) external view returns (uint256);\n\n\t/**\n\t* @dev Returns the amount of tokens owned by `account`.\n\t*/\n\tfunction balanceOf(address account) external view returns (uint256);\n\n\t/**\n\t* @dev Returns the amount of tokens in existence.\n\t*/\n\tfunction totalSupply() external view returns (uint256);\n}\n"
    },
    "@exoda/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport { IERC20 } from \"../../../interfaces/token/ERC20/IERC20.sol\";\nimport { Address } from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20\n{\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal\n    {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal\n    {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal\n    {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // uint256 allowance = _callReturnUint256(token, abi.encodeWithSelector(token.allowance.selector, address(this), spender));\n        // require((value == 0) || (allowance == 0), \"SafeERC20: exploitable approve\");\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \"SafeERC20: exploitable approve\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal\n    {\n        // uint256 newAllowance = _callReturnUint256(token, abi.encodeWithSelector(token.allowance.selector, address(this), spender)) + value;\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal\n    {\n        unchecked\n        {\n            // uint256 oldAllowance = _callReturnUint256(token, abi.encodeWithSelector(token.allowance.selector, address(this), spender));\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: reduced allowance <0\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private\n    {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0)\n        {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 call failed\");\n        }\n    }\n}\n"
    },
    "@exoda/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address\n{\n    /* solhint-disable max-line-length */\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n     /* solhint-enable max-line-length */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory)\n    {\n        return functionCallWithValue(target, data, 0, \"Address: call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory)\n    {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory)\n    {\n        return functionCallWithValue(target, data, value, \"Address: call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory)\n    {\n        require(address(this).balance >= value, \"Address: balance to low for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) internal pure returns (bytes memory)\n    {\n        if (success)\n        {\n            return returndata;\n        } else\n        {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly\n                {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            }\n            else\n            {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@exoda/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n* @notice Provides information about the current execution context, including the\n* sender of the transaction and its data. While these are generally available\n* via msg.sender and msg.data, they should not be accessed in such a direct\n* manner, since when dealing with meta-transactions the account sending and\n* paying for execution may not be the actual sender (as far as an application\n* is concerned).\n*\n* This contract is only required for intermediate, library-like contracts.\n*/\nabstract contract Context\n{\n\t/// @notice returns the sender of the transaction.\n\t/// @return The sender of the transaction.\n\tfunction _msgSender() internal view virtual returns (address)\n\t{\n\t\treturn msg.sender;\n\t}\n\n\t/// @notice returns the data of the transaction.\n\t/// @return The data of the transaction.\n\tfunction _msgData() internal view virtual returns (bytes calldata)\n\t{\n\t\treturn msg.data;\n\t}\n}\n"
    },
    "contracts/Exofiswap/ExofiswapRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@exoda/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@exoda/contracts/utils/Context.sol\";\nimport \"./libraries/ExofiswapLibrary.sol\";\nimport \"./libraries/MathUInt256.sol\";\nimport \"./interfaces/IExofiswapFactory.sol\";\nimport \"./interfaces/IExofiswapPair.sol\";\nimport \"./interfaces/IExofiswapRouter.sol\";\nimport \"./interfaces/IWETH9.sol\";\n\ncontract ExofiswapRouter is IExofiswapRouter, Context\n{\n\tIExofiswapFactory private immutable _swapFactory;\n\tIWETH9 private immutable _wrappedEth;\n\n\tmodifier ensure(uint256 deadline) {\n\t\trequire(deadline >= block.timestamp, \"ER: EXPIRED\"); // solhint-disable-line not-rely-on-time\n\t\t_;\n\t}\n\n\tconstructor(IExofiswapFactory swapFactory, IWETH9 wrappedEth)\n\t{\n\t\t_swapFactory = swapFactory;\n\t\t_wrappedEth = wrappedEth;\n\t}\n\n\treceive() override external payable\n\t{\n\t\tassert(_msgSender() == address(_wrappedEth)); // only accept ETH via fallback from the WETH contract\n\t}\n\n\tfunction addLiquidityETH(\n\t\tIERC20Metadata token,\n\t\tuint256 amountTokenDesired,\n\t\tuint256 amountTokenMin,\n\t\tuint256 amountETHMin,\n\t\taddress to,\n\t\tuint256 deadline\n\t) override external virtual payable ensure(deadline) returns (uint256 amountToken, uint256 amountETH, uint256 liquidity)\n\t{\n\t\tIExofiswapPair pair;\n\t\t(amountToken, amountETH, pair) = _addLiquidity(\n\t\t\ttoken,\n\t\t\t_wrappedEth,\n\t\t\tamountTokenDesired,\n\t\t\tmsg.value,\n\t\t\tamountTokenMin,\n\t\t\tamountETHMin\n\t\t);\n\t\tSafeERC20.safeTransferFrom(token, _msgSender(), address(pair), amountToken);\n\t\t_wrappedEth.deposit{value: amountETH}();\n\t\tassert(_wrappedEth.transfer(address(pair), amountETH));\n\t\tliquidity = pair.mint(to);\n\t\t// refund dust eth, if any\n\t\tif (msg.value > amountETH) ExofiswapLibrary.safeTransferETH(_msgSender(), MathUInt256.unsafeSub(msg.value, amountETH));\n\t}\n\n\tfunction addLiquidity(\n\t\tIERC20Metadata tokenA,\n\t\tIERC20Metadata tokenB,\n\t\tuint256 amountADesired,\n\t\tuint256 amountBDesired,\n\t\tuint256 amountAMin,\n\t\tuint256 amountBMin,\n\t\taddress to,\n\t\tuint256 deadline\n\t) override external virtual ensure(deadline) returns (uint256 amountA, uint256 amountB, uint256 liquidity)\n\t{\n\t\tIExofiswapPair pair;\n\t\t(amountA, amountB, pair) = _addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);\n\t\t_safeTransferFrom(tokenA, tokenB, address(pair), amountA, amountB);\n\t\tliquidity = pair.mint(to);\n\t}\n\n\tfunction removeLiquidity(\n\t\tIERC20Metadata tokenA,\n\t\tIERC20Metadata tokenB,\n\t\tuint256 liquidity,\n\t\tuint256 amountAMin,\n\t\tuint256 amountBMin,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external virtual override ensure(deadline) returns (uint256, uint256)\n\t{\n\t\tIExofiswapPair pair = ExofiswapLibrary.pairFor(_swapFactory, tokenA, tokenB);\n\t\treturn _removeLiquidity(pair, tokenB < tokenA, liquidity, amountAMin, amountBMin, to);\n\t}\n\n\tfunction removeLiquidityETH(\n\t\tIERC20Metadata token,\n\t\tuint256 liquidity,\n\t\tuint256 amountTokenMin,\n\t\tuint256 amountETHMin,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external override virtual ensure(deadline) returns (uint256 amountToken, uint256 amountETH)\n\t{\n\t\tIExofiswapPair pair = ExofiswapLibrary.pairFor(_swapFactory, token, _wrappedEth);\n\t\t(amountToken, amountETH) = _removeLiquidity(pair, _wrappedEth < token, liquidity, amountTokenMin, amountETHMin, address(this));\n\t\tSafeERC20.safeTransfer(token, to, amountToken);\n\t\t_wrappedEth.withdraw(amountETH);\n\t\tExofiswapLibrary.safeTransferETH(to, amountETH);\n\t}\n\n\tfunction removeLiquidityETHSupportingFeeOnTransferTokens(\n\t\tIERC20Metadata token,\n\t\tuint256 liquidity,\n\t\tuint256 amountTokenMin,\n\t\tuint256 amountETHMin,\n\t\taddress to,\n\t\tuint256 deadline\n\t) override external virtual ensure(deadline) returns (uint256 amountETH)\n\t{\n\t\tIExofiswapPair pair = ExofiswapLibrary.pairFor(_swapFactory, token, _wrappedEth);\n\t\t(, amountETH) = _removeLiquidity(pair, _wrappedEth < token, liquidity, amountTokenMin, amountETHMin, address(this));\n\t\tSafeERC20.safeTransfer(token, to, token.balanceOf(address(this)));\n\t\t_wrappedEth.withdraw(amountETH);\n\t\tExofiswapLibrary.safeTransferETH(to, amountETH);\n\t}\n\n\tfunction removeLiquidityETHWithPermit(\n\t\tIERC20Metadata token,\n\t\tuint256 liquidity,\n\t\tuint256 amountTokenMin,\n\t\tuint256 amountETHMin,\n\t\taddress to,\n\t\tuint256 deadline,\n\t\tbool approveMax, uint8 v, bytes32 r, bytes32 s\n\t) external override virtual returns (uint256 amountToken, uint256 amountETH)\n\t{\n\t\tIExofiswapPair pair = ExofiswapLibrary.pairFor(_swapFactory, token, _wrappedEth);\n\t\t{\n\t\t\tuint256 value = approveMax ? type(uint256).max : liquidity;\n\t\t\tpair.permit(_msgSender(), address(this), value, deadline, v, r, s); // ensure(deadline) happens here\n\t\t}\n\t\t(amountToken, amountETH) = _removeLiquidity(pair, _wrappedEth < token, liquidity, amountTokenMin, amountETHMin, address(this));\n\t\tSafeERC20.safeTransfer(token, to, amountToken);\n\t\t_wrappedEth.withdraw(amountETH);\n\t\tExofiswapLibrary.safeTransferETH(to, amountETH);\n\t}\n\n\tfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n\t\tIERC20Metadata token,\n\t\tuint256 liquidity,\n\t\tuint256 amountTokenMin,\n\t\tuint256 amountETHMin,\n\t\taddress to,\n\t\tuint256 deadline,\n\t\tbool approveMax,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t) override external virtual returns (uint256 amountETH)\n\t{\n\t\t{\n\t\t\tIExofiswapPair pair = ExofiswapLibrary.pairFor(_swapFactory, token, _wrappedEth);\n\t\t\tuint256 value = approveMax ? type(uint256).max : liquidity;\n\t\t\tpair.permit(_msgSender(), address(this), value, deadline, v, r, s); // ensure(deadline) happens here\n\t\t\t(, amountETH) = _removeLiquidity(pair, _wrappedEth < token, liquidity, amountTokenMin, amountETHMin, address(this));\n\t\t}\n\t\tSafeERC20.safeTransfer(token, to, token.balanceOf(address(this)));\n\t\t_wrappedEth.withdraw(amountETH);\n\t\tExofiswapLibrary.safeTransferETH(to, amountETH);\n\t}\n\n\tfunction removeLiquidityWithPermit(\n\t\tIERC20Metadata tokenA,\n\t\tIERC20Metadata tokenB,\n\t\tuint256 liquidity,\n\t\tuint256 amountAMin,\n\t\tuint256 amountBMin,\n\t\taddress to,\n\t\tuint256 deadline,\n\t\tbool approveMax, uint8 v, bytes32 r, bytes32 s\n\t) external override virtual returns (uint256 amountA, uint256 amountB)\n\t{\n\t\tIExofiswapPair pair = ExofiswapLibrary.pairFor(_swapFactory, tokenA, tokenB);\n\t\t{\n\t\t\tuint256 value = approveMax ? type(uint256).max : liquidity;\n\t\t\tpair.permit(_msgSender(), address(this), value, deadline, v, r, s); // ensure(deadline) happens here\n\t\t}\n\t\t(amountA, amountB) = _removeLiquidity(pair, tokenB < tokenA, liquidity, amountAMin, amountBMin, to);\n\t}\n\n\tfunction swapExactTokensForETH(uint256 amountIn, uint256 amountOutMin, IERC20Metadata[] calldata path, address to, uint256 deadline)\n\t\toverride external virtual ensure(deadline) returns (uint256[] memory amounts)\n\t{\n\t\tuint256 lastItem = MathUInt256.unsafeDec(path.length);\n\t\trequire(path[lastItem] == _wrappedEth, \"ER: INVALID_PATH\"); // Overflow on lastItem will flail here to\n\t\tamounts = ExofiswapLibrary.getAmountsOut(_swapFactory, amountIn, path);\n\t\trequire(amounts[amounts.length - 1] >= amountOutMin, \"ER: INSUFFICIENT_OUTPUT_AMOUNT\");\n\t\tSafeERC20.safeTransferFrom(path[0], _msgSender(), address(ExofiswapLibrary.pairFor(_swapFactory, path[0], path[1])), amounts[0]);\n\t\t_swap(amounts, path, address(this));\n\t\t// Lenght of amounts array must be equal to length of path array.\n\t\t_wrappedEth.withdraw(amounts[lastItem]);\n\t\tExofiswapLibrary.safeTransferETH(to, amounts[lastItem]);\n\t}\n\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\n\t\tuint256 amountIn,\n\t\tuint256 amountOutMin,\n\t\tIERC20Metadata[] calldata path,\n\t\taddress to,\n\t\tuint256 deadline\n\t) override external virtual ensure(deadline)\n\t{\n\t\trequire(path[MathUInt256.unsafeDec(path.length)] == _wrappedEth, \"ER: INVALID_PATH\");\n\t\tSafeERC20.safeTransferFrom(path[0], _msgSender(), address(ExofiswapLibrary.pairFor(_swapFactory, path[0], path[1])), amountIn);\n\t\t_swapSupportingFeeOnTransferTokens(path, address(this));\n\t\tuint256 amountOut = _wrappedEth.balanceOf(address(this));\n\t\trequire(amountOut >= amountOutMin, \"ER: INSUFFICIENT_OUTPUT_AMOUNT\");\n\t\t_wrappedEth.withdraw(amountOut);\n\t\tExofiswapLibrary.safeTransferETH(to, amountOut);\n\t}\n\n\tfunction swapExactTokensForTokens(\n\t\tuint256 amountIn,\n\t\tuint256 amountOutMin,\n\t\tIERC20Metadata[] calldata path,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external override virtual ensure(deadline) returns (uint256[] memory amounts)\n\t{\n\t\tamounts = ExofiswapLibrary.getAmountsOut(_swapFactory, amountIn, path);\n\t\trequire(amounts[MathUInt256.unsafeDec(amounts.length)] >= amountOutMin, \"ER: INSUFFICIENT_OUTPUT_AMOUNT\");\n\t\tSafeERC20.safeTransferFrom(path[0], _msgSender(), address(ExofiswapLibrary.pairFor(_swapFactory, path[0], path[1])), amounts[0]);\n\t\t_swap(amounts, path, to);\n\t}\n\n\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\n\t\tuint256 amountIn,\n\t\tuint256 amountOutMin,\n\t\tIERC20Metadata[] calldata path,\n\t\taddress to,\n\t\tuint256 deadline\n\t) override external virtual ensure(deadline)\n\t{\n\t\tSafeERC20.safeTransferFrom(path[0], _msgSender(), address(ExofiswapLibrary.pairFor(_swapFactory, path[0], path[1])), amountIn);\n\t\tuint256 lastItem = MathUInt256.unsafeDec(path.length);\n\t\tuint256 balanceBefore = path[lastItem].balanceOf(to);\n\t\t_swapSupportingFeeOnTransferTokens(path, to);\n\t\trequire((path[lastItem].balanceOf(to) - balanceBefore) >= amountOutMin, \"ER: INSUFFICIENT_OUTPUT_AMOUNT\");\n\t}\n\n\tfunction swapTokensForExactETH(uint256 amountOut, uint256 amountInMax, IERC20Metadata[] calldata path, address to, uint256 deadline) override\n\t\texternal virtual ensure(deadline) returns (uint256[] memory amounts)\n\t{\n\t\tuint256 lastItem = MathUInt256.unsafeDec(path.length);\n\t\trequire(path[lastItem] == _wrappedEth, \"ER: INVALID_PATH\"); // Overflow on lastItem will fail here too\n\t\tamounts = ExofiswapLibrary.getAmountsIn(_swapFactory, amountOut, path);\n\t\trequire(amounts[0] <= amountInMax, \"ER: EXCESSIVE_INPUT_AMOUNT\");\n\t\tSafeERC20.safeTransferFrom(\n\t\t\tpath[0], _msgSender(), address(ExofiswapLibrary.pairFor(_swapFactory, path[0], path[1])), amounts[0]\n\t\t);\n\t\t_swap(amounts, path, address(this));\n\t\t// amounts and path must have the same item count...\n\t\t_wrappedEth.withdraw(amounts[lastItem]);\n\t\tExofiswapLibrary.safeTransferETH(to, amounts[lastItem]);\n\t}\n\n\tfunction swapTokensForExactTokens(\n\t\tuint256 amountOut,\n\t\tuint256 amountInMax,\n\t\tIERC20Metadata[] calldata path,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external override virtual ensure(deadline) returns (uint256[] memory amounts)\n\t{\n\t\tamounts = ExofiswapLibrary.getAmountsIn(_swapFactory, amountOut, path);\n\t\trequire(amounts[0] <= amountInMax, \"ER: EXCESSIVE_INPUT_AMOUNT\");\n\t\tSafeERC20.safeTransferFrom(\n\t\t\tpath[0], _msgSender(), address(ExofiswapLibrary.pairFor(_swapFactory, path[0], path[1])), amounts[0]\n\t\t);\n\t\t_swap(amounts, path, to);\n\t}\n\n\tfunction swapETHForExactTokens(uint256 amountOut, IERC20Metadata[] calldata path, address to, uint256 deadline)\n\t\toverride external virtual payable ensure(deadline) returns (uint256[] memory amounts)\n\t{\n\t\trequire(path[0] == _wrappedEth, \"ER: INVALID_PATH\");\n\t\tamounts = ExofiswapLibrary.getAmountsIn(_swapFactory, amountOut, path);\n\t\trequire(amounts[0] <= msg.value, \"ER: EXCESSIVE_INPUT_AMOUNT\");\n\t\t_wrappedEth.deposit{value: amounts[0]}();\n\t\tassert(_wrappedEth.transfer(address(ExofiswapLibrary.pairFor(_swapFactory, path[0], path[1])), amounts[0]));\n\t\t_swap(amounts, path, to);\n\t\t// refund dust eth, if any\n\t\tif (msg.value > amounts[0]) ExofiswapLibrary.safeTransferETH(_msgSender(), msg.value - amounts[0]);\n\t}\n\n\tfunction swapExactETHForTokens(uint256 amountOutMin, IERC20Metadata[] calldata path, address to, uint256 deadline)\n\t\toverride external virtual payable ensure(deadline) returns (uint[] memory amounts)\n\t{\n\t\trequire(path[0] == _wrappedEth, \"ER: INVALID_PATH\");\n\t\tamounts = ExofiswapLibrary.getAmountsOut(_swapFactory, msg.value, path);\n\t\trequire(amounts[MathUInt256.unsafeDec(amounts.length)] >= amountOutMin, \"ER: INSUFFICIENT_OUTPUT_AMOUNT\");\n\t\t_wrappedEth.deposit{value: amounts[0]}();\n\t\tassert(_wrappedEth.transfer(address(ExofiswapLibrary.pairFor(_swapFactory, path[0], path[1])), amounts[0]));\n\t\t_swap(amounts, path, to);\n\t}\n\n\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\n\t\tuint256 amountOutMin,\n\t\tIERC20Metadata[] calldata path,\n\t\taddress to,\n\t\tuint256 deadline\n\t) override external virtual payable ensure(deadline)\n\t{\n\t\trequire(path[0] == _wrappedEth, \"ER: INVALID_PATH\");\n\t\tuint256 amountIn = msg.value;\n\t\t_wrappedEth.deposit{value: amountIn}();\n\t\tassert(_wrappedEth.transfer(address(ExofiswapLibrary.pairFor(_swapFactory, path[0], path[1])), amountIn));\n\t\tuint256 lastItem = MathUInt256.unsafeDec(path.length);\n\t\tuint256 balanceBefore = path[lastItem].balanceOf(to);\n\t\t_swapSupportingFeeOnTransferTokens(path, to);\n\t\trequire(path[lastItem].balanceOf(to) - balanceBefore >= amountOutMin, \"ER: INSUFFICIENT_OUTPUT_AMOUNT\");\n\t}\n\n\tfunction factory() override external view returns (IExofiswapFactory)\n\t{\n\t\treturn _swapFactory;\n\t}\n\n\tfunction getAmountsIn(uint256 amountOut, IERC20Metadata[] memory path) override\n\t\tpublic view virtual returns (uint[] memory amounts)\n\t{\n\t\treturn ExofiswapLibrary.getAmountsIn(_swapFactory, amountOut, path);\n\t}\n\n\t// solhint-disable-next-line func-name-mixedcase\n\tfunction WETH() override public view returns(IERC20Metadata)\n\t{\n\t\treturn _wrappedEth;\n\t}\n\n\tfunction getAmountsOut(uint256 amountIn, IERC20Metadata[] memory path) override\n\t\tpublic view virtual returns (uint256[] memory amounts)\n\t{\n\t\treturn ExofiswapLibrary.getAmountsOut(_swapFactory, amountIn, path);\n\t}\n\n\tfunction getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut) override\n\t\tpublic pure virtual returns (uint256 amountIn)\n\t{\n\t\treturn ExofiswapLibrary.getAmountIn(amountOut, reserveIn, reserveOut);\n\t}\n\n\tfunction getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) override\n\t\tpublic pure virtual returns (uint256)\n\t{\n\t\treturn ExofiswapLibrary.getAmountOut(amountIn, reserveIn, reserveOut);\n\t}\n\n\tfunction quote(uint256 amount, uint256 reserve0, uint256 reserve1) override public pure virtual returns (uint256)\n\t{\n\t\treturn ExofiswapLibrary.quote(amount, reserve0, reserve1);\n\t}\n\n\tfunction _addLiquidity(\n\t\tIERC20Metadata tokenA,\n\t\tIERC20Metadata tokenB,\n\t\tuint256 amountADesired,\n\t\tuint256 amountBDesired,\n\t\tuint256 amountAMin,\n\t\tuint256 amountBMin\n\t) private returns (uint256, uint256, IExofiswapPair)\n\t{\n\t\t// create the pair if it doesn't exist yet\n\t\tIExofiswapPair pair = _swapFactory.getPair(tokenA, tokenB);\n\t\tif (address(pair) == address(0))\n\t\t{\n\t\t\tpair = _swapFactory.createPair(tokenA, tokenB);\n\t\t}\n\t\t(uint256 reserveA, uint256 reserveB, ) = pair.getReserves();\n\t\tif (reserveA == 0 && reserveB == 0)\n\t\t{\n\t\t\treturn (amountADesired, amountBDesired, pair);\n\t\t}\n\t\tif(pair.token0() == tokenB)\n\t\t{\n\t\t\t(reserveB, reserveA) = (reserveA, reserveB);\n\t\t}\n\t\tuint256 amountBOptimal = ExofiswapLibrary.quote(amountADesired, reserveA, reserveB);\n\t\tif (amountBOptimal <= amountBDesired)\n\t\t{\n\t\t\trequire(amountBOptimal >= amountBMin, \"ER: INSUFFICIENT_B_AMOUNT\");\n\t\t\treturn (amountADesired, amountBOptimal, pair);\n\t\t}\n\t\tuint256 amountAOptimal = ExofiswapLibrary.quote(amountBDesired, reserveB, reserveA);\n\t\tassert(amountAOptimal <= amountADesired);\n\t\trequire(amountAOptimal >= amountAMin, \"ER: INSUFFICIENT_A_AMOUNT\");\n\t\treturn (amountAOptimal, amountBDesired, pair);\n\t}\n\n\tfunction _removeLiquidity(\n\tIExofiswapPair pair,\n\tbool reverse,\n\tuint256 liquidity,\n\tuint256 amountAMin,\n\tuint256 amountBMin,\n\taddress to\n\t) private returns (uint256 amountA, uint256 amountB)\n\t{\n\t\tpair.transferFrom(_msgSender(), address(pair), liquidity); // send liquidity to pair\n\t\t(amountA, amountB) = pair.burn(to);\n\t\tif(reverse)\n\t\t{\n\t\t\t(amountA, amountB) = (amountB, amountA);\n\t\t}\n\t\trequire(amountA >= amountAMin, \"ER: INSUFFICIENT_A_AMOUNT\");\n\t\trequire(amountB >= amountBMin, \"ER: INSUFFICIENT_B_AMOUNT\");\n\t}\n\n\tfunction _safeTransferFrom(IERC20Metadata tokenA, IERC20Metadata tokenB, address pair, uint256 amountA, uint256 amountB) private\n\t{\n\t\taddress sender = _msgSender();\n\t\tSafeERC20.safeTransferFrom(tokenA, sender, pair, amountA);\n\t\tSafeERC20.safeTransferFrom(tokenB, sender, pair, amountB);\n\t}\n\n\t// requires the initial amount to have already been sent to the first pair\n\tfunction _swap(uint256[] memory amounts, IERC20Metadata[] memory path, address to) private\n\t{\n\t\t// TODO: Optimize for Gas. Still higher than Uniswap....maybe get all pairs from factory at once helps....\n\t\tuint256 pathLengthSubTwo = MathUInt256.unsafeSub(path.length, 2);\n\t\tuint256 j;\n\t\tuint256 i;\n\t\twhile (i < pathLengthSubTwo)\n\t\t{\n\t\t\tj = MathUInt256.unsafeInc(i);\n\t\t\tIExofiswapPair pair = ExofiswapLibrary.pairFor(_swapFactory, path[i], path[j]);\n\t\t\t(uint256 amount0Out, uint256 amount1Out) = path[i] == pair.token0() ? (uint256(0), amounts[j]) : (amounts[j], uint256(0));\n\t\t\tpair.swap(amount0Out, amount1Out, address(ExofiswapLibrary.pairFor(_swapFactory, path[j], path[MathUInt256.unsafeInc(j)])), new bytes(0));\n\t\t\ti = j;\n\t\t}\n\t\tj = MathUInt256.unsafeInc(i);\n\t\tIExofiswapPair pair2 = ExofiswapLibrary.pairFor(_swapFactory, path[i], path[j]);\n\t\t(uint256 amount0Out2, uint256 amount1Out2) = path[i] == pair2.token0() ? (uint256(0), amounts[j]) : (amounts[j], uint256(0));\n\t\tpair2.swap(amount0Out2, amount1Out2, to, new bytes(0));\n\t}\n\n\tfunction _swapSupportingFeeOnTransferTokens(IERC20Metadata[] memory path, address to) private\n\t{\n\t\tuint256 pathLengthSubTwo = MathUInt256.unsafeSub(path.length, 2);\n\t\tuint256 j;\n\t\tuint256 i;\n\t\twhile (i < pathLengthSubTwo)\n\t\t{\n\t\t\tj = MathUInt256.unsafeInc(i);\n\t\t\tIExofiswapPair pair = ExofiswapLibrary.pairFor(_swapFactory, path[i], path[j]);\n\t\t\tuint256 amountInput;\n\t\t\tuint256 amountOutput;\n\t\t\tIERC20Metadata token0 = pair.token0();\n\t\t\t{ // scope to avoid stack too deep errors\n\t\t\t\t(uint256 reserveInput, uint256 reserveOutput,) = pair.getReserves();\n\t\t\t\tif (path[j] == token0)\n\t\t\t\t{\n\t\t\t\t\t(reserveInput, reserveOutput) = (reserveOutput, reserveInput);\n\t\t\t\t}\n\t\t\t\tamountInput = (path[i].balanceOf(address(pair)) - reserveInput);\n\t\t\t\tamountOutput = ExofiswapLibrary.getAmountOut(amountInput, reserveInput, reserveOutput);\n\t\t\t}\n\t\t\t(uint256 amount0Out, uint256 amount1Out) = path[i] == token0 ? (uint256(0), amountOutput) : (amountOutput, uint256(0));\n\t\t\taddress receiver = address(ExofiswapLibrary.pairFor(_swapFactory, path[j], path[MathUInt256.unsafeInc(j)]));\n\t\t\tpair.swap(amount0Out, amount1Out, receiver, new bytes(0));\n\t\t\ti = j;\n\t\t}\n\t\tj = MathUInt256.unsafeInc(i);\n\t\tIExofiswapPair pair2 = ExofiswapLibrary.pairFor(_swapFactory, path[i], path[j]);\n\t\tuint256 amountInput2;\n\t\tuint256 amountOutput2;\n\t\tIERC20Metadata token02 = pair2.token0();\n\t\t{ // scope to avoid stack too deep errors\n\t\t\t(uint256 reserveInput, uint256 reserveOutput,) = pair2.getReserves();\n\t\t\tif (path[j] == token02)\n\t\t\t{\n\t\t\t\t(reserveInput, reserveOutput) = (reserveOutput, reserveInput);\n\t\t\t}\n\t\t\tamountInput2 = (path[i].balanceOf(address(pair2)) - reserveInput);\n\t\t\tamountOutput2 = ExofiswapLibrary.getAmountOut(amountInput2, reserveInput, reserveOutput);\n\t\t}\n\t\t(uint256 amount0Out2, uint256 amount1Out2) = path[i] == token02? (uint256(0), amountOutput2) : (amountOutput2, uint256(0));\n\t\tpair2.swap(amount0Out2, amount1Out2, to, new bytes(0));\n\t}\n}\n"
    },
    "contracts/Exofiswap/interfaces/IExofiswapCallee.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IExofiswapCallee\n{\n    function exofiswapCall(address sender, uint amount0, uint amount1, bytes calldata data) external;\n}"
    },
    "contracts/Exofiswap/interfaces/IExofiswapERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20AltApprove.sol\";\nimport \"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Metadata.sol\";\n\ninterface IExofiswapERC20 is IERC20AltApprove, IERC20Metadata\n{\n\t// Functions as described in EIP 2612\n\tfunction permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n\tfunction nonces(address owner) external view returns (uint256);\n\tfunction DOMAIN_SEPARATOR() external view returns (bytes32); // solhint-disable-line func-name-mixedcase\n\tfunction PERMIT_TYPEHASH() external pure returns (bytes32); //solhint-disable-line func-name-mixedcase\n}"
    },
    "contracts/Exofiswap/interfaces/IExofiswapFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@exoda/contracts/interfaces/access/IOwnable.sol\";\nimport \"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"./IExofiswapFactory.sol\";\nimport \"./IExofiswapPair.sol\";\nimport \"./IMigrator.sol\";\n\ninterface IExofiswapFactory is IOwnable\n{\n\tevent PairCreated(IERC20Metadata indexed token0, IERC20Metadata indexed token1, IExofiswapPair pair, uint256 pairCount);\n\n\tfunction createPair(IERC20Metadata tokenA, IERC20Metadata tokenB) external returns (IExofiswapPair pair);\n\tfunction setFeeTo(address) external;\n\tfunction setMigrator(IMigrator) external;\n\t\n\tfunction allPairs(uint256 index) external view returns (IExofiswapPair);\n\tfunction allPairsLength() external view returns (uint);\n\tfunction feeTo() external view returns (address);\n\tfunction getPair(IERC20Metadata tokenA, IERC20Metadata tokenB) external view returns (IExofiswapPair);\n\tfunction migrator() external view returns (IMigrator);\n\n\tfunction pairCodeHash() external pure returns (bytes32);\n}\n"
    },
    "contracts/Exofiswap/interfaces/IExofiswapPair.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IExofiswapCallee.sol\";\nimport \"./IExofiswapERC20.sol\";\nimport \"./IExofiswapFactory.sol\";\n\ninterface IExofiswapPair is IExofiswapERC20\n{\n\tevent Mint(address indexed sender, uint256 amount0, uint256 amount1);\n\tevent Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\n\tevent Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\n\tevent Sync(uint112 reserve0, uint112 reserve1);\n\n\tfunction burn(address to) external returns (uint256 amount0, uint256 amount1);\n\tfunction initialize(IERC20Metadata token0Init, IERC20Metadata token1Init) external;\n\tfunction mint(address to) external returns (uint256 liquidity);\n\tfunction skim(address to) external;\n\tfunction swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\n\tfunction sync() external;\n\n\tfunction factory() external view returns (IExofiswapFactory);\n\tfunction getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n\tfunction kLast() external view returns (uint256);\n\tfunction price0CumulativeLast() external view returns (uint256);\n\tfunction price1CumulativeLast() external view returns (uint256);\n\tfunction token0() external view returns (IERC20Metadata);\n\tfunction token1() external view returns (IERC20Metadata);\n\n\tfunction MINIMUM_LIQUIDITY() external pure returns (uint256); //solhint-disable-line func-name-mixedcase\n}"
    },
    "contracts/Exofiswap/interfaces/IExofiswapRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport \"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"./IExofiswapFactory.sol\";\n\ninterface IExofiswapRouter {\n\treceive() external payable;\n\n\tfunction addLiquidityETH(\n\t\tIERC20Metadata token,\n\t\tuint256 amountTokenDesired,\n\t\tuint256 amountTokenMin,\n\t\tuint256 amountETHMin,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\n\n\tfunction addLiquidity(\n\t\tIERC20Metadata tokenA,\n\t\tIERC20Metadata tokenB,\n\t\tuint256 amountADesired,\n\t\tuint256 amountBDesired,\n\t\tuint256 amountAMin,\n\t\tuint256 amountBMin,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\n\n\tfunction removeLiquidity(\n\t\tIERC20Metadata tokenA,\n\t\tIERC20Metadata tokenB,\n\t\tuint256 liquidity,\n\t\tuint256 amountAMin,\n\t\tuint256 amountBMin,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external returns (uint256 amountA, uint256 amountB);\n\n\tfunction removeLiquidityETH(\n\t\tIERC20Metadata token,\n\t\tuint256 liquidity,\n\t\tuint256 amountTokenMin,\n\t\tuint256 amountETHMin,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external returns (uint256 amountToken, uint256 amountETH);\n\n\tfunction removeLiquidityETHSupportingFeeOnTransferTokens(\n\t\tIERC20Metadata token,\n\t\tuint256 liquidity,\n\t\tuint256 amountTokenMin,\n\t\tuint256 amountETHMin,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external returns (uint256 amountETH);\n\n\tfunction removeLiquidityETHWithPermit(\n\t\tIERC20Metadata token,\n\t\tuint256 liquidity,\n\t\tuint256 amountTokenMin,\n\t\tuint256 amountETHMin,\n\t\taddress to,\n\t\tuint256 deadline,\n\t\tbool approveMax,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t) external returns (uint256 amountToken, uint256 amountETH);\n\n\tfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n\t\tIERC20Metadata token,\n\t\tuint256 liquidity,\n\t\tuint256 amountTokenMin,\n\t\tuint256 amountETHMin,\n\t\taddress to,\n\t\tuint256 deadline,\n\t\tbool approveMax,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t) external returns (uint256 amountETH);\n\n\tfunction removeLiquidityWithPermit(\n\t\tIERC20Metadata tokenA,\n\t\tIERC20Metadata tokenB,\n\t\tuint256 liquidity,\n\t\tuint256 amountAMin,\n\t\tuint256 amountBMin,\n\t\taddress to,\n\t\tuint256 deadline,\n\t\tbool approveMax,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t) external returns (uint256 amountA, uint256 amountB);\n\n\tfunction swapETHForExactTokens(\n\t\tuint256 amountOut,\n\t\tIERC20Metadata[] calldata path,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external payable returns (uint256[] memory amounts);\n\n\tfunction swapExactETHForTokens(\n\t\tuint256 amountOutMin,\n\t\tIERC20Metadata[] calldata path,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external payable returns (uint256[] memory amounts);\n\n\tfunction swapExactTokensForETH(\n\t\tuint256 amountIn,\n\t\tuint256 amountOutMin,\n\t\tIERC20Metadata[] calldata path,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external returns (uint256[] memory amounts);\n\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\n\t\tuint256 amountIn,\n\t\tuint256 amountOutMin,\n\t\tIERC20Metadata[] calldata path,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external;\n\n\tfunction swapExactTokensForTokens(\n\t\tuint256 amountIn,\n\t\tuint256 amountOutMin,\n\t\tIERC20Metadata[] calldata path,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external returns (uint256[] memory amounts);\n\n\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\n\t\tuint256 amountIn,\n\t\tuint256 amountOutMin,\n\t\tIERC20Metadata[] calldata path,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external;\n\n\tfunction swapTokensForExactETH(\n\t\tuint256 amountOut,\n\t\tuint256 amountInMax,\n\t\tIERC20Metadata[] calldata path,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external returns (uint256[] memory amounts);\n\n\tfunction swapTokensForExactTokens(\n\t\tuint256 amountOut,\n\t\tuint256 amountInMax,\n\t\tIERC20Metadata[] calldata path,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external returns (uint256[] memory amounts);\n\n\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\n\t\tuint256 amountOutMin,\n\t\tIERC20Metadata[] calldata path,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external payable;\n\n\t\tfunction factory() external view returns (IExofiswapFactory);\n\n\tfunction getAmountsIn(uint256 amountOut, IERC20Metadata[] calldata path)\n\t\texternal\n\t\tview\n\t\treturns (uint256[] memory amounts);\n\n\tfunction WETH() external view returns (IERC20Metadata); // solhint-disable-line func-name-mixedcase\n\n\tfunction getAmountsOut(uint256 amountIn, IERC20Metadata[] calldata path)\n\t\texternal\n\t\tview\n\t\treturns (uint256[] memory amounts);\n\n\tfunction getAmountOut(\n\t\tuint256 amountIn,\n\t\tuint256 reserveIn,\n\t\tuint256 reserveOut\n\t) external pure returns (uint256 amountOut);\n\n\tfunction getAmountIn(\n\t\tuint256 amountOut,\n\t\tuint256 reserveIn,\n\t\tuint256 reserveOut\n\t) external pure returns (uint256);\n\n\tfunction quote(\n\t\tuint256 amount,\n\t\tuint256 reserve0,\n\t\tuint256 reserve1\n\t) external pure returns (uint256);\n}\n"
    },
    "contracts/Exofiswap/interfaces/IMigrator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IMigrator\n{\n\t// Return the desired amount of liquidity token that the migrator wants.\n\tfunction desiredLiquidity() external view returns (uint256);\n}"
    },
    "contracts/Exofiswap/interfaces/IWETH9.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Metadata.sol\";\n\ninterface IWETH9 is IERC20Metadata\n{\n\tevent Deposit(address indexed from, uint256 value);\n\tevent Withdraw(address indexed to, uint256 value);\n\t\n\tfunction deposit() external payable;\n\tfunction withdraw(uint256 value) external;\n}"
    },
    "contracts/Exofiswap/libraries/ExofiswapLibrary.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"./MathUInt256.sol\";\nimport \"../interfaces/IExofiswapPair.sol\";\n\nlibrary ExofiswapLibrary\n{\n\tfunction safeTransferETH(address to, uint256 value) internal\n\t{\n\t\t// solhint-disable-next-line avoid-low-level-calls\n\t\t(bool success, ) = to.call{value: value}(new bytes(0));\n\t\trequire(success, \"ER: ETH transfer failed\");\n\t}\n\n\t// performs chained getAmountIn calculations on any number of pairs\n\tfunction getAmountsIn(IExofiswapFactory factory, uint256 amountOut, IERC20Metadata[] memory path)\n\tinternal view returns (uint256[] memory amounts)\n\t{\n\t\t// can not underflow since path.length >= 2;\n\t\tuint256 j = path.length;\n\t\trequire(j >= 2, \"EL: INVALID_PATH\");\n\t\tamounts = new uint256[](j);\n\t\tj = MathUInt256.unsafeDec(j);\n\t\tamounts[j] = amountOut;\n\t\tfor (uint256 i = j; i > 0; i = j)\n\t\t{\n\t\t\tj = MathUInt256.unsafeDec(j);\n\t\t\t(uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[j], path[i]);\n\t\t\tamounts[j] = getAmountIn(amounts[i], reserveIn, reserveOut);\n\t\t}\n\t}\n\n\t// performs chained getAmountOut calculations on any number of pairs\n\tfunction getAmountsOut(IExofiswapFactory factory, uint256 amountIn, IERC20Metadata[] memory path)\n\tinternal view returns (uint256[] memory amounts)\n\t{\n\t\trequire(path.length >= 2, \"EL: INVALID_PATH\");\n\t\tamounts = new uint256[](path.length);\n\t\tamounts[0] = amountIn;\n\t\t// can not underflow since path.length >= 2;\n\t\tuint256 to = MathUInt256.unsafeDec(path.length);\n\t\tuint256 j;\n\t\tfor (uint256 i; i < to; i = j)\n\t\t{\n\t\t\tj = MathUInt256.unsafeInc(i);\n\t\t\t(uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i], path[j]);\n\t\t\tamounts[j] = getAmountOut(amounts[i], reserveIn, reserveOut);\n\t\t}\n\t}\n\n\tfunction getReserves(IExofiswapFactory factory, IERC20Metadata token0, IERC20Metadata token1) internal view returns (uint256, uint256)\n\t{\n\t\t(IERC20Metadata tokenL,) = sortTokens(token0, token1);\n\t\t(uint reserve0, uint reserve1,) = pairFor(factory, token0, token1).getReserves();\n\t\treturn tokenL == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n\t}\n\n\t// calculates the CREATE2 address. It uses the factory for this since Factory already has the Pair contract included.\n\t// Otherwise this library would add the size of the Pair Contract to every contract using this function.\n\tfunction pairFor(IExofiswapFactory factory, IERC20Metadata token0, IERC20Metadata token1) internal pure returns (IExofiswapPair) {\n\t\t\n\t\t(IERC20Metadata tokenL, IERC20Metadata tokenR) = token0 < token1 ? (token0, token1) : (token1, token0);\n\t\treturn IExofiswapPair(address(uint160(uint256(keccak256(abi.encodePacked(\n\t\t\t\thex'ff', // CREATE2\n\t\t\t\taddress(factory), // sender\n\t\t\t\tkeccak256(abi.encodePacked(tokenL, tokenR)), // salt\n\t\t\t\thex'249895517e40838f4b1dd16d4fcf91c721a6326947a6f8535e3ad8f94a649f81' // init code hash keccak256(type(ExofiswapPair).creationCode);\n\t\t\t))))));\n\t}\n\n\t// given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n\tfunction getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut) internal pure returns (uint amountIn)\n\t{\n\t\trequire(amountOut > 0, \"EL: INSUFFICIENT_OUTPUT_AMOUNT\");\n\t\trequire(reserveIn > 0 && reserveOut > 0, \"EL: INSUFFICIENT_LIQUIDITY\");\n\t\tuint256 numerator = reserveIn * amountOut * 1000;\n\t\tuint256 denominator = (reserveOut - amountOut) * 997;\n\t\t// Div of uint can not overflow\n\t\t// numerator is calulated in a way that if no overflow happens it is impossible to be type(uint256).max.\n\t\t// The most simple explanation is that * 1000 is a multiplikation with an even number so the result hast to be even to.\n\t\t// since type(uint256).max is uneven the result has to be smaler than type(uint256).max or an overflow would have occured.\n\t\treturn MathUInt256.unsafeInc(MathUInt256.unsafeDiv(numerator, denominator));\n\t}\n\n\tfunction getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) internal pure returns (uint256)\n\t{\n\t\trequire(amountIn > 0, \"EL: INSUFFICIENT_INPUT_AMOUNT\");\n\t\trequire(reserveIn > 0, \"EL: INSUFFICIENT_LIQUIDITY\");\n\t\trequire(reserveOut > 0, \"EL: INSUFFICIENT_LIQUIDITY\");\n\t\tuint256 amountInWithFee = amountIn * 997;\n\t\tuint256 numerator = amountInWithFee * reserveOut;\n\t\tuint256 denominator = (reserveIn * 1000) + amountInWithFee;\n\t\t// Div of uint can not overflow\n\t\treturn MathUInt256.unsafeDiv(numerator, denominator);\n\t}\n\n\t// given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n\tfunction quote(uint256 amount, uint256 reserve0, uint256 reserve1) internal pure returns (uint256) {\n\t\trequire(amount > 0, \"EL: INSUFFICIENT_AMOUNT\");\n\t\trequire(reserve0 > 0, \"EL: INSUFFICIENT_LIQUIDITY\");\n\t\trequire(reserve1 > 0, \"EL: INSUFFICIENT_LIQUIDITY\");\n\t\t// Division with uint can not overflow.\n\t\treturn MathUInt256.unsafeDiv(amount * reserve1, reserve0);\n\t}\n\n\t// returns sorted token addresses, used to handle return values from pairs sorted in this order\n\tfunction sortTokens(IERC20Metadata token0, IERC20Metadata token1) internal pure returns (IERC20Metadata tokenL, IERC20Metadata tokenR)\n\t{\n\t\trequire(token0 != token1, \"EL: IDENTICAL_ADDRESSES\");\n\t\t(tokenL, tokenR) = token0 < token1 ? (token0, token1) : (token1, token0);\n\t\trequire(address(tokenL) != address(0), \"EL: ZERO_ADDRESS\");\n\t}\n}"
    },
    "contracts/Exofiswap/libraries/MathUInt256.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary MathUInt256\n{\n\tfunction min(uint256 a, uint256 b) internal pure returns(uint256)\n\t{\n\t\treturn a > b ? b : a;\n\t}\n\n\t// solhint-disable-next-line code-complexity\n\tfunction sqrt(uint256 x) internal pure returns (uint256)\n\t{\n\t\tif (x == 0)\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\n\t\tuint256 xAux = x;\n\t\tuint256 result = 1;\n\t\tif (xAux >= 0x100000000000000000000000000000000)\n\t\t{\n\t\t\txAux >>= 128;\n\t\t\tresult <<= 64;\n\t\t}\n\t\tif (xAux >= 0x10000000000000000)\n\t\t{\n\t\t\txAux >>= 64;\n\t\t\tresult <<= 32;\n\t\t}\n\t\tif (xAux >= 0x100000000)\n\t\t{\n\t\t\txAux >>= 32;\n\t\t\tresult <<= 16;\n\t\t}\n\t\tif (xAux >= 0x10000)\n\t\t{\n\t\t\txAux >>= 16;\n\t\t\tresult <<= 8;\n\t\t}\n\t\tif (xAux >= 0x100)\n\t\t{\n\t\t\txAux >>= 8;\n\t\t\tresult <<= 4;\n\t\t}\n\t\tif (xAux >= 0x10)\n\t\t{\n\t\t\txAux >>= 4;\n\t\t\tresult <<= 2;\n\t\t}\n\t\tif (xAux >= 0x4)\n\t\t{\n\t\t\tresult <<= 1;\n\t\t}\n\n\t\t// The operations can never overflow because the result is max 2^127 when it enters this block.\n\t\tunchecked\n\t\t{\n\t\t\tresult = (result + x / result) >> 1;\n\t\t\tresult = (result + x / result) >> 1;\n\t\t\tresult = (result + x / result) >> 1;\n\t\t\tresult = (result + x / result) >> 1;\n\t\t\tresult = (result + x / result) >> 1;\n\t\t\tresult = (result + x / result) >> 1;\n\t\t\tresult = (result + x / result) >> 1; // Seven iterations should be enough\n\t\t\tuint256 roundedDownResult = x / result;\n\t\t\treturn result >= roundedDownResult ? roundedDownResult : result;\n\t\t}\n\t}\n\n\tfunction unsafeDec(uint256 a) internal pure returns (uint256)\n\t{\n\t\tunchecked \n\t\t{\n\t\t\treturn a - 1;\n\t\t}\n\t}\n\n\tfunction unsafeDiv(uint256 a, uint256 b) internal pure returns (uint256)\n\t{\n\t\tunchecked\n\t\t{\n\t\t\treturn a / b;\n\t\t}\n\t}\n\n\tfunction unsafeInc(uint256 a) internal pure returns (uint256)\n\t{\n\t\tunchecked \n\t\t{\n\t\t\treturn a + 1;\n\t\t}\n\t}\n\n\tfunction unsafeMul(uint256 a, uint256 b) internal pure returns (uint256)\n\t{\n\t\tunchecked\n\t\t{\n\t\t\treturn a * b;\n\t\t}\n\t}\n\n\tfunction unsafeSub(uint256 a, uint256 b) internal pure returns (uint256)\n\t{\n\t\tunchecked\n\t\t{\n\t\t\treturn a - b;\n\t\t}\n\t}\n}"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": true,
      "runs": 500000,
      "details": {
        "orderLiterals": true,
        "deduplicate": true,
        "cse": true,
        "constantOptimizer": true
      }
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
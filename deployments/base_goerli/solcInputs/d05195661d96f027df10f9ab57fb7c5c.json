{
  "language": "Solidity",
  "sources": {
    "@exoda/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport { IOwnable } from \"../interfaces/access/IOwnable.sol\";\nimport { Context } from \"../utils/Context.sol\";\n\n/**\n * @title Ownable contract module.\n * @author Ing. Michael Goldfinger\n * @notice Contract module which provides a basic access control mechanism, where\n * there is an address (an owner) that can be granted exclusive access to specific functions.\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with the function {transferOwnership(address newOwner)}\".\n * @dev This module is used through inheritance. It will make available the modifier\n * {onlyOwner}, which can be applied to your functions to restrict their use to the owner.\n */\ncontract Ownable is IOwnable, Context\n{\n\taddress private _owner;\n\n\t/**\n\t* @notice Throws if called by any account other than the owner.\n\t*/\n\tmodifier onlyOwner()\n\t{\n\t\trequire(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n\t\t_;\n\t}\n\n\t/**\n\t* @notice Initializes the contract setting the deployer as the initial owner.\n\t* \n\t* Emits an {OwnershipTransferred} event indicating the initially set ownership.\n\t*/\n\tconstructor()\n\t{\n\t\t_transferOwnership(_msgSender());\n\t}\n\n\t/// @inheritdoc IOwnable\n\tfunction renounceOwnership() override public virtual onlyOwner \n\t{\n\t\t_transferOwnership(address(0));\n\t}\n\n\t/// @inheritdoc IOwnable\n\tfunction transferOwnership(address newOwner) override public virtual onlyOwner\n\t{\n\t\trequire(newOwner != address(0), \"Ownable: new owner is address(0)\");\n\t\t_transferOwnership(newOwner);\n\t}\n\n\t/// @inheritdoc IOwnable\n\tfunction owner() public view virtual override returns (address)\n\t{\n\t\treturn _owner;\n\t}\n\n\t/**\n\t* @notice Transfers ownership of the contract to a new address.\n\t* Internal function without access restriction.\n\t* \n\t* Emits an {OwnershipTransferred} event indicating the transfered ownership.\n\t*/\n\tfunction _transferOwnership(address newOwner) internal virtual\n\t{\n\t\taddress oldOwner = _owner;\n\t\t_owner = newOwner;\n\t\temit OwnershipTransferred(oldOwner, newOwner);\n\t}\n}\n"
    },
    "@exoda/contracts/interfaces/access/IOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @title Ownable interface.\n/// @author Ing. Michael Goldfinger\n/// @notice This interface contains all visible functions and events for the Ownable contract module.\ninterface IOwnable\n{\n\t/// @notice Emitted when ownership is moved from one address to another.\n\t/// @param previousOwner (indexed) The owner of the contract until now.\n\t/// @param newOwner (indexed) The new owner of the contract.\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\t/**\n\t * @notice Leaves the contract without an owner. It will not be possible to call {onlyOwner} functions anymore.\n\t *\n\t * NOTE: Renouncing ownership will leave the contract without an owner,\n\t * thereby removing any functionality that is only available to the owner.\n\t *\n\t * Emits an [`OwnershipTransferred`](#ownershiptransferred) event indicating the renounced ownership.\n\t *\n\t * Requirements:\n\t * - Can only be called by the current owner.\n\t * \n\t * @dev Sets the zero address as the new contract owner.\n\t */\n\tfunction renounceOwnership() external;\n\n\t/**\n\t * @notice Transfers ownership of the contract to a new address.\n\t *\n\t * Emits an [`OwnershipTransferred`](#ownershiptransferred) event indicating the transfered ownership.\n\t *\n\t * Requirements:\n\t * - Can only be called by the current owner.\n\t *\n\t * @param newOwner The new owner of the contract.\n\t */\n\tfunction transferOwnership(address newOwner) external;\n\n\t/// @notice Returns the current owner.\n\t/// @return The current owner.\n\tfunction owner() external view returns (address);\n}"
    },
    "@exoda/contracts/interfaces/token/ERC20/extensions/IERC20AltApprove.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @title ERC20Metadata interface.\n/// @author Ing. Michael Goldfinger\n/// @notice Interface for an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.\n/// @dev This is not part of the ERC20 specification.\ninterface IERC20AltApprove\n{\n\t/**\n\t* @notice Atomically decreases the allowance granted to `spender` by the caller.\n\t*\n\t* This is an alternative to {approve} that can be used as a mitigation for\n\t* problems described in {IERC20-approve}.\n\t*\n\t* Emits an {Approval} event indicating the updated allowance.\n\t*\n\t* Requirements:\n\t*\n\t* - `spender` cannot be the zero address.\n\t* - `spender` must have allowance for the caller of at least\n\t* `subtractedValue`.\n\t*/\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\n\n\t/**\n\t* @notice Atomically increases the allowance granted to `spender` by the caller.\n\t*\n\t* This is an alternative to {approve} that can be used as a mitigation for\n\t* problems described in {IERC20-approve}.\n\t*\n\t* Emits an {Approval} event indicating the updated allowance.\n\t*\n\t* Requirements:\n\t*\n\t* - `spender` cannot be the zero address.\n\t*/\n\tfunction increaseAllowance(address spender, uint256 addedValue) external returns (bool);\n}\n"
    },
    "@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport { IERC20 } from \"../IERC20.sol\";\n\n/**\n * @title ERC20Burnable interface.\n * @author Ing. Michael Goldfinger\n * @notice Interface for the extension of {ERC20} that allows token holders to destroy both their own tokens\n * and those that they have an allowance for.\n */\ninterface IERC20Burnable is IERC20\n{\n\t/**\n\t* @notice Destroys {amount} tokens from the caller.\n\t*\n\t* Emits an {Transfer} event.\n\t*\n\t* @param amount The {amount} of tokens that should be destroyed.\n\t*/\n\tfunction burn(uint256 amount) external;\n\n\t/**\n\t* @notice Destroys {amount} tokens from {account}, deducting from the caller's allowance.\n\t*\n\t* Emits an {Approval} and an {Transfer} event.\n\t*\n\t* @param account The {account} where the tokens should be destroyed.\n\t* @param amount The {amount} of tokens that should be destroyed.\n\t*/\n\tfunction burnFrom(address account, uint256 amount) external;\n}"
    },
    "@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport { IERC20 } from \"../IERC20.sol\";\n\n/// @title ERC20Metadata interface.\n/// @author Ing. Michael Goldfinger\n/// @notice Interface for the optional metadata functions from the ERC20 standard.\ninterface IERC20Metadata is IERC20\n{\n\t/// @notice Returns the name of the token.\n\t/// @return The token name.\n\tfunction name() external view returns (string memory);\n\n\t/// @notice Returns the symbol of the token.\n\t/// @return The symbol for the token.\n\tfunction symbol() external view returns (string memory);\n\n\t/// @notice Returns the decimals of the token.\n\t/// @return The decimals for the token.\n\tfunction decimals() external pure returns (uint8);\n}\n"
    },
    "@exoda/contracts/interfaces/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @title ERC20 interface.\n * @author Ing. Michael Goldfinger\n * @notice Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20\n{\n\t/**\n\t * @notice Emitted when the allowance of a {spender} for an {owner} is set to a new value.\n\t *\n\t * NOTE: {value} may be zero.\n\t * @param owner (indexed) The owner of the tokens.\n\t * @param spender (indexed) The spender for the tokens.\n\t * @param value The amount of tokens that got an allowance.\n\t */\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n\n\t/**\n\t * @notice Emitted when {value} tokens are moved from one address {from} to another {to}.\n\t *\n\t * NOTE: {value} may be zero.\n\t * @param from (indexed) The origin of the transfer.\n\t * @param to (indexed) The target of the transfer.\n\t * @param value The amount of tokens that got transfered.\n\t */\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n\t/**\n\t* @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n\t*\n\t* Returns a boolean value indicating whether the operation succeeded.\n\t*\n\t* IMPORTANT: Beware that changing an allowance with this method brings the risk\n\t* that someone may use both the old and the new allowance by unfortunate\n\t* transaction ordering. One possible solution to mitigate this race\n\t* condition is to first reduce the spender's allowance to 0 and set the\n\t* desired value afterwards:\n\t* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\t*\n\t* Emits an {Approval} event.\n\t*/\n\tfunction approve(address spender, uint256 amount) external returns (bool);\n\n\t/**\n\t* @dev Moves `amount` tokens from the caller's account to `to`.\n\t*\n\t* Returns a boolean value indicating whether the operation succeeded.\n\t*\n\t* Emits a {Transfer} event.\n\t*/\n\tfunction transfer(address to, uint256 amount) external returns (bool);\n\n\t/**\n\t* @dev Moves `amount` tokens from `from` to `to` using the allowance mechanism.\n\t* `amount` is then deducted from the caller's allowance.\n\t*\n\t* Returns a boolean value indicating whether the operation succeeded.\n\t*\n\t* Emits a {Transfer} event.\n\t*/\n\tfunction transferFrom(address from, address to, uint256 amount) external returns (bool);\n\n\t/**\n\t* @dev Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}.\n\t* This is zero by default.\n\t*\n\t* This value changes when {approve}, {increaseAllowance}, {decreseAllowance} or {transferFrom} are called.\n\t*/\n\tfunction allowance(address owner, address spender) external view returns (uint256);\n\n\t/**\n\t* @dev Returns the amount of tokens owned by `account`.\n\t*/\n\tfunction balanceOf(address account) external view returns (uint256);\n\n\t/**\n\t* @dev Returns the amount of tokens in existence.\n\t*/\n\tfunction totalSupply() external view returns (uint256);\n}\n"
    },
    "@exoda/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport { IERC20 } from \"../../../interfaces/token/ERC20/IERC20.sol\";\nimport { Address } from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20\n{\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal\n    {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal\n    {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal\n    {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // uint256 allowance = _callReturnUint256(token, abi.encodeWithSelector(token.allowance.selector, address(this), spender));\n        // require((value == 0) || (allowance == 0), \"SafeERC20: exploitable approve\");\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \"SafeERC20: exploitable approve\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal\n    {\n        // uint256 newAllowance = _callReturnUint256(token, abi.encodeWithSelector(token.allowance.selector, address(this), spender)) + value;\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal\n    {\n        unchecked\n        {\n            // uint256 oldAllowance = _callReturnUint256(token, abi.encodeWithSelector(token.allowance.selector, address(this), spender));\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: reduced allowance <0\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private\n    {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0)\n        {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 call failed\");\n        }\n    }\n}\n"
    },
    "@exoda/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address\n{\n    /* solhint-disable max-line-length */\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n     /* solhint-enable max-line-length */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory)\n    {\n        return functionCallWithValue(target, data, 0, \"Address: call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory)\n    {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory)\n    {\n        return functionCallWithValue(target, data, value, \"Address: call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory)\n    {\n        require(address(this).balance >= value, \"Address: balance to low for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) internal pure returns (bytes memory)\n    {\n        if (success)\n        {\n            return returndata;\n        } else\n        {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly\n                {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            }\n            else\n            {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@exoda/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n* @notice Provides information about the current execution context, including the\n* sender of the transaction and its data. While these are generally available\n* via msg.sender and msg.data, they should not be accessed in such a direct\n* manner, since when dealing with meta-transactions the account sending and\n* paying for execution may not be the actual sender (as far as an application\n* is concerned).\n*\n* This contract is only required for intermediate, library-like contracts.\n*/\nabstract contract Context\n{\n\t/// @notice returns the sender of the transaction.\n\t/// @return The sender of the transaction.\n\tfunction _msgSender() internal view virtual returns (address)\n\t{\n\t\treturn msg.sender;\n\t}\n\n\t/// @notice returns the data of the transaction.\n\t/// @return The data of the transaction.\n\tfunction _msgData() internal view virtual returns (bytes calldata)\n\t{\n\t\treturn msg.data;\n\t}\n}\n"
    },
    "contracts/FermionReactor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@exoda/contracts/access/Ownable.sol\";\nimport \"@exoda/contracts/interfaces/token/ERC20/IERC20.sol\";\nimport \"@exoda/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"./interfaces/IFermionReactor.sol\";\nimport \"./interfaces/IFermion.sol\";\n\ncontract FermionReactor is IFermionReactor, Ownable\n{\n\tuint256 private immutable _lowerLimit;\n\tuint256 private immutable _upperLimit;\n\tuint256 private immutable _rate;\n\tIFermion private immutable _fermion;\n\tbool private _active;\n\n\tconstructor(uint256 lowerLimit, uint256 upperLimit, IFermion fermion, uint256 rate) Ownable()\n\t{\n\t\trequire(rate > 0, \"FR: Rate < 0\");\n\t\trequire(upperLimit > lowerLimit, \"FR: upperLimit <= lowerLimit\");\n\t\t_lowerLimit = lowerLimit;\n\t\t_upperLimit = upperLimit;\n\t\t_rate = rate;\n\t\t_fermion = fermion;\n\t\t_active = true;\n\t}\n\n\tfunction buyFermion() override external payable\n\t{\n\t\trequire(_active, \"FR: Contract is not active\");\n\t\tuint256 amountETH = msg.value;\n\t\trequire(amountETH >= _lowerLimit, \"FR: Insufficient ETH\");\n\t\trequire(amountETH <= _upperLimit, \"FR: ETH exceeds upper Limit\");\n\t\t// Get available Fermions\n\t\tuint256 fAvailable = _fermion.balanceOf(address(this));\n\t\t// Calculate Fermion Amount\n\t\tuint256 fAmount = amountETH * _rate;\n\t\t// Check if enought Fermions\n\t\tif(fAvailable < fAmount)\n\t\t{\n\t\t\tunchecked\n\t\t\t{\n\t\t\t\t// If not enouth use max possible amount of Fermions and refund unused eth\n\t\t\t\tfAmount = fAvailable;\n\t\t\t\tamountETH = fAmount / _rate;\n\t\t\t\t// refund unused eth\n\t\t\t\t_safeTransferETH(_msgSender(), (msg.value - amountETH));\n\t\t\t\t_active = false;\n\t\t\t}\n\t\t}\n\t\t// Transfer ETH to owner\n\t\t_safeTransferETH(owner(), amountETH);\n\t\t// Transfer Fermions to caller\n\t\tSafeERC20.safeTransfer(_fermion, _msgSender(), fAmount);\n\t\temit Buy(_msgSender(), amountETH, fAmount);\n\t}\n\n\tfunction disable() override external onlyOwner\n\t{\n\t\t_active = false;\n\t\tuint256 fAvailable = _fermion.balanceOf(address(this));\n\t\tSafeERC20.safeTransfer(_fermion, owner(), fAvailable);\n\t}\n\n\tfunction transferOtherERC20Token(IERC20 token) override external onlyOwner returns (bool)\n\t{\n\t\trequire(token != _fermion, \"FR: Fermion can not be removed.\");\n\t\treturn token.transfer(owner(), token.balanceOf(address(this)));\n\t}\n\n\tfunction getFermionAddress() override external view returns(IFermion)\n\t{\n\t\treturn _fermion;\n\t}\n\n\tfunction getLowerEthLimit() override external view returns(uint256)\n\t{\n\t\treturn _lowerLimit;\n\t}\n\n\tfunction getRate() override external view returns(uint256)\n\t{\n\t\treturn _rate;\n\t}\n\n\tfunction getUpperEthLimit() override external view returns(uint256)\n\t{\n\t\treturn _upperLimit;\n\t}\n\n\tfunction isActive() override external view returns(bool)\n\t{\n\t\treturn _active;\n\t}\n\n\tfunction _safeTransferETH(address to, uint256 value) private\n\t{\n\t\t// solhint-disable-next-line avoid-low-level-calls\n\t\t(bool success, ) = to.call{value: value}(new bytes(0));\n\t\trequire(success, \"FR: ETH transfer failed\");\n\t}\n}"
    },
    "contracts/interfaces/IFermion.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@exoda/contracts/interfaces/access/IOwnable.sol\";\nimport \"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20AltApprove.sol\";\nimport \"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Burnable.sol\";\nimport \"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Metadata.sol\";\n\n/**\n * @dev Interface of the Fermion token.\n */\ninterface IFermion is IOwnable, IERC20AltApprove, IERC20Metadata, IERC20Burnable\n{\n\t/**\n\t* @dev Mints `amount` tokens to `account`.\n\t*\n\t* Emits a {Transfer} event with `from` set to the zero address.\n\t*/\n\tfunction mint(address to, uint256 amount) external;\n}"
    },
    "contracts/interfaces/IFermionReactor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@exoda/contracts/interfaces/access/IOwnable.sol\";\nimport \"@exoda/contracts/interfaces/token/ERC20/IERC20.sol\";\n\nimport \"./IFermion.sol\";\nimport \"./IMagneticFieldGenerator.sol\";\n\ninterface IFermionReactor is IOwnable\n{\n\tevent Buy(address indexed user, uint256 ethAmount, uint256 fermionAmount);\n\n\tfunction buyFermion() external payable;\n\t\n\tfunction disable() external;\n\tfunction transferOtherERC20Token(IERC20 token) external returns(bool);\n\n\tfunction getFermionAddress() external view returns(IFermion);\n\tfunction getLowerEthLimit() external view returns(uint256);\n\tfunction getRate() external view returns(uint256);\n\tfunction getUpperEthLimit() external view returns(uint256);\n\tfunction isActive() external view returns(bool);\n}"
    },
    "contracts/interfaces/IMagneticFieldGenerator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@exoda/contracts/interfaces/token/ERC20/IERC20.sol\";\nimport \"./IFermion.sol\";\nimport \"./IMigratorDevice.sol\";\nimport \"./IMagneticFieldGeneratorStore.sol\";\n\ninterface IMagneticFieldGenerator\n{\n\tevent Deposit(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\n\tevent Harvest(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\n\tevent EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\n\tevent LogPoolAddition(uint256 indexed pid, uint256 allocPoint, IERC20 indexed lpToken);\n\tevent LogSetPool(uint256 indexed pid, uint256 allocPoint);\n\tevent LogUpdatePool(uint256 indexed pid, uint256 lastRewardBlock, uint256 lpSupply, uint256 accFermionPerShare);\n\tevent Migrate(uint256 indexed pid, uint256 balance, IERC20 indexed fromToken, IERC20 indexed toToken);\n\tevent Withdraw(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\n\n\t/// @notice Add a new LP to the pool. Can only be called by the owner.\n\t/// WARNING DO NOT add the same LP token more than once. Rewards will be messed up if you do.\n\t/// @param allocPoint AP of the new pool.\n\t/// @param lpToken Address of the LP ERC-20 token.\n\t/// @param lockPeriod Number of Blocks the pool should disallow withdraws of all kind.\n\tfunction add(uint256 allocPoint, IERC20 lpToken, uint256 lockPeriod) external;\n\tfunction deposit(uint256 pid, uint256 amount, address to) external;\n\tfunction disablePool(uint256 pid) external;\n\tfunction emergencyWithdraw(uint256 pid, address to) external;\n\tfunction handOverToSuccessor(IMagneticFieldGenerator successor) external;\n\tfunction harvest(uint256 pid, address to) external;\n\tfunction massUpdatePools() external;\n\tfunction migrate(uint256 pid) external;\n\tfunction renounceOwnership() external;\n\tfunction set(uint256 pid, uint256 allocPoint) external;\n\tfunction setFermionPerBlock(uint256 fermionPerBlock) external;\n\tfunction setMigrator(IMigratorDevice migratorContract) external;\n\tfunction setStore(IMagneticFieldGeneratorStore storeContract) external;\n\tfunction transferOwnership(address newOwner) external;\n\tfunction updatePool(uint256 pid) external returns(PoolInfo memory);\n\tfunction withdraw(uint256 pid, uint256 amount, address to) external;\n\tfunction withdrawAndHarvest(uint256 pid, uint256 amount, address to) external;\n\n\tfunction getFermionContract() external view returns (IFermion);\n\tfunction getFermionPerBlock() external view returns (uint256);\n\tfunction getStartBlock() external view returns (uint256);\n\tfunction getStore() external view returns(IMagneticFieldGeneratorStore);\n\tfunction migrator() external view returns(IMigratorDevice);\n\tfunction owner() external view returns (address);\n\tfunction pendingFermion(uint256 pid, address user) external view returns (uint256);\n\tfunction poolInfo(uint256 pid) external view returns (PoolInfo memory);\n\tfunction poolLength() external view returns (uint256);\n\tfunction successor() external view returns (IMagneticFieldGenerator);\n\tfunction totalAllocPoint() external view returns (uint256);\n\tfunction userInfo(uint256 pid, address user) external view returns (UserInfo memory);\n}"
    },
    "contracts/interfaces/IMagneticFieldGeneratorStore.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@exoda/contracts/interfaces/access/IOwnable.sol\";\nimport \"../structs/PoolInfo.sol\";\nimport \"../structs/UserInfo.sol\";\n\ninterface IMagneticFieldGeneratorStore is IOwnable\n{\n\tfunction deletePoolInfo(uint256 pid) external;\n\tfunction newPoolInfo(PoolInfo memory pi) external;\n\tfunction updateUserInfo(uint256 pid, address user, UserInfo memory ui) external;\n\tfunction updatePoolInfo(uint256 pid, PoolInfo memory pi) external;\n\tfunction getPoolInfo(uint256 pid) external view returns (PoolInfo memory);\n\tfunction getPoolLength() external view returns (uint256);\n\tfunction getUserInfo(uint256 pid, address user) external view returns (UserInfo memory);\n\t\n}\n"
    },
    "contracts/interfaces/IMigratorDevice.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@exoda/contracts/interfaces/token/ERC20/IERC20.sol\";\n\ninterface IMigratorDevice\n{\n\t// Perform LP token migration from legacy UniswapV2 to Exofi.\n\t// Take the current LP token address and return the new LP token address.\n\t// Migrator should have full access to the caller's LP token.\n\t// Return the new LP token address.\n\t//\n\t// XXX Migrator must have allowance access to UniswapV2 LP tokens.\n\t// Exofi must mint EXACTLY the same amount of ENERGY tokens or\n\t// else something bad will happen. Traditional UniswapV2 does not\n\t// do that so be careful!\n\tfunction migrate(IERC20 token) external returns (address);\n\n\tfunction beneficiary() external view returns (address);\n}"
    },
    "contracts/interfaces/IPlanet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@exoda/contracts/interfaces/access/IOwnable.sol\";\nimport \"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20AltApprove.sol\";\n\ninterface IPlanet is IOwnable, IERC20AltApprove, IERC20Metadata\n{\n\tevent Enter(address indexed sender, uint256 amount, address indexed to);\n\tevent Leave(address indexed sender, uint256 amount, address indexed to);\n\n\tfunction enter(uint256 amount, address to) external;\n\tfunction leave(uint256 amount, address to) external;\n\tfunction token() external view returns (IERC20Metadata);\n}"
    },
    "contracts/MagneticFieldGenerator.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@exoda/contracts/access/Ownable.sol\";\nimport \"@exoda/contracts/interfaces/token/ERC20/IERC20.sol\";\nimport \"@exoda/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./interfaces/IMagneticFieldGenerator.sol\";\nimport \"./interfaces/IPlanet.sol\";\n\n// MagneticFieldGenerator is the master of Fermion. He can make Fermion and he is a fair machine.\ncontract MagneticFieldGenerator is IMagneticFieldGenerator, Ownable\n{\n\tusing SafeERC20 for IERC20;\n\t\n\t// Accumulated Fermion Precision\n\tuint256 private constant _ACC_FERMION_PRECISSION = 1e12;\n\t// The block number when FMN mining starts.\n\tuint256 private immutable _startBlock;\n\t// FMN tokens created per block.\n\tuint256 private _fermionPerBlock;\n\t// Total allocation points. Must be the sum of all allocation points in all pools.\n\tuint256 private _totalAllocPoint; // Initializes with 0\n\t// The FMN TOKEN!\n\tIFermion private immutable _fermion;\n\t// The migrator contract. It has a lot of power. Can only be set through governance (owner).\n\tIMigratorDevice private _migrator;\n\t// The migrator contract. It has a lot of power. Can only be set through governance (owner).\n\tIMagneticFieldGenerator private _successor;\n\tIMagneticFieldGeneratorStore private _store;\n\tIPlanet private immutable _planet;\n\n\tconstructor(IFermion fermion, IPlanet planet, uint256 fermionPerBlock, uint256 startBlock)\n\t{\n\t\t_fermion = fermion;\n\t\t_fermionPerBlock = fermionPerBlock;\n\t\t_startBlock = startBlock;\n\t\t_planet = planet;\n\t\trequire(_fermion == _planet.token(), \"MFG: Wrong Planet\");\n\t}\n\n\tfunction setStore(IMagneticFieldGeneratorStore storeContract) override external onlyOwner\n\t{\n\t\t_store = storeContract;\n\t}\n\n\t/// @inheritdoc IMagneticFieldGenerator\n\tfunction add(uint256 allocPoint, IERC20 lpToken, uint256 lockPeriod) override public onlyOwner\n\t{\n\t\t// Do every time.\n\t\t// If a pool prevents massUpdatePools because of accFermionPerShare overflow disable the responsible pool with disablePool.\n\t\tmassUpdatePools();\n\t\tuint256 lastRewardBlock = block.number > _startBlock ? block.number : _startBlock;\n\t\t_totalAllocPoint = _totalAllocPoint + allocPoint;\n\t\tif(lpToken == _fermion)\n\t\t{\n\t\t\tlpToken = _planet;\n\t\t\t// Approve Planet to transfer fermion tokens.\n\t\t\t_fermion.approve(address(_planet), type(uint256).max);\n\t\t}\n\t\t_store.newPoolInfo(\n\t\t\tPoolInfo({\n\t\t\t\tlpToken: lpToken,\n\t\t\t\tallocPoint: allocPoint,\n\t\t\t\tlastRewardBlock: lastRewardBlock,\n\t\t\t\taccFermionPerShare: 0,\n\t\t\t\tinitialLock: lockPeriod > 0 ? lastRewardBlock + lockPeriod : 0\n\t\t\t})\n\t\t);\n\t\t\n\t\temit LogPoolAddition(_unsafeSub(_store.getPoolLength(), 1), allocPoint, lpToken); // Overflow not possible.\n\t}\n\n\t// Deposit LP tokens to MagneticFieldGenerator for FMN allocation.\n\tfunction deposit(uint256 pid, uint256 amount, address to) override public\n\t{\n\t\tPoolInfo memory pool = updatePool(pid);\n\t\tUserInfo memory user = _store.getUserInfo(pid, to);\n\n\t\tuser.amount = user.amount + amount;\n\t\tuser.rewardDebt += int256(((amount * pool.accFermionPerShare) / _ACC_FERMION_PRECISSION));\n\t\t_store.updateUserInfo(pid, to, user); // Save changes\n\n\t\t\n\t\t// If the deposit token is Fermion exchange the correct amount with PlanetFermion Tokens.\n\t\tif(pool.lpToken == _planet)\n\t\t{\n\t\t\t// Grab the Fermions\n\t\t\tSafeERC20.safeTransferFrom(_fermion, address(_msgSender()), address(this), amount);\n\t\t\t// Exchange the Fermions and send PlanetTokens to MFG.\n\t\t\t_planet.enter(amount, address(this));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tSafeERC20.safeTransferFrom(pool.lpToken, address(_msgSender()), address(this), amount);\n\t\t}\n\t\temit Deposit(_msgSender(), pid, amount, to);\n\t}\n\n\t// Update the given pool's FMN allocation point to 0. Can only be called by the owner.\n\t// This is necessary if a pool reaches a accFermionPerShare overflow.\n\tfunction disablePool(uint256 pid) public override onlyOwner\n\t{\n\t\t// Underflow is impossible since _totalAllocPoint can not be lower that _poolInfo[pid].allocPoint.\n\t\tPoolInfo memory pi = _store.getPoolInfo(pid);\n\t\t_totalAllocPoint = _unsafeSub(_totalAllocPoint, pi.allocPoint);\n\t\tpi.allocPoint = 0;\n\t\t_store.updatePoolInfo(pid, pi);\n\t}\n\n\t// Withdraw without careing about rewards. EMERGENCY ONLY.\n\tfunction emergencyWithdraw(uint256 pid, address to) public override\n\t{\n\t\tPoolInfo memory pool = _store.getPoolInfo(pid);\n\t\trequire(pool.initialLock < block.number, \"MFG: pool locked\");\n\t\tUserInfo memory user = _store.getUserInfo(pid,_msgSender());\n\n\t\tuint256 userAmount = user.amount;\n\n\t\tif(pool.lpToken == _planet)\n\t\t{\n\t\t\t//Special Handling Fermion Pool\n\t\t\t_planet.leave(userAmount, address(this));\n\t\t\tSafeERC20.safeTransfer(_fermion, to, userAmount);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpool.lpToken.safeTransfer(to, userAmount);\n\t\t}\n\t\temit EmergencyWithdraw(_msgSender(), pid, userAmount, to);\n\t\tuser.amount = 0;\n\t\tuser.rewardDebt = 0;\n\t\t_store.updateUserInfo(pid, _msgSender(), user);\n\t}\n\n\tfunction handOverToSuccessor(IMagneticFieldGenerator suc) override public onlyOwner\n\t{\n\t\t//TODO: DO ALL participants\n\t\trequire(address(_successor) == address(0), \"MFG: Successor already set\");\n\t\trequire(suc.owner() == address(this), \"MFG: Successor not owned by this\");\n\t\t_successor = suc;\n\t\t_fermion.transferOwnership(address(suc));\n\t\t_fermion.transfer(address(suc), _fermion.balanceOf(address(this)));\n\t\t// Hand over all pools no need for user interaction\n\t\tmassUpdatePools();\n\t\t_store.transferOwnership(address(suc));\n\t\t_successor.setStore(_store);\n\t\t// Hand over Planet\n\t\t_planet.transferOwnership(address(suc));\n\n\t\tsuc.transferOwnership(owner());\n\t}\n\n\t// Update reward variables for all pools. Be careful of gas spending!\n\tfunction massUpdatePools() public override\n\t{\n\t\t// Overflow of pid not possible and need not to be checked.\n\t\tunchecked\n\t\t{\n\t\t\tuint256 length = _store.getPoolLength();\n\t\t\tfor (uint256 pid = 0; pid < length; ++pid)\n\t\t\t{\n\t\t\t\tupdatePool(pid);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Migrate lp token to another lp contract. Can be called by anyone. We trust that migrator contract is good.\n\tfunction migrate(uint256 pid) override public onlyOwner\n\t{\n\t\trequire(address(_migrator) != address(0), \"migrate: no migrator\");\n\t\tPoolInfo memory pool = _store.getPoolInfo(pid);\n\t\tIERC20 lpToken = pool.lpToken;\n\t\tuint256 bal = lpToken.balanceOf(address(this));\n\t\tlpToken.safeApprove(address(_migrator), bal);\n\t\tIERC20 newLpToken = IERC20(_migrator.migrate(lpToken));\n\t\trequire(bal == newLpToken.balanceOf(address(this)), \"migrate: bad\");\n\t\tpool.lpToken = newLpToken;\n\t\t_store.updatePoolInfo(pid, pool);\n\t\temit Migrate(pid, bal, lpToken, newLpToken);\n\t}\n\n\t/// @notice Leaves the contract without owner. Can only be called by the current owner.\n\tfunction renounceOwnership() public override(Ownable, IMagneticFieldGenerator)\n\t{\n\t\tOwnable.renounceOwnership();\n\t}\n\n\t// Update the given pool's FMN allocation point. Can only be called by the owner.\n\tfunction set(uint256 pid, uint256 allocPoint) override public onlyOwner\n\t{\n\t\t// Do every time.\n\t\t// If a pool prevents massUpdatePools because of accFermionPerShare overflow disable the responsible pool with disablePool.\n\t\tmassUpdatePools();\n\t\tPoolInfo memory pi = _store.getPoolInfo(pid);\n\t\t// Underflow is impossible since _totalAllocPoint can not be lower that _poolInfo[pid].allocPoint.\n\t\t_totalAllocPoint = _unsafeSub(_totalAllocPoint, pi.allocPoint) + allocPoint;\n\t\tpi.allocPoint = allocPoint;\n\t\t_store.updatePoolInfo(pid, pi);\n\t\temit LogSetPool(pid, allocPoint);\n\t}\n\n\tfunction setFermionPerBlock(uint256 fermionPerBlock) override public onlyOwner\n\t{\n\t\tmassUpdatePools();\n\t\t_fermionPerBlock = fermionPerBlock;\n\t}\n\n\t// Set the migrator contract. Can only be called by the owner.\n\tfunction setMigrator(IMigratorDevice migratorContract) override public onlyOwner\n\t{\n\t\t_migrator = migratorContract;\n\t}\n\n\t/// @notice Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\n\tfunction transferOwnership(address newOwner) public override(Ownable, IMagneticFieldGenerator)\n\t{\n\t\tOwnable.transferOwnership(newOwner);\n\t}\n\n\t// Update reward variables of the given pool to be up-to-date.\n\tfunction updatePool(uint256 pid) override public returns(PoolInfo memory)\n\t{\n\t\tPoolInfo memory pool = _store.getPoolInfo(pid);\n\n\t\tif (block.number <= pool.lastRewardBlock)\n\t\t{\n\t\t\treturn pool;\n\t\t}\n\n\t\tuint256 lpSupply = pool.lpToken.balanceOf(address(this));\n\n\t\tif (lpSupply == 0)\n\t\t{\n\t\t\tpool.lastRewardBlock = block.number;\n\t\t\t_store.updatePoolInfo(pid, pool);\n\t\t\treturn pool;\n\t\t}\n\n\t\tuint256 fermionReward = _getFermionReward(_getMultiplier(pool.lastRewardBlock, block.number), pool.allocPoint);\n\t\tpool.accFermionPerShare = _getAccFermionPerShare(pool.accFermionPerShare, fermionReward, lpSupply);\n\t\t_fermion.mint(address(this), fermionReward);\n\t\tpool.lastRewardBlock = block.number;\n\t\t_store.updatePoolInfo(pid, pool);\n\t\temit LogUpdatePool(pid, pool.lastRewardBlock, lpSupply, pool.accFermionPerShare);\n\t\treturn pool;\n\t}\n\n\t// Harvests only Fermion tokens.\n\tfunction harvest(uint256 pid, address to) override public\n\t{\n\t\t// HINT: pool.accFermionPerShare can only grow till it overflows, at that point every withdraw will fail.\n\t\t// HINT: The owner can set pool allocPoint to 0 without pool reward update. After that all lp tokens can be withdrawn\n\t\t// HINT: including the rewards up to the the last sucessful pool reward update.\n\t\tPoolInfo memory pool = updatePool(pid);\n\t\tUserInfo memory user = _store.getUserInfo(pid, _msgSender());\n\t\t\n\t\t// Division of uint can not overflow.\n\t\tuint256 fermionShare = _unsafeDiv((user.amount *  pool.accFermionPerShare), _ACC_FERMION_PRECISSION);\n\t\tuint256 pending = uint256(int256(fermionShare) - user.rewardDebt);\n\t\tuser.rewardDebt = int256(fermionShare);\n\n\t\t_store.updateUserInfo(pid, _msgSender(), user);\n\t\t// THOUGHTS on a previous Fermion balance check at this point\n\t\t// The intend was that if there was a rounding error and MFG does therefore not hold enouth Fermion \n\t\t// the available amount of Fermion will be used.\n\t\t// BUT since all variables are used in divisions are uint especially accFermionPerShare.\n\t\t// Rounding errors can only appear in the form of cut of decimals.\n\t\t// A calculated fermionShare can therefor only be equal or smaller than the real value (with unlimited precision)\n\t\t// Therefore there should always be enough Fermion.\n\t\t_fermion.transfer(to, pending);\n\t\temit Harvest(_msgSender(), pid, pending, to);\n\t}\n\n\t// Withdraw LP tokens from MagneticFieldGenerator.\n\tfunction withdraw(uint256 pid, uint256 amount, address to) override public\n\t{\n\t\t// HINT: pool.accFermionPerShare can only grow till it overflows, at that point every withdraw will fail.\n\t\t// HINT: The owner can set pool allocPoint to 0 without pool reward update. After that all lp tokens can be withdrawn\n\t\t// HINT: including the rewards up to the the last sucessful pool reward update.\n\t\tPoolInfo memory pool = updatePool(pid);\n\t\trequire(pool.initialLock < block.number, \"MFG: pool locked\");\n\t\tUserInfo memory user =  _store.getUserInfo(pid, _msgSender());\n\t\t\n\t\tuint256 userAmount = user.amount;\n\t\trequire(userAmount >= amount, \"MFG: amount exeeds stored amount\");\n\n\t\tuint256 accFermionPerShare = pool.accFermionPerShare;\n\t\t// Since we only withdraw rewardDept will be negative.\n\t\tuser.rewardDebt = user.rewardDebt - int256(_unsafeDiv(amount * accFermionPerShare, _ACC_FERMION_PRECISSION));\n\t\t\n\t\t// Can not overflow. Checked with require.\n\t\tuserAmount = _unsafeSub(userAmount, amount);\n\t\tuser.amount = userAmount;\n\t\t_store.updateUserInfo(pid, _msgSender(), user);\n\t\tif(pool.lpToken == _planet)\n\t\t{\n\t\t\t//Special Handling Fermion Pool\n\t\t\t_planet.leave(amount, address(this));\n\t\t\tSafeERC20.safeTransfer(_fermion, to, amount);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpool.lpToken.safeTransfer(to, amount);\n\t\t}\n\t\temit Withdraw(_msgSender(), pid, amount, to);\n\t}\n\n\t// Withdraw LP tokens from MagneticFieldGenerator.\n\tfunction withdrawAndHarvest(uint256 pid, uint256 amount, address to) override public\n\t{\n\t\t// HINT: pool.accFermionPerShare can only grow till it overflows, at that point every withdraw will fail.\n\t\t// HINT: The owner can set pool allocPoint to 0 without pool reward update. After that all lp tokens can be withdrawn\n\t\t// HINT: including the rewards up to the the last sucessful pool reward update.\n\t\tPoolInfo memory pool = updatePool(pid);\n\t\trequire(pool.initialLock < block.number, \"MFG: pool locked\");\n\t\tUserInfo memory user = _store.getUserInfo(pid, _msgSender());\n\t\t\n\t\tuint256 userAmount = user.amount;\n\t\trequire(userAmount >= amount, \"MFG: amount exeeds stored amount\");\n\t\t\n\t\tuint256 accFermionPerShare = pool.accFermionPerShare;\n\n\t\t// Division of uint can not overflow.\n\t\tuint256 pending = uint256(int256(_unsafeDiv((user.amount * accFermionPerShare), _ACC_FERMION_PRECISSION)) - user.rewardDebt);\n\t\t// THOUGHTS on a previous Fermion balance check at this point\n\t\t// The intend was that if there was a rounding error and MFG does therefore not hold enouth Fermion \n\t\t// the available amount of Fermion will be used.\n\t\t// BUT since all variables are used in divisions are uint especially accFermionPerShare.\n\t\t// Rounding errors can only appear in the form of cut of decimals.\n\t\t// A calculated fermionShare can therefor only be equal or smaller than the real value (with unlimited precision)\n\t\t// Therefore there should always be enough Fermion.\n\t\t_fermion.transfer(to, pending);\n\n\t\t// Can not overflow. Checked with require.\n\t\tuserAmount = _unsafeSub(userAmount, amount);\n\t\tuser.amount = userAmount;\n\t\t// Division of uint can not overflow.\n\t\tuser.rewardDebt = int256(_unsafeDiv(userAmount * accFermionPerShare, _ACC_FERMION_PRECISSION));\n\t\t_store.updateUserInfo(pid, _msgSender(), user);\n\t\tif(pool.lpToken == _planet)\n\t\t{\n\t\t\t//Special Handling Fermion Pool\n\t\t\t_planet.leave(amount, address(this));\n\t\t\tSafeERC20.safeTransfer(_fermion, to, amount);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpool.lpToken.safeTransfer(to, amount);\n\t\t}\n\t\temit Withdraw(_msgSender(), pid, amount, to);\n\t\temit Harvest(_msgSender(), pid, pending, to);\n\t}\n\n\tfunction getFermionContract() public override view returns (IFermion)\n\t{\n\t\treturn _fermion;\n\t}\n\n\tfunction getFermionPerBlock() public override view returns (uint256)\n\t{\n\t\treturn _fermionPerBlock;\n\t}\n\n\tfunction getStartBlock() public override view returns (uint256)\n\t{\n\t\treturn _startBlock;\n\t}\n\n\tfunction getStore() override external view returns(IMagneticFieldGeneratorStore)\n\t{\n\t\treturn _store;\n\t}\n\n\t/// @notice Returns the current migrator.\n\tfunction migrator() override public view returns(IMigratorDevice)\n\t{\n\t\treturn _migrator;\n\t}\n\n\t/// @notice Returns the address of the current owner.\n\tfunction owner() public view override(Ownable, IMagneticFieldGenerator) returns (address)\n\t{\n\t\treturn Ownable.owner();\n\t}\n\n\t// View function to see pending FMNs on frontend.\n\tfunction pendingFermion(uint256 pid, address user) public view override returns (uint256)\n\t{\n\t\tPoolInfo memory pool = _store.getPoolInfo(pid);\n\t\tUserInfo memory singleUserInfo = _store.getUserInfo(pid, user);\n\t\tuint256 accFermionPerShare = pool.accFermionPerShare;\n\t\tuint256 lpSupply = pool.lpToken.balanceOf(address(this));\n\t\tif (block.number > pool.lastRewardBlock && lpSupply != 0)\n\t\t{\n\t\t\taccFermionPerShare = _getAccFermionPerShare(\n\t\t\t\taccFermionPerShare,\n\t\t\t\t_getFermionReward(_getMultiplier(pool.lastRewardBlock, block.number), pool.allocPoint)\n\t\t\t\t, lpSupply);\n\t\t}\n\t\treturn uint256(int256(_unsafeDiv((singleUserInfo.amount * accFermionPerShare), _ACC_FERMION_PRECISSION)) - singleUserInfo.rewardDebt);\n\t}\n\n\tfunction poolInfo(uint256 pid) override public view returns (PoolInfo memory)\n\t{\n\t\treturn _store.getPoolInfo(pid);\n\t}\n\n\tfunction poolLength() override public view returns (uint256)\n\t{\n\t\treturn _store.getPoolLength();\n\t}\n\n\t/// @notice Returns the address of the sucessor.\n\tfunction successor() override public view returns (IMagneticFieldGenerator)\n\t{\n\t\treturn _successor;\n\t}\n\n\tfunction totalAllocPoint() override public view returns (uint256)\n\t{\n\t\treturn _totalAllocPoint;\n\t}\n\n\tfunction userInfo(uint256 pid, address user) override public view returns (UserInfo memory)\n\t{\n\t\treturn _store.getUserInfo(pid, user);\n\t}\n\n\tfunction _getFermionReward(uint256 multiplier, uint256 allocPoint) private view returns (uint256)\n\t{\n\t\t// As long as the owner chooses sane values for _fermionPerBlock and pool.allocPoint it is unlikely that an overflow ever happens\n\t\t// Since _fermionPerBlock and pool.allocPoint are choosen by  the owner, it is the responsibility of the owner to ensure\n\t\t// that there is now overflow in multiplying these to values.\n\t\t// Divions can not generate an overflow if used with uint values. Div by 0 will always panic, wrapped or not.\n\t\t// The only place an overflow can happen (even very unlikeley) is if the multiplier gets big enouth to force an overflow.\n\t\treturn _unsafeDiv(multiplier * _unsafeMul(_fermionPerBlock, allocPoint), _totalAllocPoint);\n\t}\n\n\tfunction _getAccFermionPerShare(uint256 currentAccFermionShare, uint256 fermionReward, uint256 lpSupply) private pure returns (uint256)\n\t{\n\t\t// Divions can not generate an overflow if used with uint values. Div by 0 will always panic, wrapped or not.\n\n\t\t// Check for overflow for automatic pool deactivation.\n\t\treturn currentAccFermionShare + _unsafeDiv(fermionReward * _ACC_FERMION_PRECISSION, lpSupply); \n\t}\n\n\t// Return reward multiplier over the given _from to _to block.\n\tfunction _getMultiplier(uint256 from, uint256 to) private pure returns (uint256)\n\t{\n\t\tunchecked\n\t\t{\n\t\t\treturn to - from;\n\t\t}\n\t}\n\n\tfunction _unsafeDiv(uint256 a, uint256 b) private pure returns (uint256)\n\t{\n\t\tunchecked\n\t\t{\n\t\t\treturn a / b;\n\t\t}\n\t}\n\n\tfunction _unsafeMul(uint256 a, uint256 b) private pure returns (uint256)\n\t{\n\t\tunchecked\n\t\t{\n\t\t\treturn a * b;\n\t\t}\n\t}\n\n\tfunction _unsafeSub(uint256 a, uint256 b) private pure returns (uint256)\n\t{\n\t\tunchecked\n\t\t{\n\t\t\treturn a - b;\n\t\t}\n\t}\n}\n"
    },
    "contracts/structs/PoolInfo.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@exoda/contracts/interfaces/token/ERC20/IERC20.sol\";\n\n// Info of each pool.\nstruct PoolInfo\n{\n\tIERC20 lpToken; // Address of LP token contract.\n\tuint256 allocPoint; // How many allocation points assigned to this pool. FMNs to distribute per block.\n\tuint256 lastRewardBlock; // Last block number that FMNs distribution occurs.\n\tuint256 accFermionPerShare; // Accumulated FMNs per share, times _ACC_FERMION_PRECISSION. See below.\n\tuint256 initialLock; // Block until withdraw from the pool is not possible.\n}"
    },
    "contracts/structs/UserInfo.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Info of each user.\nstruct UserInfo\n{\n\tuint256 amount; // How many LP tokens the user has provided.\n\tint256 rewardDebt; // Reward debt. See explanation below.\n\t//\n\t// We do some fancy math here. Basically, any point in time, the amount of FMNs\n\t// entitled to a user but is pending to be distributed is:\n\t//\n\t//   pending reward = (user.amount * pool.accFermionPerShare) - user.rewardDebt\n\t//\n\t// Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\n\t//   1. The pool's `accFermionPerShare` (and `lastRewardBlock`) gets updated.\n\t//   2. User receives the pending reward sent to his/her address.\n\t//   3. User's `amount` gets updated.\n\t//   4. User's `rewardDebt` gets updated.\n}"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": true,
      "runs": 500000,
      "details": {
        "orderLiterals": true,
        "deduplicate": true,
        "cse": true,
        "constantOptimizer": true
      }
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
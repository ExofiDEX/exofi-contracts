{
  "address": "0x1c3FCb3DbC123957231302c34736932C40aAAE27",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20Metadata",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20Metadata",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IExofiswapPair",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairCount",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "contract IExofiswapPair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Metadata",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "contract IExofiswapPair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Metadata",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "contract IExofiswapPair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migrator",
      "outputs": [
        {
          "internalType": "contract IMigrator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairCodeHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFeeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMigrator",
          "name": "newMigrator",
          "type": "address"
        }
      ],
      "name": "setMigrator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4d142105d1bff9fff8077518244939b0299efcc90c60a8708e51b29cd144e2af",
  "receipt": {
    "to": null,
    "from": "0x1799e996EC140dC66680bb6e6AC331e40B827fe1",
    "contractAddress": "0x1c3FCb3DbC123957231302c34736932C40aAAE27",
    "transactionIndex": 90,
    "gasUsed": "4089266",
    "logsBloom": "0x00000000800000000000000000000000000000000000000000800000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000001000000000000000000000020000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000020020000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x2ec01a794795c67656b1be2735a485e8dd4bd81bda47cb21237c53c2a759aa75",
    "transactionHash": "0x4d142105d1bff9fff8077518244939b0299efcc90c60a8708e51b29cd144e2af",
    "logs": [
      {
        "transactionIndex": 90,
        "blockNumber": 7497968,
        "transactionHash": "0x4d142105d1bff9fff8077518244939b0299efcc90c60a8708e51b29cd144e2af",
        "address": "0x1c3FCb3DbC123957231302c34736932C40aAAE27",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001799e996ec140dc66680bb6e6ac331e40b827fe1"
        ],
        "data": "0x",
        "logIndex": 174,
        "blockHash": "0x2ec01a794795c67656b1be2735a485e8dd4bd81bda47cb21237c53c2a759aa75"
      }
    ],
    "blockNumber": 7497968,
    "cumulativeGasUsed": "12569343",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f7d2eb4c9de796a477ee3c103ef69e6d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20Metadata\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20Metadata\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IExofiswapPair\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairCount\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"contract IExofiswapPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"contract IExofiswapPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"contract IExofiswapPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"contract IMigrator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairCodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMigrator\",\"name\":\"newMigrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The current owner.\"}},\"renounceOwnership()\":{\"details\":\"Sets the zero address as the new contract owner.\"},\"transferOwnership(address)\":{\"params\":{\"newOwner\":\"The new owner of the contract.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when ownership is moved from one address to another.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Returns the current owner.\"},\"renounceOwnership()\":{\"notice\":\"Leaves the contract without an owner. It will not be possible to call {onlyOwner} functions anymore. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner. Emits an [`OwnershipTransferred`](#ownershiptransferred) event indicating the renounced ownership. Requirements: - Can only be called by the current owner. \"},\"transferOwnership(address)\":{\"notice\":\"Transfers ownership of the contract to a new address. Emits an [`OwnershipTransferred`](#ownershiptransferred) event indicating the transfered ownership. Requirements: - Can only be called by the current owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Exofiswap/ExofiswapFactory.sol\":\"ExofiswapFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500000},\"remappings\":[]},\"sources\":{\"@exoda/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/access/IOwnable.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @title Ownable contract module.\\n * @author Ing. Michael Goldfinger\\n * @notice Contract module which provides a basic access control mechanism, where\\n * there is an address (an owner) that can be granted exclusive access to specific functions.\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with the function {transferOwnership(address newOwner)}\\\".\\n * @dev This module is used through inheritance. It will make available the modifier\\n * {onlyOwner}, which can be applied to your functions to restrict their use to the owner.\\n */\\ncontract Ownable is IOwnable, Context\\n{\\n\\taddress private _owner;\\n\\n\\t/**\\n\\t* @notice Throws if called by any account other than the owner.\\n\\t*/\\n\\tmodifier onlyOwner()\\n\\t{\\n\\t\\trequire(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Initializes the contract setting the deployer as the initial owner.\\n\\t* \\n\\t* Emits an {OwnershipTransferred} event indicating the initially set ownership.\\n\\t*/\\n\\tconstructor()\\n\\t{\\n\\t\\t_transferOwnership(_msgSender());\\n\\t}\\n\\n\\t/// @inheritdoc IOwnable\\n\\tfunction renounceOwnership() override public virtual onlyOwner \\n\\t{\\n\\t\\t_transferOwnership(address(0));\\n\\t}\\n\\n\\t/// @inheritdoc IOwnable\\n\\tfunction transferOwnership(address newOwner) override public virtual onlyOwner\\n\\t{\\n\\t\\trequire(newOwner != address(0), \\\"Ownable: new owner is address(0)\\\");\\n\\t\\t_transferOwnership(newOwner);\\n\\t}\\n\\n\\t/// @inheritdoc IOwnable\\n\\tfunction owner() public view virtual override returns (address)\\n\\t{\\n\\t\\treturn _owner;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Transfers ownership of the contract to a new address.\\n\\t* Internal function without access restriction.\\n\\t* \\n\\t* Emits an {OwnershipTransferred} event indicating the transfered ownership.\\n\\t*/\\n\\tfunction _transferOwnership(address newOwner) internal virtual\\n\\t{\\n\\t\\taddress oldOwner = _owner;\\n\\t\\t_owner = newOwner;\\n\\t\\temit OwnershipTransferred(oldOwner, newOwner);\\n\\t}\\n}\\n\",\"keccak256\":\"0x2a1355eddd79ce931f562edbc248e876dc143cf0b53a087fff04c6d9aca69c18\",\"license\":\"MIT\"},\"@exoda/contracts/interfaces/access/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Ownable interface.\\n/// @author Ing. Michael Goldfinger\\n/// @notice This interface contains all visible functions and events for the Ownable contract module.\\ninterface IOwnable\\n{\\n\\t/// @notice Emitted when ownership is moved from one address to another.\\n\\t/// @param previousOwner (indexed) The owner of the contract until now.\\n\\t/// @param newOwner (indexed) The new owner of the contract.\\n\\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\t/**\\n\\t * @notice Leaves the contract without an owner. It will not be possible to call {onlyOwner} functions anymore.\\n\\t *\\n\\t * NOTE: Renouncing ownership will leave the contract without an owner,\\n\\t * thereby removing any functionality that is only available to the owner.\\n\\t *\\n\\t * Emits an [`OwnershipTransferred`](#ownershiptransferred) event indicating the renounced ownership.\\n\\t *\\n\\t * Requirements:\\n\\t * - Can only be called by the current owner.\\n\\t * \\n\\t * @dev Sets the zero address as the new contract owner.\\n\\t */\\n\\tfunction renounceOwnership() external;\\n\\n\\t/**\\n\\t * @notice Transfers ownership of the contract to a new address.\\n\\t *\\n\\t * Emits an [`OwnershipTransferred`](#ownershiptransferred) event indicating the transfered ownership.\\n\\t *\\n\\t * Requirements:\\n\\t * - Can only be called by the current owner.\\n\\t *\\n\\t * @param newOwner The new owner of the contract.\\n\\t */\\n\\tfunction transferOwnership(address newOwner) external;\\n\\n\\t/// @notice Returns the current owner.\\n\\t/// @return The current owner.\\n\\tfunction owner() external view returns (address);\\n}\",\"keccak256\":\"0xfec11d14cb2fce6cec8e81b199452a616199a58763a8497e37212f856f4a4e15\",\"license\":\"MIT\"},\"@exoda/contracts/interfaces/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC20 interface.\\n * @author Ing. Michael Goldfinger\\n * @notice Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20\\n{\\n\\t/**\\n\\t * @notice Emitted when the allowance of a {spender} for an {owner} is set to a new value.\\n\\t *\\n\\t * NOTE: {value} may be zero.\\n\\t * @param owner (indexed) The owner of the tokens.\\n\\t * @param spender (indexed) The spender for the tokens.\\n\\t * @param value The amount of tokens that got an allowance.\\n\\t */\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n\\t/**\\n\\t * @notice Emitted when {value} tokens are moved from one address {from} to another {to}.\\n\\t *\\n\\t * NOTE: {value} may be zero.\\n\\t * @param from (indexed) The origin of the transfer.\\n\\t * @param to (indexed) The target of the transfer.\\n\\t * @param value The amount of tokens that got transfered.\\n\\t */\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\t/**\\n\\t* @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n\\t*\\n\\t* Returns a boolean value indicating whether the operation succeeded.\\n\\t*\\n\\t* IMPORTANT: Beware that changing an allowance with this method brings the risk\\n\\t* that someone may use both the old and the new allowance by unfortunate\\n\\t* transaction ordering. One possible solution to mitigate this race\\n\\t* condition is to first reduce the spender's allowance to 0 and set the\\n\\t* desired value afterwards:\\n\\t* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\t*\\n\\t* Emits an {Approval} event.\\n\\t*/\\n\\tfunction approve(address spender, uint256 amount) external returns (bool);\\n\\n\\t/**\\n\\t* @dev Moves `amount` tokens from the caller's account to `to`.\\n\\t*\\n\\t* Returns a boolean value indicating whether the operation succeeded.\\n\\t*\\n\\t* Emits a {Transfer} event.\\n\\t*/\\n\\tfunction transfer(address to, uint256 amount) external returns (bool);\\n\\n\\t/**\\n\\t* @dev Moves `amount` tokens from `from` to `to` using the allowance mechanism.\\n\\t* `amount` is then deducted from the caller's allowance.\\n\\t*\\n\\t* Returns a boolean value indicating whether the operation succeeded.\\n\\t*\\n\\t* Emits a {Transfer} event.\\n\\t*/\\n\\tfunction transferFrom(address from, address to, uint256 amount) external returns (bool);\\n\\n\\t/**\\n\\t* @dev Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}.\\n\\t* This is zero by default.\\n\\t*\\n\\t* This value changes when {approve}, {increaseAllowance}, {decreseAllowance} or {transferFrom} are called.\\n\\t*/\\n\\tfunction allowance(address owner, address spender) external view returns (uint256);\\n\\n\\t/**\\n\\t* @dev Returns the amount of tokens owned by `account`.\\n\\t*/\\n\\tfunction balanceOf(address account) external view returns (uint256);\\n\\n\\t/**\\n\\t* @dev Returns the amount of tokens in existence.\\n\\t*/\\n\\tfunction totalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4f3061b0e883d9105a5ba012c092ed76b8bd8d7866274e084028df9a7d65d70e\",\"license\":\"MIT\"},\"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20AltApprove.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title ERC20Metadata interface.\\n/// @author Ing. Michael Goldfinger\\n/// @notice Interface for an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.\\n/// @dev This is not part of the ERC20 specification.\\ninterface IERC20AltApprove\\n{\\n\\t/**\\n\\t* @notice Atomically decreases the allowance granted to `spender` by the caller.\\n\\t*\\n\\t* This is an alternative to {approve} that can be used as a mitigation for\\n\\t* problems described in {IERC20-approve}.\\n\\t*\\n\\t* Emits an {Approval} event indicating the updated allowance.\\n\\t*\\n\\t* Requirements:\\n\\t*\\n\\t* - `spender` cannot be the zero address.\\n\\t* - `spender` must have allowance for the caller of at least\\n\\t* `subtractedValue`.\\n\\t*/\\n\\tfunction decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n\\t/**\\n\\t* @notice Atomically increases the allowance granted to `spender` by the caller.\\n\\t*\\n\\t* This is an alternative to {approve} that can be used as a mitigation for\\n\\t* problems described in {IERC20-approve}.\\n\\t*\\n\\t* Emits an {Approval} event indicating the updated allowance.\\n\\t*\\n\\t* Requirements:\\n\\t*\\n\\t* - `spender` cannot be the zero address.\\n\\t*/\\n\\tfunction increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n}\\n\",\"keccak256\":\"0xf5d46a19d6bbf90f6ff1fcaae366d803b9716d9f87f6ca94c73316de6769c71a\",\"license\":\"MIT\"},\"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/// @title ERC20Metadata interface.\\n/// @author Ing. Michael Goldfinger\\n/// @notice Interface for the optional metadata functions from the ERC20 standard.\\ninterface IERC20Metadata is IERC20\\n{\\n\\t/// @notice Returns the name of the token.\\n\\t/// @return The token name.\\n\\tfunction name() external view returns (string memory);\\n\\n\\t/// @notice Returns the symbol of the token.\\n\\t/// @return The symbol for the token.\\n\\tfunction symbol() external view returns (string memory);\\n\\n\\t/// @notice Returns the decimals of the token.\\n\\t/// @return The decimals for the token.\\n\\tfunction decimals() external pure returns (uint8);\\n}\\n\",\"keccak256\":\"0x5a794350da4c10ee1fe18ca092e8984cf4ca122f71519452cd0b6b77d9dffbae\",\"license\":\"MIT\"},\"@exoda/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/token/ERC20/extensions/IERC20AltApprove.sol\\\";\\nimport \\\"../../interfaces/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n* @notice Implementation of the {IERC20Metadata} interface.\\n* The IERC20Metadata interface extends the IERC20 interface.\\n*\\n* This implementation is agnostic to the way tokens are created. This means\\n* that a supply mechanism has to be added in a derived contract using {_mint}.\\n* For a generic mechanism see Open Zeppelins {ERC20PresetMinterPauser}.\\n*\\n* TIP: For a detailed writeup see our guide\\n* https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n* to implement supply mechanisms].\\n*\\n* We have followed general OpenZeppelin Contracts guidelines: functions revert\\n* instead returning `false` on failure. This behavior is nonetheless\\n* conventional and does not conflict with the expectations of ERC20\\n* applications.\\n*\\n* Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n* This allows applications to reconstruct the allowance for all accounts just\\n* by listening to said events. Other implementations of the EIP may not emit\\n* these events, as it isn't required by the specification.\\n*\\n* Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n* functions have been added to mitigate the well-known issues around setting\\n* allowances. See {IERC20-approve}.\\n*/\\ncontract ERC20 is Context, IERC20AltApprove, IERC20Metadata\\n{\\n\\tuint256 internal _totalSupply;\\n\\tmapping(address => uint256) internal _balances;\\n\\tmapping(address => mapping(address => uint256)) private _allowances;\\n\\tstring private _name;\\n\\tstring private _symbol;\\n\\n\\t/**\\n\\t* @notice Sets the values for {name} and {symbol}.\\n\\t*\\n\\t* The default value of {decimals} is 18. To select a different value for\\n\\t* {decimals} you should overload it.\\n\\t*\\n\\t* All two of these values are immutable: they can only be set once during\\n\\t* construction.\\n\\t*/\\n\\tconstructor(string memory tokenName, string memory tokenSymbol)\\n\\t{\\n\\t\\t_name = tokenName;\\n\\t\\t_symbol = tokenSymbol;\\n\\t}\\n\\n\\t/**\\n\\t* @notice See {IERC20-approve}.\\n\\t*\\n\\t* NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n\\t* `transferFrom`. This is semantically equivalent to an infinite approval.\\n\\t*\\n\\t* Requirements:\\n\\t*\\n\\t* - `spender` cannot be the zero address.\\n\\t*/\\n\\tfunction approve(address spender, uint256 amount) override public virtual returns (bool)\\n\\t{\\n\\t\\taddress owner = _msgSender();\\n\\t\\t_approve(owner, spender, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Atomically decreases the allowance granted to `spender` by the caller.\\n\\t*\\n\\t* This is an alternative to {approve} that can be used as a mitigation for\\n\\t* problems described in {IERC20-approve}.\\n\\t*\\n\\t* Emits an {Approval} event indicating the updated allowance.\\n\\t*\\n\\t* Requirements:\\n\\t*\\n\\t* - `spender` cannot be the zero address.\\n\\t* - `spender` must have allowance for the caller of at least\\n\\t* `subtractedValue`.\\n\\t*/\\n\\tfunction decreaseAllowance(address spender, uint256 subtractedValue) override public virtual returns (bool)\\n\\t{\\n\\t\\taddress owner = _msgSender();\\n\\t\\tuint256 currentAllowance = allowance(owner, spender);\\n\\t\\trequire(currentAllowance >= subtractedValue, \\\"ERC20: reduced allowance below 0\\\");\\n\\t\\tunchecked {\\n\\t\\t\\t_approve(owner, spender, currentAllowance - subtractedValue);\\n\\t\\t}\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Atomically increases the allowance granted to `spender` by the caller.\\n\\t*\\n\\t* This is an alternative to {approve} that can be used as a mitigation for\\n\\t* problems described in {IERC20-approve}.\\n\\t*\\n\\t* Emits an {Approval} event indicating the updated allowance.\\n\\t*\\n\\t* Requirements:\\n\\t*\\n\\t* - `spender` cannot be the zero address.\\n\\t*/\\n\\tfunction increaseAllowance(address spender, uint256 addedValue) override public virtual returns (bool)\\n\\t{\\n\\t\\taddress owner = _msgSender();\\n\\t\\t_approve(owner, spender, allowance(owner, spender) + addedValue);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t* @notice See {IERC20-transfer}.\\n\\t*\\n\\t* Requirements:\\n\\t*\\n\\t* - `to` cannot be the zero address.\\n\\t* - the caller must have a balance of at least `amount`.\\n\\t*/\\n\\tfunction transfer(address to, uint256 amount) override public virtual returns (bool)\\n\\t{\\n\\t\\taddress owner = _msgSender();\\n\\t\\t_transfer(owner, to, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t* @notice See {IERC20-transferFrom}.\\n\\t*\\n\\t* Emits an {Approval} event indicating the updated allowance. This is not\\n\\t* required by the EIP. See the note at the beginning of {ERC20}.\\n\\t*\\n\\t* NOTE: Does not update the allowance if the current allowance is the maximum `uint256`.\\n\\t*\\n\\t* Requirements:\\n\\t*\\n\\t* - `from` and `to` cannot be the zero address.\\n\\t* - `from` must have a balance of at least `amount`.\\n\\t* - the caller must have allowance for ``from``'s tokens of at least\\n\\t* `amount`.\\n\\t*/\\n\\tfunction transferFrom(address from, address to, uint256 amount) override public virtual returns (bool)\\n\\t{\\n\\t\\taddress spender = _msgSender();\\n\\t\\t_spendAllowance(from, spender, amount);\\n\\t\\t_transfer(from, to, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t* @notice See {IERC20-allowance}.\\n\\t*/\\n\\tfunction allowance(address owner, address spender) override public view virtual returns (uint256)\\n\\t{\\n\\t\\treturn _allowances[owner][spender];\\n\\t}\\n\\n\\t/**\\n\\t* @notice See {IERC20-balanceOf}.\\n\\t*/\\n\\tfunction balanceOf(address account) override public view virtual returns (uint256)\\n\\t{\\n\\t\\treturn _balances[account];\\n\\t}\\n\\n\\t/**\\n\\t* @notice Returns the name of the token.\\n\\t*/\\n\\tfunction name() override public view virtual returns (string memory)\\n\\t{\\n\\t\\treturn _name;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Returns the symbol of the token, usually a shorter version of the\\n\\t* name.\\n\\t*/\\n\\tfunction symbol() override public view virtual returns (string memory)\\n\\t{\\n\\t\\treturn _symbol;\\n\\t}\\n\\n\\t/**\\n\\t* @notice See {IERC20-totalSupply}.\\n\\t*/\\n\\tfunction totalSupply() override public view virtual returns (uint256)\\n\\t{\\n\\t\\treturn _totalSupply;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Returns the number of decimals used to get its user representation.\\n\\t* For example, if `decimals` equals `2`, a balance of `505` tokens should\\n\\t* be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n\\t*\\n\\t* Tokens usually opt for a value of 18, imitating the relationship between\\n\\t* Ether and Wei. This is the value {ERC20} uses, unless this function is\\n\\t* overridden;\\n\\t*\\n\\t* NOTE: This information is only used for _display_ purposes: it in\\n\\t* no way affects any of the arithmetic of the contract, including\\n\\t* {IERC20-balanceOf} and {IERC20-transfer}.\\n\\t*/\\n\\tfunction decimals() override public pure virtual returns (uint8)\\n\\t{\\n\\t\\treturn 18;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n\\t*\\n\\t* This internal function is equivalent to `approve`, and can be used to\\n\\t* e.g. set automatic allowances for certain subsystems, etc.\\n\\t*\\n\\t* Emits an {Approval} event.\\n\\t*\\n\\t* Requirements:\\n\\t*\\n\\t* - `owner` cannot be the zero address.\\n\\t* - `spender` cannot be the zero address.\\n\\t*/\\n\\tfunction _approve(address owner, address spender, uint256 amount) internal virtual\\n\\t{\\n\\t\\trequire(owner != address(0), \\\"ERC20: approve from address(0)\\\");\\n\\t\\trequire(spender != address(0), \\\"ERC20: approve to address(0)\\\");\\n\\n\\t\\t_allowances[owner][spender] = amount;\\n\\t\\temit Approval(owner, spender, amount);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Destroys `amount` tokens from `account`, reducing the\\n\\t* total supply.\\n\\t*\\n\\t* Emits a {Transfer} event with `to` set to the zero address.\\n\\t*\\n\\t* Requirements:\\n\\t*\\n\\t* - `account` cannot be the zero address.\\n\\t* - `account` must have at least `amount` tokens.\\n\\t*/\\n\\tfunction _burn(address account, uint256 amount) internal virtual {\\n\\t\\trequire(account != address(0), \\\"ERC20: burn from address(0)\\\");\\n\\n\\t\\tuint256 accountBalance = _balances[account];\\n\\t\\trequire(accountBalance >= amount, \\\"ERC20: burn exceeds balance\\\");\\n\\t\\tunchecked {\\n\\t\\t\\t_balances[account] = accountBalance - amount;\\n\\t\\t}\\n\\t\\t_totalSupply -= amount;\\n\\n\\t\\temit Transfer(account, address(0), amount);\\n\\t}\\n\\n\\t/** @notice Creates `amount` tokens and assigns them to `account`, increasing\\n\\t* the total supply.\\n\\t*\\n\\t* Emits a {Transfer} event with `from` set to the zero address.\\n\\t*\\n\\t* Requirements:\\n\\t*\\n\\t* - `account` cannot be the zero address.\\n\\t*/\\n\\tfunction _mint(address account, uint256 amount) internal virtual\\n\\t{\\n\\t\\trequire(account != address(0), \\\"ERC20: mint to address(0)\\\");\\n\\n\\t\\t_totalSupply += amount;\\n\\t\\t_balances[account] += amount;\\n\\t\\temit Transfer(address(0), account, amount);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Updates `owner` s allowance for `spender` based on spent `amount`.\\n\\t*\\n\\t* Does not update the allowance amount in case of infinite allowance.\\n\\t* Revert if not enough allowance is available.\\n\\t*\\n\\t* Might emit an {Approval} event.\\n\\t*/\\n\\tfunction _spendAllowance(address owner, address spender, uint256 amount) internal virtual\\n\\t{\\n\\t\\tuint256 currentAllowance = allowance(owner, spender);\\n\\t\\tif (currentAllowance != type(uint256).max) {\\n\\t\\t\\trequire(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\t_approve(owner, spender, currentAllowance - amount);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t* @notice Moves `amount` of tokens from `sender` to `recipient`.\\n\\t*\\n\\t* This internal function is equivalent to {transfer}, and can be used to\\n\\t* e.g. implement automatic token fees, slashing mechanisms, etc.\\n\\t*\\n\\t* Emits a {Transfer} event.\\n\\t*\\n\\t* Requirements:\\n\\t*\\n\\t* - `from` cannot be the zero address.\\n\\t* - `to` cannot be the zero address.\\n\\t* - `from` must have a balance of at least `amount`.\\n\\t*/\\n\\tfunction _transfer(address from, address to, uint256 amount) internal virtual\\n\\t{\\n\\t\\trequire(from != address(0), \\\"ERC20: transfer from address(0)\\\");\\n\\t\\trequire(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n\\t\\tuint256 fromBalance = _balances[from];\\n\\t\\trequire(fromBalance >= amount, \\\"ERC20: transfer exceeds balance\\\");\\n\\t\\tunchecked {\\n\\t\\t\\t_balances[from] = fromBalance - amount;\\n\\t\\t}\\n\\t\\t_balances[to] += amount;\\n\\n\\t\\temit Transfer(from, to, amount);\\n\\t}\\n}\\n\",\"keccak256\":\"0x198e112cc4721a4b8c8d85b2e8be7e22f8c134bc66639971e3e7df702bd2da8e\",\"license\":\"MIT\"},\"@exoda/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../interfaces/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20\\n{\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal\\n    {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal\\n    {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal\\n    {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \\\"SafeERC20: exploitable approve\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal\\n    {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal\\n    {\\n        unchecked\\n        {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: reduced allowance <0\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private\\n    {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0)\\n        {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 call failed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x00fc0fe2fe04c3f13fe89d84893559b5c7cd0d2f05fbc8cbbec86dbf187c5b19\",\"license\":\"MIT\"},\"@exoda/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address\\n{\\n    /* solhint-disable max-line-length */\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n     /* solhint-enable max-line-length */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory)\\n    {\\n        return functionCallWithValue(target, data, 0, \\\"Address: call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory)\\n    {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory)\\n    {\\n        return functionCallWithValue(target, data, value, \\\"Address: call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory)\\n    {\\n        require(address(this).balance >= value, \\\"Address: balance to low for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) internal pure returns (bytes memory)\\n    {\\n        if (success)\\n        {\\n            return returndata;\\n        } else\\n        {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly\\n                {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            }\\n            else\\n            {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x604778c14ede98c4774b74bcc43f066778c602371bc5a603e7477d95d25546d1\",\"license\":\"MIT\"},\"@exoda/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n* @notice Provides information about the current execution context, including the\\n* sender of the transaction and its data. While these are generally available\\n* via msg.sender and msg.data, they should not be accessed in such a direct\\n* manner, since when dealing with meta-transactions the account sending and\\n* paying for execution may not be the actual sender (as far as an application\\n* is concerned).\\n*\\n* This contract is only required for intermediate, library-like contracts.\\n*/\\nabstract contract Context\\n{\\n\\t/// @notice returns the sender of the transaction.\\n\\t/// @return The sender of the transaction.\\n\\tfunction _msgSender() internal view virtual returns (address)\\n\\t{\\n\\t\\treturn msg.sender;\\n\\t}\\n\\n\\t/// @notice returns the data of the transaction.\\n\\t/// @return The data of the transaction.\\n\\tfunction _msgData() internal view virtual returns (bytes calldata)\\n\\t{\\n\\t\\treturn msg.data;\\n\\t}\\n}\\n\",\"keccak256\":\"0xce68a1ae85d9c12dba94f20a2af4f1eeeb187c4631e663a7d8181bd5cbf39035\",\"license\":\"MIT\"},\"contracts/Exofiswap/ExofiswapERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@exoda/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./interfaces/IExofiswapERC20.sol\\\";\\n\\ncontract ExofiswapERC20 is ERC20, IExofiswapERC20\\n{\\n\\t// keccak256(\\\"permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\tbytes32 private constant _PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\tmapping(address => uint256) private _nonces;\\n\\n\\tconstructor(string memory tokenName) ERC20(tokenName, \\\"ENERGY\\\")\\n\\t{ } // solhint-disable-line no-empty-blocks\\n\\n\\t// The standard ERC-20 race condition for approvals applies to permit as well.\\n\\tfunction permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) override public\\n\\t{\\n\\t\\t// solhint-disable-next-line not-rely-on-time\\n\\t\\trequire(deadline >= block.timestamp, \\\"Exofiswap: EXPIRED\\\");\\n\\t\\tbytes32 digest = keccak256(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\\"\\\\x19\\\\x01\\\",\\n\\t\\t\\t\\tDOMAIN_SEPARATOR(),\\n\\t\\t\\t\\tkeccak256(\\n\\t\\t\\t\\t\\tabi.encode(\\n\\t\\t\\t\\t\\t\\t_PERMIT_TYPEHASH,\\n\\t\\t\\t\\t\\t\\towner,\\n\\t\\t\\t\\t\\t\\tspender,\\n\\t\\t\\t\\t\\t\\tvalue,\\n\\t\\t\\t\\t\\t\\t_nonces[owner]++,\\n\\t\\t\\t\\t\\t\\tdeadline\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t)\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\taddress recoveredAddress = ecrecover(digest, v, r, s);\\n\\t\\t// Since the ecrecover precompile fails silently and just returns the zero address as signer when given malformed messages,\\n\\t\\t// it is important to ensure owner != address(0) to avoid permit from creating an approval to spend \\u201czombie funds\\u201d\\n\\t\\t// belong to the zero address.\\n\\t\\trequire(recoveredAddress != address(0) && recoveredAddress == owner, \\\"Exofiswap: INVALID_SIGNATURE\\\");\\n\\t\\t_approve(owner, spender, value);\\n\\t}\\n\\n\\t// solhint-disable-next-line func-name-mixedcase\\n\\tfunction DOMAIN_SEPARATOR() override public view returns(bytes32)\\n\\t{\\n\\t\\t// If the DOMAIN_SEPARATOR contains the chainId and is defined at contract deployment instead of reconstructed\\n\\t\\t// for every signature, there is a risk of possible replay attacks between chains in the event of a future chain split\\n\\t\\treturn keccak256(\\n\\t\\t\\tabi.encode(\\n\\t\\t\\t\\tkeccak256(\\n\\t\\t\\t\\t\\t\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n\\t\\t\\t\\t),\\n\\t\\t\\t\\tkeccak256(bytes(name())),\\n\\t\\t\\t\\tkeccak256(bytes(\\\"1\\\")),\\n\\t\\t\\t\\tblock.chainid,\\n\\t\\t\\t\\taddress(this)\\n\\t\\t\\t)\\n\\t\\t);\\n\\t}\\n\\n\\tfunction nonces(address owner) override public view returns (uint256)\\n\\t{\\n\\t\\treturn _nonces[owner];\\n\\t}\\n\\n\\tfunction PERMIT_TYPEHASH() override public pure returns (bytes32) //solhint-disable-line func-name-mixedcase\\n\\t{\\n\\t\\treturn _PERMIT_TYPEHASH;\\n\\t}\\n}\\n\",\"keccak256\":\"0x62fcc7d21348884b22a93a7610115f7d8becd9a9b1606a4d32c27a926c307cd5\",\"license\":\"MIT\"},\"contracts/Exofiswap/ExofiswapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@exoda/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IExofiswapFactory.sol\\\";\\nimport \\\"./interfaces/IExofiswapPair.sol\\\";\\nimport \\\"./ExofiswapPair.sol\\\";\\n\\ncontract ExofiswapFactory is IExofiswapFactory, Ownable\\n{\\n\\taddress private _feeTo;\\n\\tIMigrator private _migrator;\\n\\tmapping(IERC20Metadata => mapping(IERC20Metadata => IExofiswapPair)) private _getPair;\\n\\tIExofiswapPair[] private _allPairs;\\n\\n\\tconstructor()\\n\\t{} // solhint-disable-line no-empty-blocks\\n\\n\\tfunction createPair(IERC20Metadata tokenA, IERC20Metadata tokenB) override public returns (IExofiswapPair)\\n\\t{\\n\\t\\trequire(tokenA != tokenB, \\\"EF: IDENTICAL_ADDRESSES\\\");\\n\\t\\t(IERC20Metadata token0, IERC20Metadata token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n\\t\\trequire(address(token0) != address(0), \\\"EF: ZERO_ADDRESS\\\");\\n\\t\\trequire(address(_getPair[token0][token1]) == address(0), \\\"EF: PAIR_EXISTS\\\"); // single check is sufficient\\n\\n\\t\\tbytes32 salt = keccak256(abi.encodePacked(token0, token1));\\n\\t\\tIExofiswapPair pair = new ExofiswapPair{salt: salt}(); // Use create2\\n\\t\\tpair.initialize(token0, token1);\\n\\n\\t\\t_getPair[token0][token1] = pair;\\n\\t\\t_getPair[token1][token0] = pair; // populate mapping in the reverse direction\\n\\t\\t_allPairs.push(pair);\\n\\t\\temit PairCreated(token0, token1, pair, _allPairs.length);\\n\\t\\treturn pair;\\n\\t}\\n\\n\\tfunction setFeeTo(address newFeeTo) override public onlyOwner\\n\\t{\\n\\t\\t_feeTo = newFeeTo;\\n\\t}\\n\\n\\tfunction setMigrator(IMigrator newMigrator) override public onlyOwner\\n\\t{\\n\\t\\t_migrator = newMigrator;\\n\\t}\\n\\n\\tfunction allPairs(uint256 index) override public view returns (IExofiswapPair)\\n\\t{\\n\\t\\treturn _allPairs[index];\\n\\t}\\n\\n\\tfunction allPairsLength() override public view returns (uint256)\\n\\t{\\n\\t\\treturn _allPairs.length;\\n\\t}\\n\\n\\tfunction feeTo() override public view returns (address)\\n\\t{\\n\\t\\treturn _feeTo;\\n\\t}\\n\\n\\tfunction getPair(IERC20Metadata tokenA, IERC20Metadata tokenB) override public view returns (IExofiswapPair)\\n\\t{\\n\\t\\treturn _getPair[tokenA][tokenB];\\n\\t}\\n\\n\\tfunction migrator() override public view returns (IMigrator)\\n\\t{\\n\\t\\treturn _migrator;\\n\\t}\\n\\n\\tfunction pairCodeHash() override public pure returns (bytes32)\\n\\t{\\n\\t\\treturn keccak256(type(ExofiswapPair).creationCode);\\n\\t}\\n}\\n\",\"keccak256\":\"0xe49f6580703905d38e36a647be5cae5c7fd92970cc4b6df864c1285764302579\",\"license\":\"MIT\"},\"contracts/Exofiswap/ExofiswapPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@exoda/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IExofiswapCallee.sol\\\";\\nimport \\\"./interfaces/IExofiswapFactory.sol\\\";\\nimport \\\"./interfaces/IExofiswapPair.sol\\\";\\nimport \\\"./interfaces/IMigrator.sol\\\";\\nimport \\\"./ExofiswapERC20.sol\\\";\\nimport \\\"./libraries/MathUInt32.sol\\\";\\nimport \\\"./libraries/MathUInt256.sol\\\";\\nimport \\\"./libraries/UQ144x112.sol\\\";\\n\\ncontract ExofiswapPair is IExofiswapPair, ExofiswapERC20\\n{\\n\\t// using UQ144x112 for uint256;\\n\\t// using SafeERC20 for IERC20Metadata; // For some unknown reason using this needs a little more gas than using the library without it.\\n\\tstruct SwapAmount // needed to reduce stack deep;\\n\\t{\\n\\t\\tuint256 balance0;\\n\\t\\tuint256 balance1;\\n\\t\\tuint112 reserve0;\\n\\t\\tuint112 reserve1;\\n\\t}\\n\\n\\tuint256 private constant _MINIMUM_LIQUIDITY = 10**3;\\n\\tuint256 private _price0CumulativeLast;\\n\\tuint256 private _price1CumulativeLast;\\n\\tuint256 private _kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\\n\\tuint256 private _unlocked = 1;\\n\\tuint112 private _reserve0;           // uses single storage slot, accessible via getReserves\\n\\tuint112 private _reserve1;           // uses single storage slot, accessible via getReserves\\n\\tuint32  private _blockTimestampLast; // uses single storage slot, accessible via getReserves\\n\\tIExofiswapFactory private immutable _factory;\\n\\tIERC20Metadata private _token0;\\n\\tIERC20Metadata private _token1;\\n\\n\\tmodifier lock()\\n\\t{\\n\\t\\trequire(_unlocked == 1, \\\"EP: LOCKED\\\");\\n\\t\\t_unlocked = 0;\\n\\t\\t_;\\n\\t\\t_unlocked = 1;\\n\\t}\\n\\n\\tconstructor() ExofiswapERC20(\\\"Plasma\\\")\\n\\t{\\n\\t\\t_factory = IExofiswapFactory(_msgSender());\\n\\t}\\n\\n\\t// called once by the factory at time of deployment\\n\\tfunction initialize(IERC20Metadata token0Init, IERC20Metadata token1Init) override external\\n\\t{\\n\\t\\trequire(_msgSender() == address(_factory), \\\"EP: FORBIDDEN\\\");\\n\\t\\t_token0 = token0Init;\\n\\t\\t_token1 = token1Init;\\n\\t}\\n\\n\\t// this low-level function should be called from a contract which performs important safety checks\\n\\tfunction burn(address to) override public lock returns (uint, uint)\\n\\t{\\n\\t\\tSwapAmount memory sa;\\n\\t\\t(sa.reserve0, sa.reserve1,) = getReserves(); // gas savings\\n\\t\\tsa.balance0 = _token0.balanceOf(address(this));\\n\\t\\tsa.balance1 = _token1.balanceOf(address(this));\\n\\t\\tuint256 liquidity = balanceOf(address(this));\\n\\n\\t\\t// Can not overflow\\n\\t\\tbool feeOn = _mintFee(MathUInt256.unsafeMul(sa.reserve0, sa.reserve1));\\n\\t\\tuint256 totalSupplyValue = _totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n\\t\\tuint256 amount0 = MathUInt256.unsafeDiv(liquidity * sa.balance0, totalSupplyValue); // using balances ensures pro-rata distribution\\n\\t\\tuint256 amount1 = MathUInt256.unsafeDiv(liquidity * sa.balance1, totalSupplyValue); // using balances ensures pro-rata distribution\\n\\t\\trequire(amount0 > 0 && amount1 > 0, \\\"EP: INSUFFICIENT_LIQUIDITY\\\");\\n\\t\\t_burn(address(this), liquidity);\\n\\t\\tSafeERC20.safeTransfer(_token0, to, amount0);\\n\\t\\tSafeERC20.safeTransfer(_token1, to, amount1);\\n\\t\\tsa.balance0 = _token0.balanceOf(address(this));\\n\\t\\tsa.balance1 = _token1.balanceOf(address(this));\\n\\n\\t\\t_update(sa);\\n\\n\\t\\tif (feeOn)\\n\\t\\t{\\n\\t\\t\\tunchecked // Can not overflow\\n\\t\\t\\t{\\n\\t\\t\\t\\t// _reserve0 and _reserve1 are up-to-date\\n\\t\\t\\t\\t// What _update(sa) does is set _reserve0 to sa.balance0 and _reserve1 to sa.balance1\\n\\t\\t\\t\\t// So there is no neet to access and converte the _reserves directly,\\n\\t\\t\\t\\t// instead use the known balances that are already in the correct type.\\n\\t\\t\\t\\t_kLast = sa.balance0 * sa.balance1; \\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\temit Burn(msg.sender, amount0, amount1, to);\\n\\t\\treturn (amount0, amount1);\\n\\t}\\n\\n\\t// this low-level function should be called from a contract which performs important safety checks\\n\\tfunction mint(address to) override public lock returns (uint256)\\n\\t{\\n\\t\\tSwapAmount memory sa;\\n\\t\\t(sa.reserve0, sa.reserve1,) = getReserves(); // gas savings\\n\\t\\tsa.balance0 = _token0.balanceOf(address(this));\\n\\t\\tsa.balance1 = _token1.balanceOf(address(this));\\n\\t\\tuint256 amount0 = sa.balance0 - sa.reserve0;\\n\\t\\tuint256 amount1 = sa.balance1 - sa.reserve1;\\n\\n\\t\\tbool feeOn = _mintFee(MathUInt256.unsafeMul(sa.reserve0, sa.reserve1));\\n\\t\\tuint256 totalSupplyValue = _totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n\\t\\tuint256 liquidity;\\n\\n\\t\\tif (totalSupplyValue == 0)\\n\\t\\t{\\n\\t\\t\\tIMigrator migrator = _factory.migrator();\\n\\t\\t\\tif (_msgSender() == address(migrator))\\n\\t\\t\\t{\\n\\t\\t\\t\\tliquidity = migrator.desiredLiquidity();\\n\\t\\t\\t\\trequire(liquidity > 0 && liquidity != type(uint256).max, \\\"EP: Liquidity Error\\\");\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\trequire(address(migrator) == address(0), \\\"EP: Migrator set\\\");\\n\\t\\t\\t\\tliquidity = MathUInt256.sqrt(amount0 * amount1) - _MINIMUM_LIQUIDITY;\\n\\t\\t\\t\\t_mintMinimumLiquidity();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\t//Div by uint can not overflow\\n\\t\\t\\tliquidity = \\n\\t\\t\\t\\tMathUInt256.min(\\n\\t\\t\\t\\t\\tMathUInt256.unsafeDiv(amount0 * totalSupplyValue, sa.reserve0),\\n\\t\\t\\t\\t\\tMathUInt256.unsafeDiv(amount1 * totalSupplyValue, sa.reserve1)\\n\\t\\t\\t\\t);\\n\\t\\t}\\n\\t\\trequire(liquidity > 0, \\\"EP: INSUFFICIENT_LIQUIDITY\\\");\\n\\t\\t_mint(to, liquidity);\\n\\n\\t\\t_update(sa);\\n\\t\\tif (feeOn)\\n\\t\\t{\\n\\t\\t\\t// _reserve0 and _reserve1 are up-to-date\\n\\t\\t\\t// What _update(sa) does is set _reserve0 to sa.balance0 and _reserve1 to sa.balance1\\n\\t\\t\\t// So there is no neet to access and converte the _reserves directly,\\n\\t\\t\\t// instead use the known balances that are already in the correct type.\\n\\t\\t\\t_kLast = sa.balance0 * sa.balance1; \\n\\t\\t}\\n\\t\\temit Mint(_msgSender(), amount0, amount1);\\n\\t\\treturn liquidity;\\n\\t}\\n\\n\\t// force balances to match reserves\\n\\tfunction skim(address to) override public lock\\n\\t{\\n\\t\\tSafeERC20.safeTransfer(_token0, to, _token0.balanceOf(address(this)) - _reserve0);\\n\\t\\tSafeERC20.safeTransfer(_token1, to, _token1.balanceOf(address(this)) - _reserve1);\\n\\t}\\n\\n\\t// this low-level function should be called from a contract which performs important safety checks\\n\\tfunction swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) override public lock\\n\\t{\\n\\t\\trequire(amount0Out > 0 || amount1Out > 0, \\\"EP: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n\\t\\tSwapAmount memory sa;\\n\\t\\t(sa.reserve0, sa.reserve1, ) = getReserves(); // gas savings\\n\\t\\trequire(amount0Out < sa.reserve0, \\\"EP: INSUFFICIENT_LIQUIDITY\\\");\\n\\t\\trequire(amount1Out < sa.reserve1, \\\"EP: INSUFFICIENT_LIQUIDITY\\\");\\n\\n\\t\\t(sa.balance0, sa.balance1) = _transferTokens(to, amount0Out, amount1Out, data);\\n\\n\\t\\t(uint256 amount0In, uint256 amount1In) = _getInAmounts(amount0Out, amount1Out, sa);\\n\\t\\trequire(amount0In > 0 || amount1In > 0, \\\"EP: INSUFFICIENT_INPUT_AMOUNT\\\");\\n\\t\\t{ \\n\\t\\t\\t// This is a sanity check to make sure we don't lose from the swap.\\n\\t\\t\\t// scope for reserve{0,1} Adjusted, avoids stack too deep errors\\n\\t\\t\\tuint256 balance0Adjusted = (sa.balance0 * 1000) - (amount0In * 3); \\n\\t\\t\\tuint256 balance1Adjusted = (sa.balance1 * 1000) - (amount1In * 3); \\n\\t\\t\\t// 112 bit * 112 bit * 20 bit can not overflow a 256 bit value\\n\\t\\t\\t// Bigest possible number is 2,695994666715063979466701508702e+73\\n\\t\\t\\t// uint256 maxvalue is 1,1579208923731619542357098500869e+77\\n\\t\\t\\t// or 2**112 * 2**112 * 2**20 = 2**244 < 2**256\\n\\t\\t\\trequire(balance0Adjusted * balance1Adjusted >= MathUInt256.unsafeMul(MathUInt256.unsafeMul(sa.reserve0, sa.reserve1), 1_000_000), \\\"EP: K\\\");\\n\\t\\t}\\n\\t\\t_update(sa);\\n\\t\\temit Swap(_msgSender(), amount0In, amount1In, amount0Out, amount1Out, to);\\n\\t}\\n\\n\\t\\n\\t// force reserves to match balances\\n\\tfunction sync() override public lock\\n\\t{\\n\\t\\t_update(SwapAmount(_token0.balanceOf(address(this)), _token1.balanceOf(address(this)), _reserve0, _reserve1));\\n\\t}\\n\\t\\n\\tfunction factory() override public view returns (IExofiswapFactory)\\n\\t{\\n\\t\\treturn _factory;\\n\\t}\\n\\n\\tfunction getReserves() override public view returns (uint112, uint112, uint32)\\n\\t{\\n\\t\\treturn (_reserve0, _reserve1, _blockTimestampLast);\\n\\t}\\n\\n\\tfunction kLast() override public view returns (uint256)\\n\\t{\\n\\t\\treturn _kLast;\\n\\t}\\n\\t\\n\\tfunction name() override(ERC20, IERC20Metadata) public view virtual returns (string memory)\\n\\t{\\n\\t\\treturn string(abi.encodePacked(_token0.symbol(), \\\"/\\\", _token1.symbol(), \\\" \\\", super.name()));\\n\\t}\\n\\n\\tfunction price0CumulativeLast() override public view returns (uint256)\\n\\t{\\n\\t\\treturn _price0CumulativeLast;\\n\\t}\\n\\n\\tfunction price1CumulativeLast() override public view returns (uint256)\\n\\t{\\n\\t\\treturn _price1CumulativeLast;\\n\\t}\\n\\n\\n\\tfunction token0() override public view returns (IERC20Metadata)\\n\\t{\\n\\t\\treturn _token0;\\n\\t}\\n\\t\\n\\tfunction token1() override public view returns (IERC20Metadata)\\n\\t{\\n\\t\\treturn _token1;\\n\\t}\\n\\n\\tfunction MINIMUM_LIQUIDITY() override public pure returns (uint256) //solhint-disable-line func-name-mixedcase\\n\\t{\\n\\t\\treturn _MINIMUM_LIQUIDITY;\\n\\t}\\n\\n\\tfunction _mintMinimumLiquidity() private\\n\\t{\\n\\t\\trequire(_totalSupply == 0, \\\"EP: Total supply not 0\\\");\\n\\n\\t\\t_totalSupply += _MINIMUM_LIQUIDITY;\\n\\t\\t_balances[address(0)] += _MINIMUM_LIQUIDITY;\\n\\t\\temit Transfer(address(0), address(0), _MINIMUM_LIQUIDITY);\\n\\t}\\n\\n\\tfunction _transferTokens(address to, uint256 amount0Out, uint256 amount1Out, bytes calldata data) private returns (uint256, uint256)\\n\\t{\\n\\t\\trequire(address(to) != address(_token0) && to != address(_token1), \\\"EP: INVALID_TO\\\");\\n\\t\\tif (amount0Out > 0) SafeERC20.safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n\\t\\tif (amount1Out > 0) SafeERC20.safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n\\t\\tif (data.length > 0) IExofiswapCallee(to).exofiswapCall(_msgSender(), amount0Out, amount1Out, data);\\n\\t\\treturn (_token0.balanceOf(address(this)), _token1.balanceOf(address(this)));\\n\\t}\\n\\n\\t// if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\\n\\tfunction _mintFee(uint256 k) private returns (bool)\\n\\t{\\n\\t\\taddress feeTo = _factory.feeTo();\\n\\t\\tuint256 kLastHelp = _kLast; // gas savings\\n\\t\\tif (feeTo != address(0))\\n\\t\\t{\\n\\t\\t\\tif (kLastHelp != 0)\\n\\t\\t\\t{\\n\\t\\t\\t\\tuint256 rootK = MathUInt256.sqrt(k);\\n\\t\\t\\t\\tuint256 rootKLast = MathUInt256.sqrt(kLastHelp);\\n\\t\\t\\t\\tif (rootK > rootKLast)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tuint256 numerator = _totalSupply * MathUInt256.unsafeSub(rootK, rootKLast);\\n\\t\\t\\t\\t\\t// Since rootK is the sqrt of k. Multiplication by 5 can never overflow\\n\\t\\t\\t\\t\\tuint256 denominator = MathUInt256.unsafeMul(rootK, 5) + rootKLast;\\n\\t\\t\\t\\t\\tuint256 liquidity = MathUInt256.unsafeDiv(numerator, denominator);\\n\\t\\t\\t\\t\\tif (liquidity > 0)\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t_mint(feeTo, liquidity);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif(kLastHelp != 0)\\n\\t\\t{\\n\\t\\t\\t_kLast = 0;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// update reserves and, on the first call per block, price accumulators\\n\\tfunction _update(SwapAmount memory sa) private\\n\\t{\\n\\t\\trequire(sa.balance0 <= type(uint112).max, \\\"EP: OVERFLOW\\\");\\n\\t\\trequire(sa.balance1 <= type(uint112).max, \\\"EP: OVERFLOW\\\");\\n\\t\\t// solhint-disable-next-line not-rely-on-time\\n\\t\\tuint32 blockTimestamp = uint32(block.timestamp);\\n\\t\\tif (sa.reserve1 != 0)\\n\\t\\t{\\n\\t\\t\\tif (sa.reserve0 != 0)\\n\\t\\t\\t{\\t\\n\\t\\t\\t\\tuint32 timeElapsed = MathUInt32.unsafeSub32(blockTimestamp, _blockTimestampLast); // overflow is desired\\n\\t\\t\\t\\tif (timeElapsed > 0)\\n\\t\\t\\t\\t{\\t\\n\\t\\t\\t\\t\\t// * never overflows, and + overflow is desired\\n\\t\\t\\t\\t\\tunchecked\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t_price0CumulativeLast += (UQ144x112.uqdiv(UQ144x112.encode(sa.reserve1),sa.reserve0) * timeElapsed);\\n\\t\\t\\t\\t\\t\\t_price1CumulativeLast += (UQ144x112.uqdiv(UQ144x112.encode(sa.reserve0), sa.reserve1) * timeElapsed);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t_reserve0 = uint112(sa.balance0);\\n\\t\\t_reserve1 = uint112(sa.balance1);\\n\\t\\t_blockTimestampLast = blockTimestamp;\\n\\t\\temit Sync(_reserve0, _reserve1);\\n\\t}\\n\\n\\tfunction _getInAmounts(uint256 amount0Out, uint256 amount1Out, SwapAmount memory sa)\\n\\t\\tprivate pure returns(uint256, uint256)\\n\\t{\\n\\t\\tuint256 div0 = MathUInt256.unsafeSub(sa.reserve0, amount0Out);\\n\\t\\tuint256 div1 = MathUInt256.unsafeSub(sa.reserve1, amount1Out);\\n\\t\\treturn (sa.balance0 > div0 ? MathUInt256.unsafeSub(sa.balance0, div0) : 0, sa.balance1 > div1 ? MathUInt256.unsafeSub(sa.balance1, div1) : 0);\\n\\t}\\n}\\n\",\"keccak256\":\"0x27369ddd6f3122c558706d2e0029d99ab2127503aff8ca79fb40cfeb6f228e40\",\"license\":\"MIT\"},\"contracts/Exofiswap/interfaces/IExofiswapCallee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IExofiswapCallee\\n{\\n    function exofiswapCall(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\",\"keccak256\":\"0x6480e4c6cb4514f47e6d1af1ca2d680af689480c95ce463c7cbbbac99f169411\",\"license\":\"MIT\"},\"contracts/Exofiswap/interfaces/IExofiswapERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20AltApprove.sol\\\";\\nimport \\\"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IExofiswapERC20 is IERC20AltApprove, IERC20Metadata\\n{\\n\\t// Functions as described in EIP 2612\\n\\tfunction permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\tfunction nonces(address owner) external view returns (uint256);\\n\\tfunction DOMAIN_SEPARATOR() external view returns (bytes32); // solhint-disable-line func-name-mixedcase\\n\\tfunction PERMIT_TYPEHASH() external pure returns (bytes32); //solhint-disable-line func-name-mixedcase\\n}\",\"keccak256\":\"0x302d3045a457db5ec7040076168ded22b1eba360a682e02c947f4c151dcd5d1d\",\"license\":\"MIT\"},\"contracts/Exofiswap/interfaces/IExofiswapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@exoda/contracts/interfaces/access/IOwnable.sol\\\";\\nimport \\\"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IExofiswapFactory.sol\\\";\\nimport \\\"./IExofiswapPair.sol\\\";\\nimport \\\"./IMigrator.sol\\\";\\n\\ninterface IExofiswapFactory is IOwnable\\n{\\n\\tevent PairCreated(IERC20Metadata indexed token0, IERC20Metadata indexed token1, IExofiswapPair pair, uint256 pairCount);\\n\\n\\tfunction createPair(IERC20Metadata tokenA, IERC20Metadata tokenB) external returns (IExofiswapPair pair);\\n\\tfunction setFeeTo(address) external;\\n\\tfunction setMigrator(IMigrator) external;\\n\\t\\n\\tfunction allPairs(uint256 index) external view returns (IExofiswapPair);\\n\\tfunction allPairsLength() external view returns (uint);\\n\\tfunction feeTo() external view returns (address);\\n\\tfunction getPair(IERC20Metadata tokenA, IERC20Metadata tokenB) external view returns (IExofiswapPair);\\n\\tfunction migrator() external view returns (IMigrator);\\n\\n\\tfunction pairCodeHash() external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a84d25d114296af59fabb1fd8c07c7a6653070097816337498a0a375630ef9f\",\"license\":\"MIT\"},\"contracts/Exofiswap/interfaces/IExofiswapPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IExofiswapCallee.sol\\\";\\nimport \\\"./IExofiswapERC20.sol\\\";\\nimport \\\"./IExofiswapFactory.sol\\\";\\n\\ninterface IExofiswapPair is IExofiswapERC20\\n{\\n\\tevent Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n\\tevent Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n\\tevent Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\\n\\tevent Sync(uint112 reserve0, uint112 reserve1);\\n\\n\\tfunction burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\tfunction initialize(IERC20Metadata token0Init, IERC20Metadata token1Init) external;\\n\\tfunction mint(address to) external returns (uint256 liquidity);\\n\\tfunction skim(address to) external;\\n\\tfunction swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\\n\\tfunction sync() external;\\n\\n\\tfunction factory() external view returns (IExofiswapFactory);\\n\\tfunction getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\tfunction kLast() external view returns (uint256);\\n\\tfunction price0CumulativeLast() external view returns (uint256);\\n\\tfunction price1CumulativeLast() external view returns (uint256);\\n\\tfunction token0() external view returns (IERC20Metadata);\\n\\tfunction token1() external view returns (IERC20Metadata);\\n\\n\\tfunction MINIMUM_LIQUIDITY() external pure returns (uint256); //solhint-disable-line func-name-mixedcase\\n}\",\"keccak256\":\"0xaad6c7246a8a10cead3abb4cf14648efa9f958173445b5ea7a9766432172f456\",\"license\":\"MIT\"},\"contracts/Exofiswap/interfaces/IMigrator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IMigrator\\n{\\n\\t// Return the desired amount of liquidity token that the migrator wants.\\n\\tfunction desiredLiquidity() external view returns (uint256);\\n}\",\"keccak256\":\"0x3a53fbb26cc6821c6185096f0b73c81a8d03250bcf2a2d79d4cb2335912c8112\",\"license\":\"MIT\"},\"contracts/Exofiswap/libraries/MathUInt256.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary MathUInt256\\n{\\n\\tfunction min(uint256 a, uint256 b) internal pure returns(uint256)\\n\\t{\\n\\t\\treturn a > b ? b : a;\\n\\t}\\n\\n\\t// solhint-disable-next-line code-complexity\\n\\tfunction sqrt(uint256 x) internal pure returns (uint256)\\n\\t{\\n\\t\\tif (x == 0)\\n\\t\\t{\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\t// Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\\n\\t\\tuint256 xAux = x;\\n\\t\\tuint256 result = 1;\\n\\t\\tif (xAux >= 0x100000000000000000000000000000000)\\n\\t\\t{\\n\\t\\t\\txAux >>= 128;\\n\\t\\t\\tresult <<= 64;\\n\\t\\t}\\n\\t\\tif (xAux >= 0x10000000000000000)\\n\\t\\t{\\n\\t\\t\\txAux >>= 64;\\n\\t\\t\\tresult <<= 32;\\n\\t\\t}\\n\\t\\tif (xAux >= 0x100000000)\\n\\t\\t{\\n\\t\\t\\txAux >>= 32;\\n\\t\\t\\tresult <<= 16;\\n\\t\\t}\\n\\t\\tif (xAux >= 0x10000)\\n\\t\\t{\\n\\t\\t\\txAux >>= 16;\\n\\t\\t\\tresult <<= 8;\\n\\t\\t}\\n\\t\\tif (xAux >= 0x100)\\n\\t\\t{\\n\\t\\t\\txAux >>= 8;\\n\\t\\t\\tresult <<= 4;\\n\\t\\t}\\n\\t\\tif (xAux >= 0x10)\\n\\t\\t{\\n\\t\\t\\txAux >>= 4;\\n\\t\\t\\tresult <<= 2;\\n\\t\\t}\\n\\t\\tif (xAux >= 0x4)\\n\\t\\t{\\n\\t\\t\\tresult <<= 1;\\n\\t\\t}\\n\\n\\t\\t// The operations can never overflow because the result is max 2^127 when it enters this block.\\n\\t\\tunchecked\\n\\t\\t{\\n\\t\\t\\tresult = (result + x / result) >> 1;\\n\\t\\t\\tresult = (result + x / result) >> 1;\\n\\t\\t\\tresult = (result + x / result) >> 1;\\n\\t\\t\\tresult = (result + x / result) >> 1;\\n\\t\\t\\tresult = (result + x / result) >> 1;\\n\\t\\t\\tresult = (result + x / result) >> 1;\\n\\t\\t\\tresult = (result + x / result) >> 1; // Seven iterations should be enough\\n\\t\\t\\tuint256 roundedDownResult = x / result;\\n\\t\\t\\treturn result >= roundedDownResult ? roundedDownResult : result;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction unsafeDec(uint256 a) internal pure returns (uint256)\\n\\t{\\n\\t\\tunchecked \\n\\t\\t{\\n\\t\\t\\treturn a - 1;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction unsafeDiv(uint256 a, uint256 b) internal pure returns (uint256)\\n\\t{\\n\\t\\tunchecked\\n\\t\\t{\\n\\t\\t\\treturn a / b;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction unsafeInc(uint256 a) internal pure returns (uint256)\\n\\t{\\n\\t\\tunchecked \\n\\t\\t{\\n\\t\\t\\treturn a + 1;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction unsafeMul(uint256 a, uint256 b) internal pure returns (uint256)\\n\\t{\\n\\t\\tunchecked\\n\\t\\t{\\n\\t\\t\\treturn a * b;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction unsafeSub(uint256 a, uint256 b) internal pure returns (uint256)\\n\\t{\\n\\t\\tunchecked\\n\\t\\t{\\n\\t\\t\\treturn a - b;\\n\\t\\t}\\n\\t}\\n}\",\"keccak256\":\"0x56a22be337920e912c87ba1da5746bf4ae881205112500dcb532f0069aa06258\",\"license\":\"MIT\"},\"contracts/Exofiswap/libraries/MathUInt32.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary MathUInt32\\n{\\n\\tfunction unsafeSub32(uint32 a, uint32 b) internal pure returns (uint32)\\n\\t{\\n\\t\\tunchecked\\n\\t\\t{\\n\\t\\t\\treturn a - b;\\n\\t\\t}\\n\\t}\\n}\",\"keccak256\":\"0x1f8a5fe53f5a8bb5c3fc181945f28167fe4366a8b270d10fb6c65ca369f56bf0\",\"license\":\"MIT\"},\"contracts/Exofiswap/libraries/UQ144x112.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**144 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ144x112\\n{\\n\\tuint256 private constant _Q112 = 2**112;\\n\\n\\t// encode a uint112 as a UQ144x112\\n\\tfunction encode(uint112 y) internal pure returns (uint256)\\n\\t{\\n\\t\\tunchecked\\n\\t\\t{\\n\\t\\t\\treturn uint256(y) * _Q112; // never overflows\\n\\t\\t}\\n\\t}\\n\\n\\t// divide a UQ144x112 by a uint112, returning a UQ144x112\\n    function uqdiv(uint256 x, uint112 y) internal pure returns (uint256)\\n\\t{\\n        return x / uint256(y);\\n    }\\n}\",\"keccak256\":\"0x82ef77f70e3a3bdde2959b7bd8db7d0317cb3f0813a2c9057181841af9395e67\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6149238061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c80638da5cb5b11610081578063e6a439051161005b578063e6a43905146101b6578063f2fde38b146101fb578063f46901ed1461020e57600080fd5b80638da5cb5b1461017d5780639aab92481461019b578063c9c65396146101a357600080fd5b8063574f2ba3116100b2578063574f2ba314610145578063715018a6146101575780637cd07e471461015f57600080fd5b8063017e7e58146100d95780631e3dd18b1461011d57806323cf311814610130575b600080fd5b60015473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100f361012b366004610a3d565b610221565b61014361013e366004610a78565b61025e565b005b6004545b604051908152602001610114565b61014361032b565b60025473ffffffffffffffffffffffffffffffffffffffff166100f3565b60005473ffffffffffffffffffffffffffffffffffffffff166100f3565b6101496103b8565b6100f36101b1366004610a9c565b6103ea565b6100f36101c4366004610a9c565b73ffffffffffffffffffffffffffffffffffffffff9182166000908152600360209081526040808320938516835292905220541690565b610143610209366004610a78565b6107e8565b61014361021c366004610a78565b6108f2565b60006004828154811061023657610236610ad5565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1692915050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103ac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102db565b6103b660006109ba565b565b6000604051806020016103ca90610a2f565b6020820181038252601f19601f8201166040525080519060200120905090565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610481576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f45463a204944454e544943414c5f41444452455353455300000000000000000060448201526064016102db565b6000808373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16106104be5783856104c1565b84845b909250905073ffffffffffffffffffffffffffffffffffffffff8216610543576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f45463a205a45524f5f414444524553530000000000000000000000000000000060448201526064016102db565b73ffffffffffffffffffffffffffffffffffffffff8281166000908152600360209081526040808320858516845290915290205416156105df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f45463a20504149525f455849535453000000000000000000000000000000000060448201526064016102db565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084811b8216602084015283901b16603482015260009060480160405160208183030381529060405280519060200120905060008160405161064590610a2f565b8190604051809103906000f5905080158015610665573d6000803e3d6000fd5b506040517f485cc95500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015285811660248301529192509082169063485cc95590604401600060405180830381600087803b1580156106db57600080fd5b505af11580156106ef573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff848116600081815260036020818152604080842089871680865290835281852080549789167fffffffffffffffffffffffff000000000000000000000000000000000000000098891681179091559383528185208686528352818520805488168517905560048054600181018255958190527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b9095018054909716841790965592548351928352908201527f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9910160405180910390a39695505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610869576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102db565b73ffffffffffffffffffffffffffffffffffffffff81166108e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a206e6577206f776e6572206973206164647265737328302960448201526064016102db565b6108ef816109ba565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610973576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102db565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b613de98062000b0583390190565b600060208284031215610a4f57600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff811681146108ef57600080fd5b600060208284031215610a8a57600080fd5b8135610a9581610a56565b9392505050565b60008060408385031215610aaf57600080fd5b8235610aba81610a56565b91506020830135610aca81610a56565b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfe60a060405260016009553480156200001657600080fd5b5060405180604001604052806006815260200165506c61736d6160d01b8152508060405180604001604052806006815260200165454e4552475960d01b815250816003908162000067919062000145565b50600462000076828262000145565b505050506200008a6200009c60201b60201c565b6001600160a01b031660805262000211565b3390565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620000cb57607f821691505b602082108103620000ec57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200014057600081815260208120601f850160051c810160208610156200011b5750805b601f850160051c820191505b818110156200013c5782815560010162000127565b5050505b505050565b81516001600160401b03811115620001615762000161620000a0565b6200017981620001728454620000b6565b84620000f2565b602080601f831160018114620001b15760008415620001985750858301515b600019600386901b1c1916600185901b1785556200013c565b600085815260208120601f198616915b82811015620001e257888601518255948401946001909101908401620001c1565b5085821015620002015787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b608051613ba7620002426000396000818161046101528181610c1a01528181610f8f0152612af80152613ba76000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80636a62784211610104578063a9059cbb116100a2578063d21220a711610071578063d21220a714610485578063d505accf146104a3578063dd62ed3e146104b6578063fff6cae9146104fc57600080fd5b8063a9059cbb14610431578063ba9a7a5614610444578063bc25cf771461044c578063c45a01551461045f57600080fd5b80637ecebe00116100de5780637ecebe00146103b857806389afcb44146103ee57806395d89b4114610416578063a457c2d71461041e57600080fd5b80636a6278421461036757806370a082311461037a5780637464fc3d146103b057600080fd5b806330adf81f11610171578063395093511161014b5780633950935114610331578063485cc955146103445780635909c0d5146103575780635a3d54931461035f57600080fd5b806330adf81f146102f4578063313ce5671461031a5780633644e5151461032957600080fd5b8063095ea7b3116101ad578063095ea7b31461026d5780630dfe16811461029057806318160ddd146102cf57806323b872dd146102e157600080fd5b8063022c0d9f146101d457806306fdde03146101e95780630902f1ac14610207575b600080fd5b6101e76101e2366004613539565b610504565b005b6101f161092f565b6040516101fe91906135f3565b60405180910390f35b600a54604080516dffffffffffffffffffffffffffff80841682526e01000000000000000000000000000084041660208201527c010000000000000000000000000000000000000000000000000000000090920463ffffffff16908201526060016101fe565b61028061027b366004613644565b610ac6565b60405190151581526020016101fe565b600b5473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101fe565b6000545b6040519081526020016101fe565b6102806102ef366004613670565b610ae0565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c96102d3565b604051601281526020016101fe565b6102d3610b06565b61028061033f366004613644565b610bcb565b6101e76103523660046136b1565b610c17565b6006546102d3565b6007546102d3565b6102d36103753660046136ea565b610d09565b6102d36103883660046136ea565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205490565b6008546102d3565b6102d36103c63660046136ea565b73ffffffffffffffffffffffffffffffffffffffff1660009081526005602052604090205490565b6104016103fc3660046136ea565b611330565b604080519283526020830191909152016101fe565b6101f1611831565b61028061042c366004613644565b6118c3565b61028061043f366004613644565b611979565b6103e86102d3565b6101e761045a3660046136ea565b611987565b7f00000000000000000000000000000000000000000000000000000000000000006102aa565b600c5473ffffffffffffffffffffffffffffffffffffffff166102aa565b6101e76104b1366004613707565b611b41565b6102d36104c43660046136b1565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260026020908152604080832093909416825291909152205490565b6101e7611e31565b600954600114610575576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f45503a204c4f434b45440000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6000600955841515806105885750600084115b6105ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f45503a20494e53554646494349454e545f4f55545055545f414d4f554e540000604482015260640161056c565b6040805160808101825260008082526020820152600a546dffffffffffffffffffffffffffff6e0100000000000000000000000000008204811660608401521691810182905290861061069d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f45503a20494e53554646494349454e545f4c4951554944495459000000000000604482015260640161056c565b80606001516dffffffffffffffffffffffffffff16851061071a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f45503a20494e53554646494349454e545f4c4951554944495459000000000000604482015260640161056c565b610727848787868661201d565b6020830152815260008061073c8888856122e7565b91509150600082118061074f5750600081115b6107b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45503a20494e53554646494349454e545f494e5055545f414d4f554e54000000604482015260640161056c565b60006107c28360036137ad565b84516107d0906103e86137ad565b6107da91906137ea565b905060006107e98360036137ad565b60208601516107fa906103e86137ad565b61080491906137ea565b905061084261083a86604001516dffffffffffffffffffffffffffff1687606001516dffffffffffffffffffffffffffff160290565b620f42400290565b61084c82846137ad565b10156108b4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f45503a204b000000000000000000000000000000000000000000000000000000604482015260640161056c565b50506108bf8361236f565b60408051838152602081018390528082018a905260608101899052905173ffffffffffffffffffffffffffffffffffffffff88169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600955505050505050565b600b54604080517f95d89b41000000000000000000000000000000000000000000000000000000008152905160609273ffffffffffffffffffffffffffffffffffffffff16916395d89b419160048083019260009291908290030181865afa15801561099f573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526109e5919081019061382c565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610a52573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610a98919081019061382c565b610aa0612662565b604051602001610ab2939291906138ec565b604051602081830303815290604052905090565b600033610ad4818585612671565b60019150505b92915050565b600033610aee8582856127da565b610af98585856128b1565b60019150505b9392505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f610b3161092f565b8051602091820120604080518082018252600181527f310000000000000000000000000000000000000000000000000000000000000090840152805192830193909352918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b33600081815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152812054909190610ad49082908690610c12908790613983565b612671565b337f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1614610cb6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f45503a20464f5242494444454e00000000000000000000000000000000000000604482015260640161056c565b600b805473ffffffffffffffffffffffffffffffffffffffff9384167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617909155600c8054929093169116179055565b6000600954600114610d77576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f45503a204c4f434b454400000000000000000000000000000000000000000000604482015260640161056c565b6000600981905560408051608081018252828152602080820193909352600a546dffffffffffffffffffffffffffff6e0100000000000000000000000000008204811660608401521681830152600b5482517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529251919373ffffffffffffffffffffffffffffffffffffffff909116926370a0823192602480830193928290030181865afa158015610e35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e599190613996565b8152600c546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015610ec9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eed9190613996565b602082015260408101518151600091610f18916dffffffffffffffffffffffffffff909116906137ea565b9050600082606001516dffffffffffffffffffffffffffff168360200151610f4091906137ea565b90506000610f7d610f7885604001516dffffffffffffffffffffffffffff1686606001516dffffffffffffffffffffffffffff160290565b612af3565b600080549192508181036111f45760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16637cd07e476040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ff8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101c91906139af565b905073ffffffffffffffffffffffffffffffffffffffff81163303611147578073ffffffffffffffffffffffffffffffffffffffff166340dc0e376040518163ffffffff1660e01b8152600401602060405180830381865afa158015611086573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110aa9190613996565b91506000821180156110dc57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214155b611142576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f45503a204c6971756964697479204572726f7200000000000000000000000000604482015260640161056c565b6111ee565b73ffffffffffffffffffffffffffffffffffffffff8116156111c5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f45503a204d69677261746f722073657400000000000000000000000000000000604482015260640161056c565b6103e86111da6111d587896137ad565b612c39565b6111e491906137ea565b91506111ee612dc0565b5061124d565b61124a61121e61120484886137ad565b88604001516dffffffffffffffffffffffffffff16612ec0565b61124561122b85886137ad565b89606001516dffffffffffffffffffffffffffff16612ec0565b612ed9565b90505b600081116112b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f45503a20494e53554646494349454e545f4c4951554944495459000000000000604482015260640161056c565b6112c18882612eee565b6112ca8661236f565b82156112e557602086015186516112e191906137ad565b6008555b604080518681526020810186905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a26001600955979650505050505050565b60008060095460011461139f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f45503a204c4f434b454400000000000000000000000000000000000000000000604482015260640161056c565b6000600981905560408051608081018252828152602080820193909352600a546dffffffffffffffffffffffffffff6e0100000000000000000000000000008204811660608401521681830152600b5482517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529251919373ffffffffffffffffffffffffffffffffffffffff909116926370a0823192602480830193928290030181865afa15801561145d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114819190613996565b8152600c546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156114f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115159190613996565b602082015260006115483073ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205490565b90506000611580610f7884604001516dffffffffffffffffffffffffffff1685606001516dffffffffffffffffffffffffffff160290565b6000805485519293509161159e9061159890866137ad565b83612ec0565b905060006115bb8660200151866115b591906137ad565b84612ec0565b90506000821180156115cd5750600081115b611633576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f45503a20494e53554646494349454e545f4c4951554944495459000000000000604482015260640161056c565b61163d308661300d565b600b546116619073ffffffffffffffffffffffffffffffffffffffff168a846131a6565b600c546116859073ffffffffffffffffffffffffffffffffffffffff168a836131a6565b600b546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156116f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117179190613996565b8652600c546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015611787573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ab9190613996565b60208701526117b98661236f565b83156117cb5760208601518651026008555b604080518381526020810183905273ffffffffffffffffffffffffffffffffffffffff8b169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a36001600955909890975095505050505050565b606060048054611840906139cc565b80601f016020809104026020016040519081016040528092919081815260200182805461186c906139cc565b80156118b95780601f1061188e576101008083540402835291602001916118b9565b820191906000526020600020905b81548152906001019060200180831161189c57829003601f168201915b5050505050905090565b33600081815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490919083811015611961576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f45524332303a207265647563656420616c6c6f77616e63652062656c6f772030604482015260640161056c565b61196e8286868403612671565b506001949350505050565b600033610ad48185856128b1565b6009546001146119f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f45503a204c4f434b454400000000000000000000000000000000000000000000604482015260640161056c565b6000600955600b54600a546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152611ab69273ffffffffffffffffffffffffffffffffffffffff169184916dffffffffffffffffffffffffffff9091169083906370a08231906024015b602060405180830381865afa158015611a83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa79190613996565b611ab191906137ea565b6131a6565b600c54600a546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152611b399273ffffffffffffffffffffffffffffffffffffffff169184916e0100000000000000000000000000009091046dffffffffffffffffffffffffffff169083906370a0823190602401611a66565b506001600955565b42841015611bab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f45786f6669737761703a20455850495245440000000000000000000000000000604482015260640161056c565b6000611bb5610b06565b73ffffffffffffffffffffffffffffffffffffffff8916600090815260056020526040812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928c928c928c92909190611c1083613a19565b9091555060408051602081019690965273ffffffffffffffffffffffffffffffffffffffff94851690860152929091166060840152608083015260a082015260c0810187905260e00160405160208183030381529060405280519060200120604051602001611cb19291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015611d3a573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811615801590611db557508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b611e1b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f45786f6669737761703a20494e56414c49445f5349474e415455524500000000604482015260640161056c565b611e26898989612671565b505050505050505050565b600954600114611e9d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f45503a204c4f434b454400000000000000000000000000000000000000000000604482015260640161056c565b6000600955604080516080810191829052600b547f70a082310000000000000000000000000000000000000000000000000000000090925230608482015261201691819073ffffffffffffffffffffffffffffffffffffffff166370a0823160a48301602060405180830381865afa158015611f1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f419190613996565b8152600c546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260209092019173ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015611fb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fdb9190613996565b8152600a546dffffffffffffffffffffffffffff80821660208401526e0100000000000000000000000000009091041660409091015261236f565b6001600955565b600b54600090819073ffffffffffffffffffffffffffffffffffffffff8881169116148015906120685750600c5473ffffffffffffffffffffffffffffffffffffffff888116911614155b6120ce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f45503a20494e56414c49445f544f000000000000000000000000000000000000604482015260640161056c565b85156120f857600b546120f89073ffffffffffffffffffffffffffffffffffffffff1688886131a6565b841561212257600c546121229073ffffffffffffffffffffffffffffffffffffffff1688876131a6565b82156121b5576040517f2a5559c900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff881690632a5559c9906121829033908a908a908a908a90600401613a51565b600060405180830381600087803b15801561219c57600080fd5b505af11580156121b0573d6000803e3d6000fd5b505050505b600b546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015612223573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122479190613996565b600c546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156122b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122d99190613996565b915091509550959350505050565b600080600061230a84604001516dffffffffffffffffffffffffffff1687900390565b9050600061232c85606001516dffffffffffffffffffffffffffff1687900390565b905081856000015111612340576000612346565b84518290035b81866020015111612358576000612361565b60208601518290035b935093505050935093915050565b80516dffffffffffffffffffffffffffff10156123e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f45503a204f564552464c4f570000000000000000000000000000000000000000604482015260640161056c565b60208101516dffffffffffffffffffffffffffff1015612464576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f45503a204f564552464c4f570000000000000000000000000000000000000000604482015260640161056c565b606081015142906dffffffffffffffffffffffffffff161561256d5760408201516dffffffffffffffffffffffffffff161561256d57600a5463ffffffff7c0100000000000000000000000000000000000000000000000000000000909104811682039081161561256b578063ffffffff1661250f61250585606001516dffffffffffffffffffffffffffff166e0100000000000000000000000000000290565b8560400151613238565b026006600082825401925050819055508063ffffffff1661255f61255585604001516dffffffffffffffffffffffffffff166e0100000000000000000000000000000290565b8560600151613238565b60078054919092020190555b505b8151600a80546020808601516dffffffffffffffffffffffffffff9485167fffffffff00000000000000000000000000000000000000000000000000000000909316929092176e0100000000000000000000000000009285168302177bffffffffffffffffffffffffffffffffffffffffffffffffffffffff81167c010000000000000000000000000000000000000000000000000000000063ffffffff881602908117948590556040805192871691871691909117825292909304909316928201929092527f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1910160405180910390a15050565b606060038054611840906139cc565b73ffffffffffffffffffffffffffffffffffffffff83166126ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f45524332303a20617070726f76652066726f6d20616464726573732830290000604482015260640161056c565b73ffffffffffffffffffffffffffffffffffffffff821661276b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f45524332303a20617070726f766520746f206164647265737328302900000000604482015260640161056c565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600260209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146128ab578181101561289e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161056c565b6128ab8484848403612671565b50505050565b73ffffffffffffffffffffffffffffffffffffffff831661292e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a207472616e736665722066726f6d206164647265737328302900604482015260640161056c565b73ffffffffffffffffffffffffffffffffffffffff82166129ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a207472616e7366657220746f2061646472657373283029000000604482015260640161056c565b73ffffffffffffffffffffffffffffffffffffffff831660009081526001602052604090205481811015612a3b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a207472616e7366657220657863656564732062616c616e636500604482015260640161056c565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260016020526040808220858503905591851681529081208054849290612a7f908490613983565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612ae591815260200190565b60405180910390a350505050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663017e7e586040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b8591906139af565b60085490915073ffffffffffffffffffffffffffffffffffffffff821615612c23578015612c19576000612bb885612c39565b90506000612bc583612c39565b905080821115612c16576000818303600054612be191906137ad565b90506000612bf28360058602613983565b90506000612c008383612ec0565b90508015612c1257612c128782612eee565b5050505b50505b5060019392505050565b8015612c2f5760006008555b5060009392505050565b600081600003612c4b57506000919050565b8160017001000000000000000000000000000000008210612c715760809190911c9060401b5b680100000000000000008210612c8c5760409190911c9060201b5b6401000000008210612ca35760209190911c9060101b5b620100008210612cb85760109190911c9060081b5b6101008210612ccc5760089190911c9060041b5b60108210612cdf5760049190911c9060021b5b60048210612ceb5760011b5b6001818581612cfc57612cfc613ac9565b048201901c90506001818581612d1457612d14613ac9565b048201901c90506001818581612d2c57612d2c613ac9565b048201901c90506001818581612d4457612d44613ac9565b048201901c90506001818581612d5c57612d5c613ac9565b048201901c90506001818581612d7457612d74613ac9565b048201901c90506001818581612d8c57612d8c613ac9565b048201901c90506000818581612da457612da4613ac9565b04905080821015612db55781612db7565b805b95945050505050565b60005415612e2a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f45503a20546f74616c20737570706c79206e6f74203000000000000000000000604482015260640161056c565b6103e8600080828254612e3d9190613983565b9091555050600080805260016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4980546103e89290612e7f908490613983565b90915550506040516103e8815260009081907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3565b6000818381612ed157612ed1613ac9565b049392505050565b6000818311612ee85782610aff565b50919050565b73ffffffffffffffffffffffffffffffffffffffff8216612f6b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f45524332303a206d696e7420746f206164647265737328302900000000000000604482015260640161056c565b80600080828254612f7c9190613983565b909155505073ffffffffffffffffffffffffffffffffffffffff821660009081526001602052604081208054839290612fb6908490613983565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b73ffffffffffffffffffffffffffffffffffffffff821661308a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f45524332303a206275726e2066726f6d20616464726573732830290000000000604482015260640161056c565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600160205260409020548181101561311a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f45524332303a206275726e20657863656564732062616c616e63650000000000604482015260640161056c565b73ffffffffffffffffffffffffffffffffffffffff831660009081526001602052604081208383039055805483919081906131569084906137ea565b909155505060405182815260009073ffffffffffffffffffffffffffffffffffffffff8516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016127cd565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052613233908490613254565b505050565b6000610aff6dffffffffffffffffffffffffffff831684613af8565b60006132b6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661333a9092919063ffffffff16565b80519091501561323357808060200190518101906132d49190613b33565b613233576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f5361666545524332303a2045524332302063616c6c206661696c656400000000604482015260640161056c565b60606133498484600085613351565b949350505050565b6060824710156133bd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f416464726573733a2062616c616e636520746f206c6f7720666f722063616c6c604482015260640161056c565b73ffffffffffffffffffffffffffffffffffffffff85163b61343b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161056c565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516134649190613b55565b60006040518083038185875af1925050503d80600081146134a1576040519150601f19603f3d011682016040523d82523d6000602084013e6134a6565b606091505b50915091506134b68282866134c1565b979650505050505050565b606083156134d0575081610aff565b8251156134e05782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056c91906135f3565b73ffffffffffffffffffffffffffffffffffffffff8116811461353657600080fd5b50565b60008060008060006080868803121561355157600080fd5b8535945060208601359350604086013561356a81613514565b9250606086013567ffffffffffffffff8082111561358757600080fd5b818801915088601f83011261359b57600080fd5b8135818111156135aa57600080fd5b8960208285010111156135bc57600080fd5b9699959850939650602001949392505050565b60005b838110156135ea5781810151838201526020016135d2565b50506000910152565b60208152600082518060208401526136128160408501602087016135cf565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6000806040838503121561365757600080fd5b823561366281613514565b946020939093013593505050565b60008060006060848603121561368557600080fd5b833561369081613514565b925060208401356136a081613514565b929592945050506040919091013590565b600080604083850312156136c457600080fd5b82356136cf81613514565b915060208301356136df81613514565b809150509250929050565b6000602082840312156136fc57600080fd5b8135610aff81613514565b600080600080600080600060e0888a03121561372257600080fd5b873561372d81613514565b9650602088013561373d81613514565b95506040880135945060608801359350608088013560ff8116811461376157600080fd5b9699959850939692959460a0840135945060c09093013592915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156137e5576137e561377e565b500290565b81810381811115610ada57610ada61377e565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020828403121561383e57600080fd5b815167ffffffffffffffff8082111561385657600080fd5b818401915084601f83011261386a57600080fd5b81518181111561387c5761387c6137fd565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156138c2576138c26137fd565b816040528281528760208487010111156138db57600080fd5b6134b68360208301602088016135cf565b600084516138fe8184602089016135cf565b7f2f0000000000000000000000000000000000000000000000000000000000000090830190815284516139388160018401602089016135cf565b7f20000000000000000000000000000000000000000000000000000000000000006001929091019182015283516139768160028401602088016135cf565b0160020195945050505050565b80820180821115610ada57610ada61377e565b6000602082840312156139a857600080fd5b5051919050565b6000602082840312156139c157600080fd5b8151610aff81613514565b600181811c908216806139e057607f821691505b602082108103612ee8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613a4a57613a4a61377e565b5060010190565b73ffffffffffffffffffffffffffffffffffffffff8616815284602082015283604082015260806060820152816080820152818360a0830137600081830160a090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082613b2e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600060208284031215613b4557600080fd5b81518015158114610aff57600080fd5b60008251613b678184602087016135cf565b919091019291505056fea2646970667358221220f42265de8b8ffc6e771878e1d298de9d1dd6cd5562a88b5753a3422c3ac4f87a64736f6c63430008100033a26469706673582212204f7dbd401d9920bbf60bc932036e8e7000fa0089de1bea4dd1b00738cc8d97d664736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100d45760003560e01c80638da5cb5b11610081578063e6a439051161005b578063e6a43905146101b6578063f2fde38b146101fb578063f46901ed1461020e57600080fd5b80638da5cb5b1461017d5780639aab92481461019b578063c9c65396146101a357600080fd5b8063574f2ba3116100b2578063574f2ba314610145578063715018a6146101575780637cd07e471461015f57600080fd5b8063017e7e58146100d95780631e3dd18b1461011d57806323cf311814610130575b600080fd5b60015473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100f361012b366004610a3d565b610221565b61014361013e366004610a78565b61025e565b005b6004545b604051908152602001610114565b61014361032b565b60025473ffffffffffffffffffffffffffffffffffffffff166100f3565b60005473ffffffffffffffffffffffffffffffffffffffff166100f3565b6101496103b8565b6100f36101b1366004610a9c565b6103ea565b6100f36101c4366004610a9c565b73ffffffffffffffffffffffffffffffffffffffff9182166000908152600360209081526040808320938516835292905220541690565b610143610209366004610a78565b6107e8565b61014361021c366004610a78565b6108f2565b60006004828154811061023657610236610ad5565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1692915050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103ac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102db565b6103b660006109ba565b565b6000604051806020016103ca90610a2f565b6020820181038252601f19601f8201166040525080519060200120905090565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610481576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f45463a204944454e544943414c5f41444452455353455300000000000000000060448201526064016102db565b6000808373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16106104be5783856104c1565b84845b909250905073ffffffffffffffffffffffffffffffffffffffff8216610543576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f45463a205a45524f5f414444524553530000000000000000000000000000000060448201526064016102db565b73ffffffffffffffffffffffffffffffffffffffff8281166000908152600360209081526040808320858516845290915290205416156105df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f45463a20504149525f455849535453000000000000000000000000000000000060448201526064016102db565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084811b8216602084015283901b16603482015260009060480160405160208183030381529060405280519060200120905060008160405161064590610a2f565b8190604051809103906000f5905080158015610665573d6000803e3d6000fd5b506040517f485cc95500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015285811660248301529192509082169063485cc95590604401600060405180830381600087803b1580156106db57600080fd5b505af11580156106ef573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff848116600081815260036020818152604080842089871680865290835281852080549789167fffffffffffffffffffffffff000000000000000000000000000000000000000098891681179091559383528185208686528352818520805488168517905560048054600181018255958190527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b9095018054909716841790965592548351928352908201527f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9910160405180910390a39695505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610869576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102db565b73ffffffffffffffffffffffffffffffffffffffff81166108e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a206e6577206f776e6572206973206164647265737328302960448201526064016102db565b6108ef816109ba565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610973576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102db565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b613de98062000b0583390190565b600060208284031215610a4f57600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff811681146108ef57600080fd5b600060208284031215610a8a57600080fd5b8135610a9581610a56565b9392505050565b60008060408385031215610aaf57600080fd5b8235610aba81610a56565b91506020830135610aca81610a56565b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfe60a060405260016009553480156200001657600080fd5b5060405180604001604052806006815260200165506c61736d6160d01b8152508060405180604001604052806006815260200165454e4552475960d01b815250816003908162000067919062000145565b50600462000076828262000145565b505050506200008a6200009c60201b60201c565b6001600160a01b031660805262000211565b3390565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620000cb57607f821691505b602082108103620000ec57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200014057600081815260208120601f850160051c810160208610156200011b5750805b601f850160051c820191505b818110156200013c5782815560010162000127565b5050505b505050565b81516001600160401b03811115620001615762000161620000a0565b6200017981620001728454620000b6565b84620000f2565b602080601f831160018114620001b15760008415620001985750858301515b600019600386901b1c1916600185901b1785556200013c565b600085815260208120601f198616915b82811015620001e257888601518255948401946001909101908401620001c1565b5085821015620002015787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b608051613ba7620002426000396000818161046101528181610c1a01528181610f8f0152612af80152613ba76000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80636a62784211610104578063a9059cbb116100a2578063d21220a711610071578063d21220a714610485578063d505accf146104a3578063dd62ed3e146104b6578063fff6cae9146104fc57600080fd5b8063a9059cbb14610431578063ba9a7a5614610444578063bc25cf771461044c578063c45a01551461045f57600080fd5b80637ecebe00116100de5780637ecebe00146103b857806389afcb44146103ee57806395d89b4114610416578063a457c2d71461041e57600080fd5b80636a6278421461036757806370a082311461037a5780637464fc3d146103b057600080fd5b806330adf81f11610171578063395093511161014b5780633950935114610331578063485cc955146103445780635909c0d5146103575780635a3d54931461035f57600080fd5b806330adf81f146102f4578063313ce5671461031a5780633644e5151461032957600080fd5b8063095ea7b3116101ad578063095ea7b31461026d5780630dfe16811461029057806318160ddd146102cf57806323b872dd146102e157600080fd5b8063022c0d9f146101d457806306fdde03146101e95780630902f1ac14610207575b600080fd5b6101e76101e2366004613539565b610504565b005b6101f161092f565b6040516101fe91906135f3565b60405180910390f35b600a54604080516dffffffffffffffffffffffffffff80841682526e01000000000000000000000000000084041660208201527c010000000000000000000000000000000000000000000000000000000090920463ffffffff16908201526060016101fe565b61028061027b366004613644565b610ac6565b60405190151581526020016101fe565b600b5473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101fe565b6000545b6040519081526020016101fe565b6102806102ef366004613670565b610ae0565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c96102d3565b604051601281526020016101fe565b6102d3610b06565b61028061033f366004613644565b610bcb565b6101e76103523660046136b1565b610c17565b6006546102d3565b6007546102d3565b6102d36103753660046136ea565b610d09565b6102d36103883660046136ea565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205490565b6008546102d3565b6102d36103c63660046136ea565b73ffffffffffffffffffffffffffffffffffffffff1660009081526005602052604090205490565b6104016103fc3660046136ea565b611330565b604080519283526020830191909152016101fe565b6101f1611831565b61028061042c366004613644565b6118c3565b61028061043f366004613644565b611979565b6103e86102d3565b6101e761045a3660046136ea565b611987565b7f00000000000000000000000000000000000000000000000000000000000000006102aa565b600c5473ffffffffffffffffffffffffffffffffffffffff166102aa565b6101e76104b1366004613707565b611b41565b6102d36104c43660046136b1565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260026020908152604080832093909416825291909152205490565b6101e7611e31565b600954600114610575576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f45503a204c4f434b45440000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6000600955841515806105885750600084115b6105ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f45503a20494e53554646494349454e545f4f55545055545f414d4f554e540000604482015260640161056c565b6040805160808101825260008082526020820152600a546dffffffffffffffffffffffffffff6e0100000000000000000000000000008204811660608401521691810182905290861061069d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f45503a20494e53554646494349454e545f4c4951554944495459000000000000604482015260640161056c565b80606001516dffffffffffffffffffffffffffff16851061071a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f45503a20494e53554646494349454e545f4c4951554944495459000000000000604482015260640161056c565b610727848787868661201d565b6020830152815260008061073c8888856122e7565b91509150600082118061074f5750600081115b6107b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45503a20494e53554646494349454e545f494e5055545f414d4f554e54000000604482015260640161056c565b60006107c28360036137ad565b84516107d0906103e86137ad565b6107da91906137ea565b905060006107e98360036137ad565b60208601516107fa906103e86137ad565b61080491906137ea565b905061084261083a86604001516dffffffffffffffffffffffffffff1687606001516dffffffffffffffffffffffffffff160290565b620f42400290565b61084c82846137ad565b10156108b4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f45503a204b000000000000000000000000000000000000000000000000000000604482015260640161056c565b50506108bf8361236f565b60408051838152602081018390528082018a905260608101899052905173ffffffffffffffffffffffffffffffffffffffff88169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600955505050505050565b600b54604080517f95d89b41000000000000000000000000000000000000000000000000000000008152905160609273ffffffffffffffffffffffffffffffffffffffff16916395d89b419160048083019260009291908290030181865afa15801561099f573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526109e5919081019061382c565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610a52573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610a98919081019061382c565b610aa0612662565b604051602001610ab2939291906138ec565b604051602081830303815290604052905090565b600033610ad4818585612671565b60019150505b92915050565b600033610aee8582856127da565b610af98585856128b1565b60019150505b9392505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f610b3161092f565b8051602091820120604080518082018252600181527f310000000000000000000000000000000000000000000000000000000000000090840152805192830193909352918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b33600081815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152812054909190610ad49082908690610c12908790613983565b612671565b337f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1614610cb6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f45503a20464f5242494444454e00000000000000000000000000000000000000604482015260640161056c565b600b805473ffffffffffffffffffffffffffffffffffffffff9384167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617909155600c8054929093169116179055565b6000600954600114610d77576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f45503a204c4f434b454400000000000000000000000000000000000000000000604482015260640161056c565b6000600981905560408051608081018252828152602080820193909352600a546dffffffffffffffffffffffffffff6e0100000000000000000000000000008204811660608401521681830152600b5482517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529251919373ffffffffffffffffffffffffffffffffffffffff909116926370a0823192602480830193928290030181865afa158015610e35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e599190613996565b8152600c546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015610ec9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eed9190613996565b602082015260408101518151600091610f18916dffffffffffffffffffffffffffff909116906137ea565b9050600082606001516dffffffffffffffffffffffffffff168360200151610f4091906137ea565b90506000610f7d610f7885604001516dffffffffffffffffffffffffffff1686606001516dffffffffffffffffffffffffffff160290565b612af3565b600080549192508181036111f45760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16637cd07e476040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ff8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101c91906139af565b905073ffffffffffffffffffffffffffffffffffffffff81163303611147578073ffffffffffffffffffffffffffffffffffffffff166340dc0e376040518163ffffffff1660e01b8152600401602060405180830381865afa158015611086573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110aa9190613996565b91506000821180156110dc57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214155b611142576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f45503a204c6971756964697479204572726f7200000000000000000000000000604482015260640161056c565b6111ee565b73ffffffffffffffffffffffffffffffffffffffff8116156111c5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f45503a204d69677261746f722073657400000000000000000000000000000000604482015260640161056c565b6103e86111da6111d587896137ad565b612c39565b6111e491906137ea565b91506111ee612dc0565b5061124d565b61124a61121e61120484886137ad565b88604001516dffffffffffffffffffffffffffff16612ec0565b61124561122b85886137ad565b89606001516dffffffffffffffffffffffffffff16612ec0565b612ed9565b90505b600081116112b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f45503a20494e53554646494349454e545f4c4951554944495459000000000000604482015260640161056c565b6112c18882612eee565b6112ca8661236f565b82156112e557602086015186516112e191906137ad565b6008555b604080518681526020810186905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a26001600955979650505050505050565b60008060095460011461139f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f45503a204c4f434b454400000000000000000000000000000000000000000000604482015260640161056c565b6000600981905560408051608081018252828152602080820193909352600a546dffffffffffffffffffffffffffff6e0100000000000000000000000000008204811660608401521681830152600b5482517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529251919373ffffffffffffffffffffffffffffffffffffffff909116926370a0823192602480830193928290030181865afa15801561145d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114819190613996565b8152600c546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156114f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115159190613996565b602082015260006115483073ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205490565b90506000611580610f7884604001516dffffffffffffffffffffffffffff1685606001516dffffffffffffffffffffffffffff160290565b6000805485519293509161159e9061159890866137ad565b83612ec0565b905060006115bb8660200151866115b591906137ad565b84612ec0565b90506000821180156115cd5750600081115b611633576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f45503a20494e53554646494349454e545f4c4951554944495459000000000000604482015260640161056c565b61163d308661300d565b600b546116619073ffffffffffffffffffffffffffffffffffffffff168a846131a6565b600c546116859073ffffffffffffffffffffffffffffffffffffffff168a836131a6565b600b546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156116f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117179190613996565b8652600c546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015611787573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ab9190613996565b60208701526117b98661236f565b83156117cb5760208601518651026008555b604080518381526020810183905273ffffffffffffffffffffffffffffffffffffffff8b169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a36001600955909890975095505050505050565b606060048054611840906139cc565b80601f016020809104026020016040519081016040528092919081815260200182805461186c906139cc565b80156118b95780601f1061188e576101008083540402835291602001916118b9565b820191906000526020600020905b81548152906001019060200180831161189c57829003601f168201915b5050505050905090565b33600081815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490919083811015611961576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f45524332303a207265647563656420616c6c6f77616e63652062656c6f772030604482015260640161056c565b61196e8286868403612671565b506001949350505050565b600033610ad48185856128b1565b6009546001146119f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f45503a204c4f434b454400000000000000000000000000000000000000000000604482015260640161056c565b6000600955600b54600a546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152611ab69273ffffffffffffffffffffffffffffffffffffffff169184916dffffffffffffffffffffffffffff9091169083906370a08231906024015b602060405180830381865afa158015611a83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa79190613996565b611ab191906137ea565b6131a6565b600c54600a546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152611b399273ffffffffffffffffffffffffffffffffffffffff169184916e0100000000000000000000000000009091046dffffffffffffffffffffffffffff169083906370a0823190602401611a66565b506001600955565b42841015611bab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f45786f6669737761703a20455850495245440000000000000000000000000000604482015260640161056c565b6000611bb5610b06565b73ffffffffffffffffffffffffffffffffffffffff8916600090815260056020526040812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928c928c928c92909190611c1083613a19565b9091555060408051602081019690965273ffffffffffffffffffffffffffffffffffffffff94851690860152929091166060840152608083015260a082015260c0810187905260e00160405160208183030381529060405280519060200120604051602001611cb19291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015611d3a573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811615801590611db557508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b611e1b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f45786f6669737761703a20494e56414c49445f5349474e415455524500000000604482015260640161056c565b611e26898989612671565b505050505050505050565b600954600114611e9d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f45503a204c4f434b454400000000000000000000000000000000000000000000604482015260640161056c565b6000600955604080516080810191829052600b547f70a082310000000000000000000000000000000000000000000000000000000090925230608482015261201691819073ffffffffffffffffffffffffffffffffffffffff166370a0823160a48301602060405180830381865afa158015611f1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f419190613996565b8152600c546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260209092019173ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015611fb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fdb9190613996565b8152600a546dffffffffffffffffffffffffffff80821660208401526e0100000000000000000000000000009091041660409091015261236f565b6001600955565b600b54600090819073ffffffffffffffffffffffffffffffffffffffff8881169116148015906120685750600c5473ffffffffffffffffffffffffffffffffffffffff888116911614155b6120ce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f45503a20494e56414c49445f544f000000000000000000000000000000000000604482015260640161056c565b85156120f857600b546120f89073ffffffffffffffffffffffffffffffffffffffff1688886131a6565b841561212257600c546121229073ffffffffffffffffffffffffffffffffffffffff1688876131a6565b82156121b5576040517f2a5559c900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff881690632a5559c9906121829033908a908a908a908a90600401613a51565b600060405180830381600087803b15801561219c57600080fd5b505af11580156121b0573d6000803e3d6000fd5b505050505b600b546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015612223573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122479190613996565b600c546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156122b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122d99190613996565b915091509550959350505050565b600080600061230a84604001516dffffffffffffffffffffffffffff1687900390565b9050600061232c85606001516dffffffffffffffffffffffffffff1687900390565b905081856000015111612340576000612346565b84518290035b81866020015111612358576000612361565b60208601518290035b935093505050935093915050565b80516dffffffffffffffffffffffffffff10156123e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f45503a204f564552464c4f570000000000000000000000000000000000000000604482015260640161056c565b60208101516dffffffffffffffffffffffffffff1015612464576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f45503a204f564552464c4f570000000000000000000000000000000000000000604482015260640161056c565b606081015142906dffffffffffffffffffffffffffff161561256d5760408201516dffffffffffffffffffffffffffff161561256d57600a5463ffffffff7c0100000000000000000000000000000000000000000000000000000000909104811682039081161561256b578063ffffffff1661250f61250585606001516dffffffffffffffffffffffffffff166e0100000000000000000000000000000290565b8560400151613238565b026006600082825401925050819055508063ffffffff1661255f61255585604001516dffffffffffffffffffffffffffff166e0100000000000000000000000000000290565b8560600151613238565b60078054919092020190555b505b8151600a80546020808601516dffffffffffffffffffffffffffff9485167fffffffff00000000000000000000000000000000000000000000000000000000909316929092176e0100000000000000000000000000009285168302177bffffffffffffffffffffffffffffffffffffffffffffffffffffffff81167c010000000000000000000000000000000000000000000000000000000063ffffffff881602908117948590556040805192871691871691909117825292909304909316928201929092527f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1910160405180910390a15050565b606060038054611840906139cc565b73ffffffffffffffffffffffffffffffffffffffff83166126ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f45524332303a20617070726f76652066726f6d20616464726573732830290000604482015260640161056c565b73ffffffffffffffffffffffffffffffffffffffff821661276b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f45524332303a20617070726f766520746f206164647265737328302900000000604482015260640161056c565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600260209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146128ab578181101561289e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161056c565b6128ab8484848403612671565b50505050565b73ffffffffffffffffffffffffffffffffffffffff831661292e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a207472616e736665722066726f6d206164647265737328302900604482015260640161056c565b73ffffffffffffffffffffffffffffffffffffffff82166129ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a207472616e7366657220746f2061646472657373283029000000604482015260640161056c565b73ffffffffffffffffffffffffffffffffffffffff831660009081526001602052604090205481811015612a3b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a207472616e7366657220657863656564732062616c616e636500604482015260640161056c565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260016020526040808220858503905591851681529081208054849290612a7f908490613983565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612ae591815260200190565b60405180910390a350505050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663017e7e586040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b8591906139af565b60085490915073ffffffffffffffffffffffffffffffffffffffff821615612c23578015612c19576000612bb885612c39565b90506000612bc583612c39565b905080821115612c16576000818303600054612be191906137ad565b90506000612bf28360058602613983565b90506000612c008383612ec0565b90508015612c1257612c128782612eee565b5050505b50505b5060019392505050565b8015612c2f5760006008555b5060009392505050565b600081600003612c4b57506000919050565b8160017001000000000000000000000000000000008210612c715760809190911c9060401b5b680100000000000000008210612c8c5760409190911c9060201b5b6401000000008210612ca35760209190911c9060101b5b620100008210612cb85760109190911c9060081b5b6101008210612ccc5760089190911c9060041b5b60108210612cdf5760049190911c9060021b5b60048210612ceb5760011b5b6001818581612cfc57612cfc613ac9565b048201901c90506001818581612d1457612d14613ac9565b048201901c90506001818581612d2c57612d2c613ac9565b048201901c90506001818581612d4457612d44613ac9565b048201901c90506001818581612d5c57612d5c613ac9565b048201901c90506001818581612d7457612d74613ac9565b048201901c90506001818581612d8c57612d8c613ac9565b048201901c90506000818581612da457612da4613ac9565b04905080821015612db55781612db7565b805b95945050505050565b60005415612e2a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f45503a20546f74616c20737570706c79206e6f74203000000000000000000000604482015260640161056c565b6103e8600080828254612e3d9190613983565b9091555050600080805260016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4980546103e89290612e7f908490613983565b90915550506040516103e8815260009081907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3565b6000818381612ed157612ed1613ac9565b049392505050565b6000818311612ee85782610aff565b50919050565b73ffffffffffffffffffffffffffffffffffffffff8216612f6b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f45524332303a206d696e7420746f206164647265737328302900000000000000604482015260640161056c565b80600080828254612f7c9190613983565b909155505073ffffffffffffffffffffffffffffffffffffffff821660009081526001602052604081208054839290612fb6908490613983565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b73ffffffffffffffffffffffffffffffffffffffff821661308a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f45524332303a206275726e2066726f6d20616464726573732830290000000000604482015260640161056c565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600160205260409020548181101561311a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f45524332303a206275726e20657863656564732062616c616e63650000000000604482015260640161056c565b73ffffffffffffffffffffffffffffffffffffffff831660009081526001602052604081208383039055805483919081906131569084906137ea565b909155505060405182815260009073ffffffffffffffffffffffffffffffffffffffff8516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016127cd565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052613233908490613254565b505050565b6000610aff6dffffffffffffffffffffffffffff831684613af8565b60006132b6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661333a9092919063ffffffff16565b80519091501561323357808060200190518101906132d49190613b33565b613233576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f5361666545524332303a2045524332302063616c6c206661696c656400000000604482015260640161056c565b60606133498484600085613351565b949350505050565b6060824710156133bd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f416464726573733a2062616c616e636520746f206c6f7720666f722063616c6c604482015260640161056c565b73ffffffffffffffffffffffffffffffffffffffff85163b61343b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161056c565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516134649190613b55565b60006040518083038185875af1925050503d80600081146134a1576040519150601f19603f3d011682016040523d82523d6000602084013e6134a6565b606091505b50915091506134b68282866134c1565b979650505050505050565b606083156134d0575081610aff565b8251156134e05782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056c91906135f3565b73ffffffffffffffffffffffffffffffffffffffff8116811461353657600080fd5b50565b60008060008060006080868803121561355157600080fd5b8535945060208601359350604086013561356a81613514565b9250606086013567ffffffffffffffff8082111561358757600080fd5b818801915088601f83011261359b57600080fd5b8135818111156135aa57600080fd5b8960208285010111156135bc57600080fd5b9699959850939650602001949392505050565b60005b838110156135ea5781810151838201526020016135d2565b50506000910152565b60208152600082518060208401526136128160408501602087016135cf565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6000806040838503121561365757600080fd5b823561366281613514565b946020939093013593505050565b60008060006060848603121561368557600080fd5b833561369081613514565b925060208401356136a081613514565b929592945050506040919091013590565b600080604083850312156136c457600080fd5b82356136cf81613514565b915060208301356136df81613514565b809150509250929050565b6000602082840312156136fc57600080fd5b8135610aff81613514565b600080600080600080600060e0888a03121561372257600080fd5b873561372d81613514565b9650602088013561373d81613514565b95506040880135945060608801359350608088013560ff8116811461376157600080fd5b9699959850939692959460a0840135945060c09093013592915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156137e5576137e561377e565b500290565b81810381811115610ada57610ada61377e565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020828403121561383e57600080fd5b815167ffffffffffffffff8082111561385657600080fd5b818401915084601f83011261386a57600080fd5b81518181111561387c5761387c6137fd565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156138c2576138c26137fd565b816040528281528760208487010111156138db57600080fd5b6134b68360208301602088016135cf565b600084516138fe8184602089016135cf565b7f2f0000000000000000000000000000000000000000000000000000000000000090830190815284516139388160018401602089016135cf565b7f20000000000000000000000000000000000000000000000000000000000000006001929091019182015283516139768160028401602088016135cf565b0160020195945050505050565b80820180821115610ada57610ada61377e565b6000602082840312156139a857600080fd5b5051919050565b6000602082840312156139c157600080fd5b8151610aff81613514565b600181811c908216806139e057607f821691505b602082108103612ee8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613a4a57613a4a61377e565b5060010190565b73ffffffffffffffffffffffffffffffffffffffff8616815284602082015283604082015260806060820152816080820152818360a0830137600081830160a090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082613b2e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600060208284031215613b4557600080fd5b81518015158114610aff57600080fd5b60008251613b678184602087016135cf565b919091019291505056fea2646970667358221220f42265de8b8ffc6e771878e1d298de9d1dd6cd5562a88b5753a3422c3ac4f87a64736f6c63430008100033a26469706673582212204f7dbd401d9920bbf60bc932036e8e7000fa0089de1bea4dd1b00738cc8d97d664736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "returns": {
          "_0": "The current owner."
        }
      },
      "renounceOwnership()": {
        "details": "Sets the zero address as the new contract owner."
      },
      "transferOwnership(address)": {
        "params": {
          "newOwner": "The new owner of the contract."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "OwnershipTransferred(address,address)": {
        "notice": "Emitted when ownership is moved from one address to another."
      }
    },
    "kind": "user",
    "methods": {
      "owner()": {
        "notice": "Returns the current owner."
      },
      "renounceOwnership()": {
        "notice": "Leaves the contract without an owner. It will not be possible to call {onlyOwner} functions anymore. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner. Emits an [`OwnershipTransferred`](#ownershiptransferred) event indicating the renounced ownership. Requirements: - Can only be called by the current owner. "
      },
      "transferOwnership(address)": {
        "notice": "Transfers ownership of the contract to a new address. Emits an [`OwnershipTransferred`](#ownershiptransferred) event indicating the transfered ownership. Requirements: - Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/Exofiswap/ExofiswapFactory.sol:ExofiswapFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1442,
        "contract": "contracts/Exofiswap/ExofiswapFactory.sol:ExofiswapFactory",
        "label": "_feeTo",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1445,
        "contract": "contracts/Exofiswap/ExofiswapFactory.sol:ExofiswapFactory",
        "label": "_migrator",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IMigrator)6072"
      },
      {
        "astId": 1454,
        "contract": "contracts/Exofiswap/ExofiswapFactory.sol:ExofiswapFactory",
        "label": "_getPair",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_contract(IERC20Metadata)279,t_mapping(t_contract(IERC20Metadata)279,t_contract(IExofiswapPair)5645))"
      },
      {
        "astId": 1458,
        "contract": "contracts/Exofiswap/ExofiswapFactory.sol:ExofiswapFactory",
        "label": "_allPairs",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_contract(IExofiswapPair)5645)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IExofiswapPair)5645)dyn_storage": {
        "base": "t_contract(IExofiswapPair)5645",
        "encoding": "dynamic_array",
        "label": "contract IExofiswapPair[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20Metadata)279": {
        "encoding": "inplace",
        "label": "contract IERC20Metadata",
        "numberOfBytes": "20"
      },
      "t_contract(IExofiswapPair)5645": {
        "encoding": "inplace",
        "label": "contract IExofiswapPair",
        "numberOfBytes": "20"
      },
      "t_contract(IMigrator)6072": {
        "encoding": "inplace",
        "label": "contract IMigrator",
        "numberOfBytes": "20"
      },
      "t_mapping(t_contract(IERC20Metadata)279,t_contract(IExofiswapPair)5645)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20Metadata)279",
        "label": "mapping(contract IERC20Metadata => contract IExofiswapPair)",
        "numberOfBytes": "32",
        "value": "t_contract(IExofiswapPair)5645"
      },
      "t_mapping(t_contract(IERC20Metadata)279,t_mapping(t_contract(IERC20Metadata)279,t_contract(IExofiswapPair)5645))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20Metadata)279",
        "label": "mapping(contract IERC20Metadata => mapping(contract IERC20Metadata => contract IExofiswapPair))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IERC20Metadata)279,t_contract(IExofiswapPair)5645)"
      }
    }
  }
}
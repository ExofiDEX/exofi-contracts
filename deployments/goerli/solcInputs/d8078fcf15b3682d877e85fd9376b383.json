{
  "language": "Solidity",
  "sources": {
    "contracts/Exofiswap/ExofiswapERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@exoda/contracts/token/ERC20/ERC20.sol\";\nimport \"./interfaces/IExofiswapERC20.sol\";\n\ncontract ExofiswapERC20 is ERC20, IExofiswapERC20\n{\n\t// keccak256(\"permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\tbytes32 private constant _PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n\tmapping(address => uint256) private _nonces;\n\n\tconstructor(string memory tokenName) ERC20(tokenName, \"ENERGY\")\n\t{ } // solhint-disable-line no-empty-blocks\n\n\t// The standard ERC-20 race condition for approvals applies to permit as well.\n\tfunction permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) override public\n\t{\n\t\t// solhint-disable-next-line not-rely-on-time\n\t\trequire(deadline >= block.timestamp, \"Exofiswap: EXPIRED\");\n\t\tbytes32 digest = keccak256(\n\t\t\tabi.encodePacked(\n\t\t\t\t\"\\x19\\x01\",\n\t\t\t\tDOMAIN_SEPARATOR(),\n\t\t\t\tkeccak256(\n\t\t\t\t\tabi.encode(\n\t\t\t\t\t\t_PERMIT_TYPEHASH,\n\t\t\t\t\t\towner,\n\t\t\t\t\t\tspender,\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t_nonces[owner]++,\n\t\t\t\t\t\tdeadline\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t);\n\t\taddress recoveredAddress = ecrecover(digest, v, r, s);\n\t\t// Since the ecrecover precompile fails silently and just returns the zero address as signer when given malformed messages,\n\t\t// it is important to ensure owner != address(0) to avoid permit from creating an approval to spend “zombie funds”\n\t\t// belong to the zero address.\n\t\trequire(recoveredAddress != address(0) && recoveredAddress == owner, \"Exofiswap: INVALID_SIGNATURE\");\n\t\t_approve(owner, spender, value);\n\t}\n\n\t// solhint-disable-next-line func-name-mixedcase\n\tfunction DOMAIN_SEPARATOR() override public view returns(bytes32)\n\t{\n\t\t// If the DOMAIN_SEPARATOR contains the chainId and is defined at contract deployment instead of reconstructed\n\t\t// for every signature, there is a risk of possible replay attacks between chains in the event of a future chain split\n\t\treturn keccak256(\n\t\t\tabi.encode(\n\t\t\t\tkeccak256(\n\t\t\t\t\t\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n\t\t\t\t),\n\t\t\t\tkeccak256(bytes(name())),\n\t\t\t\tkeccak256(bytes(\"1\")),\n\t\t\t\tblock.chainid,\n\t\t\t\taddress(this)\n\t\t\t)\n\t\t);\n\t}\n\n\tfunction nonces(address owner) override public view returns (uint256)\n\t{\n\t\treturn _nonces[owner];\n\t}\n\n\tfunction PERMIT_TYPEHASH() override public pure returns (bytes32) //solhint-disable-line func-name-mixedcase\n\t{\n\t\treturn _PERMIT_TYPEHASH;\n\t}\n}\n"
    },
    "@exoda/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/token/ERC20/extensions/IERC20AltApprove.sol\";\nimport \"../../interfaces/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n* @notice Implementation of the {IERC20Metadata} interface.\n* The IERC20Metadata interface extends the IERC20 interface.\n*\n* This implementation is agnostic to the way tokens are created. This means\n* that a supply mechanism has to be added in a derived contract using {_mint}.\n* For a generic mechanism see Open Zeppelins {ERC20PresetMinterPauser}.\n*\n* TIP: For a detailed writeup see our guide\n* https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n* to implement supply mechanisms].\n*\n* We have followed general OpenZeppelin Contracts guidelines: functions revert\n* instead returning `false` on failure. This behavior is nonetheless\n* conventional and does not conflict with the expectations of ERC20\n* applications.\n*\n* Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n* This allows applications to reconstruct the allowance for all accounts just\n* by listening to said events. Other implementations of the EIP may not emit\n* these events, as it isn't required by the specification.\n*\n* Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n* functions have been added to mitigate the well-known issues around setting\n* allowances. See {IERC20-approve}.\n*/\ncontract ERC20 is Context, IERC20AltApprove, IERC20Metadata\n{\n\tuint256 internal _totalSupply;\n\tmapping(address => uint256) internal _balances;\n\tmapping(address => mapping(address => uint256)) private _allowances;\n\tstring private _name;\n\tstring private _symbol;\n\n\t/**\n\t* @notice Sets the values for {name} and {symbol}.\n\t*\n\t* The default value of {decimals} is 18. To select a different value for\n\t* {decimals} you should overload it.\n\t*\n\t* All two of these values are immutable: they can only be set once during\n\t* construction.\n\t*/\n\tconstructor(string memory tokenName, string memory tokenSymbol)\n\t{\n\t\t_name = tokenName;\n\t\t_symbol = tokenSymbol;\n\t}\n\n\t/**\n\t* @notice See {IERC20-approve}.\n\t*\n\t* NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n\t* `transferFrom`. This is semantically equivalent to an infinite approval.\n\t*\n\t* Requirements:\n\t*\n\t* - `spender` cannot be the zero address.\n\t*/\n\tfunction approve(address spender, uint256 amount) override public virtual returns (bool)\n\t{\n\t\taddress owner = _msgSender();\n\t\t_approve(owner, spender, amount);\n\t\treturn true;\n\t}\n\n\t/**\n\t* @notice Atomically decreases the allowance granted to `spender` by the caller.\n\t*\n\t* This is an alternative to {approve} that can be used as a mitigation for\n\t* problems described in {IERC20-approve}.\n\t*\n\t* Emits an {Approval} event indicating the updated allowance.\n\t*\n\t* Requirements:\n\t*\n\t* - `spender` cannot be the zero address.\n\t* - `spender` must have allowance for the caller of at least\n\t* `subtractedValue`.\n\t*/\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) override public virtual returns (bool)\n\t{\n\t\taddress owner = _msgSender();\n\t\tuint256 currentAllowance = allowance(owner, spender);\n\t\trequire(currentAllowance >= subtractedValue, \"ERC20: reduced allowance below 0\");\n\t\tunchecked {\n\t\t\t_approve(owner, spender, currentAllowance - subtractedValue);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t* @notice Atomically increases the allowance granted to `spender` by the caller.\n\t*\n\t* This is an alternative to {approve} that can be used as a mitigation for\n\t* problems described in {IERC20-approve}.\n\t*\n\t* Emits an {Approval} event indicating the updated allowance.\n\t*\n\t* Requirements:\n\t*\n\t* - `spender` cannot be the zero address.\n\t*/\n\tfunction increaseAllowance(address spender, uint256 addedValue) override public virtual returns (bool)\n\t{\n\t\taddress owner = _msgSender();\n\t\t_approve(owner, spender, allowance(owner, spender) + addedValue);\n\t\treturn true;\n\t}\n\n\t/**\n\t* @notice See {IERC20-transfer}.\n\t*\n\t* Requirements:\n\t*\n\t* - `to` cannot be the zero address.\n\t* - the caller must have a balance of at least `amount`.\n\t*/\n\tfunction transfer(address to, uint256 amount) override public virtual returns (bool)\n\t{\n\t\taddress owner = _msgSender();\n\t\t_transfer(owner, to, amount);\n\t\treturn true;\n\t}\n\n\t/**\n\t* @notice See {IERC20-transferFrom}.\n\t*\n\t* Emits an {Approval} event indicating the updated allowance. This is not\n\t* required by the EIP. See the note at the beginning of {ERC20}.\n\t*\n\t* NOTE: Does not update the allowance if the current allowance is the maximum `uint256`.\n\t*\n\t* Requirements:\n\t*\n\t* - `from` and `to` cannot be the zero address.\n\t* - `from` must have a balance of at least `amount`.\n\t* - the caller must have allowance for ``from``'s tokens of at least\n\t* `amount`.\n\t*/\n\tfunction transferFrom(address from, address to, uint256 amount) override public virtual returns (bool)\n\t{\n\t\taddress spender = _msgSender();\n\t\t_spendAllowance(from, spender, amount);\n\t\t_transfer(from, to, amount);\n\t\treturn true;\n\t}\n\n\t/**\n\t* @notice See {IERC20-allowance}.\n\t*/\n\tfunction allowance(address owner, address spender) override public view virtual returns (uint256)\n\t{\n\t\treturn _allowances[owner][spender];\n\t}\n\n\t/**\n\t* @notice See {IERC20-balanceOf}.\n\t*/\n\tfunction balanceOf(address account) override public view virtual returns (uint256)\n\t{\n\t\treturn _balances[account];\n\t}\n\n\t/**\n\t* @notice Returns the name of the token.\n\t*/\n\tfunction name() override public view virtual returns (string memory)\n\t{\n\t\treturn _name;\n\t}\n\n\t/**\n\t* @notice Returns the symbol of the token, usually a shorter version of the\n\t* name.\n\t*/\n\tfunction symbol() override public view virtual returns (string memory)\n\t{\n\t\treturn _symbol;\n\t}\n\n\t/**\n\t* @notice See {IERC20-totalSupply}.\n\t*/\n\tfunction totalSupply() override public view virtual returns (uint256)\n\t{\n\t\treturn _totalSupply;\n\t}\n\n\t/**\n\t* @notice Returns the number of decimals used to get its user representation.\n\t* For example, if `decimals` equals `2`, a balance of `505` tokens should\n\t* be displayed to a user as `5.05` (`505 / 10 ** 2`).\n\t*\n\t* Tokens usually opt for a value of 18, imitating the relationship between\n\t* Ether and Wei. This is the value {ERC20} uses, unless this function is\n\t* overridden;\n\t*\n\t* NOTE: This information is only used for _display_ purposes: it in\n\t* no way affects any of the arithmetic of the contract, including\n\t* {IERC20-balanceOf} and {IERC20-transfer}.\n\t*/\n\tfunction decimals() override public pure virtual returns (uint8)\n\t{\n\t\treturn 18;\n\t}\n\n\t/**\n\t* @notice Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n\t*\n\t* This internal function is equivalent to `approve`, and can be used to\n\t* e.g. set automatic allowances for certain subsystems, etc.\n\t*\n\t* Emits an {Approval} event.\n\t*\n\t* Requirements:\n\t*\n\t* - `owner` cannot be the zero address.\n\t* - `spender` cannot be the zero address.\n\t*/\n\tfunction _approve(address owner, address spender, uint256 amount) internal virtual\n\t{\n\t\trequire(owner != address(0), \"ERC20: approve from address(0)\");\n\t\trequire(spender != address(0), \"ERC20: approve to address(0)\");\n\n\t\t_allowances[owner][spender] = amount;\n\t\temit Approval(owner, spender, amount);\n\t}\n\n\t/**\n\t* @notice Destroys `amount` tokens from `account`, reducing the\n\t* total supply.\n\t*\n\t* Emits a {Transfer} event with `to` set to the zero address.\n\t*\n\t* Requirements:\n\t*\n\t* - `account` cannot be the zero address.\n\t* - `account` must have at least `amount` tokens.\n\t*/\n\tfunction _burn(address account, uint256 amount) internal virtual {\n\t\trequire(account != address(0), \"ERC20: burn from address(0)\");\n\n\t\tuint256 accountBalance = _balances[account];\n\t\trequire(accountBalance >= amount, \"ERC20: burn exceeds balance\");\n\t\tunchecked {\n\t\t\t_balances[account] = accountBalance - amount;\n\t\t}\n\t\t_totalSupply -= amount;\n\n\t\temit Transfer(account, address(0), amount);\n\t}\n\n\t/** @notice Creates `amount` tokens and assigns them to `account`, increasing\n\t* the total supply.\n\t*\n\t* Emits a {Transfer} event with `from` set to the zero address.\n\t*\n\t* Requirements:\n\t*\n\t* - `account` cannot be the zero address.\n\t*/\n\tfunction _mint(address account, uint256 amount) internal virtual\n\t{\n\t\trequire(account != address(0), \"ERC20: mint to address(0)\");\n\n\t\t_totalSupply += amount;\n\t\t_balances[account] += amount;\n\t\temit Transfer(address(0), account, amount);\n\t}\n\n\t/**\n\t* @notice Updates `owner` s allowance for `spender` based on spent `amount`.\n\t*\n\t* Does not update the allowance amount in case of infinite allowance.\n\t* Revert if not enough allowance is available.\n\t*\n\t* Might emit an {Approval} event.\n\t*/\n\tfunction _spendAllowance(address owner, address spender, uint256 amount) internal virtual\n\t{\n\t\tuint256 currentAllowance = allowance(owner, spender);\n\t\tif (currentAllowance != type(uint256).max) {\n\t\t\trequire(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n\t\t\tunchecked {\n\t\t\t\t_approve(owner, spender, currentAllowance - amount);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* @notice Moves `amount` of tokens from `sender` to `recipient`.\n\t*\n\t* This internal function is equivalent to {transfer}, and can be used to\n\t* e.g. implement automatic token fees, slashing mechanisms, etc.\n\t*\n\t* Emits a {Transfer} event.\n\t*\n\t* Requirements:\n\t*\n\t* - `from` cannot be the zero address.\n\t* - `to` cannot be the zero address.\n\t* - `from` must have a balance of at least `amount`.\n\t*/\n\tfunction _transfer(address from, address to, uint256 amount) internal virtual\n\t{\n\t\trequire(from != address(0), \"ERC20: transfer from address(0)\");\n\t\trequire(to != address(0), \"ERC20: transfer to address(0)\");\n\n\t\tuint256 fromBalance = _balances[from];\n\t\trequire(fromBalance >= amount, \"ERC20: transfer exceeds balance\");\n\t\tunchecked {\n\t\t\t_balances[from] = fromBalance - amount;\n\t\t}\n\t\t_balances[to] += amount;\n\n\t\temit Transfer(from, to, amount);\n\t}\n}\n"
    },
    "contracts/Exofiswap/interfaces/IExofiswapERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20AltApprove.sol\";\nimport \"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Metadata.sol\";\n\ninterface IExofiswapERC20 is IERC20AltApprove, IERC20Metadata\n{\n\t// Functions as described in EIP 2612\n\tfunction permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n\tfunction nonces(address owner) external view returns (uint256);\n\tfunction DOMAIN_SEPARATOR() external view returns (bytes32); // solhint-disable-line func-name-mixedcase\n\tfunction PERMIT_TYPEHASH() external pure returns (bytes32); //solhint-disable-line func-name-mixedcase\n}"
    },
    "@exoda/contracts/interfaces/token/ERC20/extensions/IERC20AltApprove.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @title ERC20Metadata interface.\n/// @author Ing. Michael Goldfinger\n/// @notice Interface for an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.\n/// @dev This is not part of the ERC20 specification.\ninterface IERC20AltApprove\n{\n\t/**\n\t* @notice Atomically decreases the allowance granted to `spender` by the caller.\n\t*\n\t* This is an alternative to {approve} that can be used as a mitigation for\n\t* problems described in {IERC20-approve}.\n\t*\n\t* Emits an {Approval} event indicating the updated allowance.\n\t*\n\t* Requirements:\n\t*\n\t* - `spender` cannot be the zero address.\n\t* - `spender` must have allowance for the caller of at least\n\t* `subtractedValue`.\n\t*/\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\n\n\t/**\n\t* @notice Atomically increases the allowance granted to `spender` by the caller.\n\t*\n\t* This is an alternative to {approve} that can be used as a mitigation for\n\t* problems described in {IERC20-approve}.\n\t*\n\t* Emits an {Approval} event indicating the updated allowance.\n\t*\n\t* Requirements:\n\t*\n\t* - `spender` cannot be the zero address.\n\t*/\n\tfunction increaseAllowance(address spender, uint256 addedValue) external returns (bool);\n}\n"
    },
    "@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/// @title ERC20Metadata interface.\n/// @author Ing. Michael Goldfinger\n/// @notice Interface for the optional metadata functions from the ERC20 standard.\ninterface IERC20Metadata is IERC20\n{\n\t/// @notice Returns the name of the token.\n\t/// @return The token name.\n\tfunction name() external view returns (string memory);\n\n\t/// @notice Returns the symbol of the token.\n\t/// @return The symbol for the token.\n\tfunction symbol() external view returns (string memory);\n\n\t/// @notice Returns the decimals of the token.\n\t/// @return The decimals for the token.\n\tfunction decimals() external pure returns (uint8);\n}\n"
    },
    "@exoda/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n* @notice Provides information about the current execution context, including the\n* sender of the transaction and its data. While these are generally available\n* via msg.sender and msg.data, they should not be accessed in such a direct\n* manner, since when dealing with meta-transactions the account sending and\n* paying for execution may not be the actual sender (as far as an application\n* is concerned).\n*\n* This contract is only required for intermediate, library-like contracts.\n*/\nabstract contract Context\n{\n\t/// @notice returns the sender of the transaction.\n\t/// @return The sender of the transaction.\n\tfunction _msgSender() internal view virtual returns (address)\n\t{\n\t\treturn msg.sender;\n\t}\n\n\t/// @notice returns the data of the transaction.\n\t/// @return The data of the transaction.\n\tfunction _msgData() internal view virtual returns (bytes calldata)\n\t{\n\t\treturn msg.data;\n\t}\n}\n"
    },
    "@exoda/contracts/interfaces/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @title ERC20 interface.\n * @author Ing. Michael Goldfinger\n * @notice Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20\n{\n\t/**\n\t * @notice Emitted when the allowance of a {spender} for an {owner} is set to a new value.\n\t *\n\t * NOTE: {value} may be zero.\n\t * @param owner (indexed) The owner of the tokens.\n\t * @param spender (indexed) The spender for the tokens.\n\t * @param value The amount of tokens that got an allowance.\n\t */\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n\n\t/**\n\t * @notice Emitted when {value} tokens are moved from one address {from} to another {to}.\n\t *\n\t * NOTE: {value} may be zero.\n\t * @param from (indexed) The origin of the transfer.\n\t * @param to (indexed) The target of the transfer.\n\t * @param value The amount of tokens that got transfered.\n\t */\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n\t/**\n\t* @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n\t*\n\t* Returns a boolean value indicating whether the operation succeeded.\n\t*\n\t* IMPORTANT: Beware that changing an allowance with this method brings the risk\n\t* that someone may use both the old and the new allowance by unfortunate\n\t* transaction ordering. One possible solution to mitigate this race\n\t* condition is to first reduce the spender's allowance to 0 and set the\n\t* desired value afterwards:\n\t* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\t*\n\t* Emits an {Approval} event.\n\t*/\n\tfunction approve(address spender, uint256 amount) external returns (bool);\n\n\t/**\n\t* @dev Moves `amount` tokens from the caller's account to `to`.\n\t*\n\t* Returns a boolean value indicating whether the operation succeeded.\n\t*\n\t* Emits a {Transfer} event.\n\t*/\n\tfunction transfer(address to, uint256 amount) external returns (bool);\n\n\t/**\n\t* @dev Moves `amount` tokens from `from` to `to` using the allowance mechanism.\n\t* `amount` is then deducted from the caller's allowance.\n\t*\n\t* Returns a boolean value indicating whether the operation succeeded.\n\t*\n\t* Emits a {Transfer} event.\n\t*/\n\tfunction transferFrom(address from, address to, uint256 amount) external returns (bool);\n\n\t/**\n\t* @dev Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}.\n\t* This is zero by default.\n\t*\n\t* This value changes when {approve}, {increaseAllowance}, {decreseAllowance} or {transferFrom} are called.\n\t*/\n\tfunction allowance(address owner, address spender) external view returns (uint256);\n\n\t/**\n\t* @dev Returns the amount of tokens owned by `account`.\n\t*/\n\tfunction balanceOf(address account) external view returns (uint256);\n\n\t/**\n\t* @dev Returns the amount of tokens in existence.\n\t*/\n\tfunction totalSupply() external view returns (uint256);\n}\n"
    },
    "contracts/mocks/ExofiswapERC20Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../Exofiswap/ExofiswapERC20.sol\";\n\ncontract ExofiswapERC20Mock is ExofiswapERC20\n{\n\tconstructor(string memory name, uint256 supply) ExofiswapERC20(name)\n\t{\n\t\t_mint(msg.sender, supply);\n\t}\n}"
    },
    "contracts/Exofiswap/ExofiswapPair.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@exoda/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./interfaces/IExofiswapCallee.sol\";\nimport \"./interfaces/IExofiswapFactory.sol\";\nimport \"./interfaces/IExofiswapPair.sol\";\nimport \"./interfaces/IMigrator.sol\";\nimport \"./ExofiswapERC20.sol\";\nimport \"./libraries/MathUInt32.sol\";\nimport \"./libraries/MathUInt256.sol\";\nimport \"./libraries/UQ144x112.sol\";\n\ncontract ExofiswapPair is IExofiswapPair, ExofiswapERC20\n{\n\t// using UQ144x112 for uint256;\n\t// using SafeERC20 for IERC20Metadata; // For some unknown reason using this needs a little more gas than using the library without it.\n\tstruct SwapAmount // needed to reduce stack deep;\n\t{\n\t\tuint256 balance0;\n\t\tuint256 balance1;\n\t\tuint112 reserve0;\n\t\tuint112 reserve1;\n\t}\n\n\tuint256 private constant _MINIMUM_LIQUIDITY = 10**3;\n\tuint256 private _price0CumulativeLast;\n\tuint256 private _price1CumulativeLast;\n\tuint256 private _kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\n\tuint256 private _unlocked = 1;\n\tuint112 private _reserve0;           // uses single storage slot, accessible via getReserves\n\tuint112 private _reserve1;           // uses single storage slot, accessible via getReserves\n\tuint32  private _blockTimestampLast; // uses single storage slot, accessible via getReserves\n\tIExofiswapFactory private immutable _factory;\n\tIERC20Metadata private _token0;\n\tIERC20Metadata private _token1;\n\n\tmodifier lock()\n\t{\n\t\trequire(_unlocked == 1, \"EP: LOCKED\");\n\t\t_unlocked = 0;\n\t\t_;\n\t\t_unlocked = 1;\n\t}\n\n\tconstructor() ExofiswapERC20(\"Plasma\")\n\t{\n\t\t_factory = IExofiswapFactory(_msgSender());\n\t}\n\n\t// called once by the factory at time of deployment\n\tfunction initialize(IERC20Metadata token0Init, IERC20Metadata token1Init) override external\n\t{\n\t\trequire(_msgSender() == address(_factory), \"EP: FORBIDDEN\");\n\t\t_token0 = token0Init;\n\t\t_token1 = token1Init;\n\t}\n\n\t// this low-level function should be called from a contract which performs important safety checks\n\tfunction burn(address to) override public lock returns (uint, uint)\n\t{\n\t\tSwapAmount memory sa;\n\t\t(sa.reserve0, sa.reserve1,) = getReserves(); // gas savings\n\t\tsa.balance0 = _token0.balanceOf(address(this));\n\t\tsa.balance1 = _token1.balanceOf(address(this));\n\t\tuint256 liquidity = balanceOf(address(this));\n\n\t\t// Can not overflow\n\t\tbool feeOn = _mintFee(MathUInt256.unsafeMul(sa.reserve0, sa.reserve1));\n\t\tuint256 totalSupplyValue = _totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n\t\tuint256 amount0 = MathUInt256.unsafeDiv(liquidity * sa.balance0, totalSupplyValue); // using balances ensures pro-rata distribution\n\t\tuint256 amount1 = MathUInt256.unsafeDiv(liquidity * sa.balance1, totalSupplyValue); // using balances ensures pro-rata distribution\n\t\trequire(amount0 > 0 && amount1 > 0, \"EP: INSUFFICIENT_LIQUIDITY\");\n\t\t_burn(address(this), liquidity);\n\t\tSafeERC20.safeTransfer(_token0, to, amount0);\n\t\tSafeERC20.safeTransfer(_token1, to, amount1);\n\t\tsa.balance0 = _token0.balanceOf(address(this));\n\t\tsa.balance1 = _token1.balanceOf(address(this));\n\n\t\t_update(sa);\n\n\t\tif (feeOn)\n\t\t{\n\t\t\tunchecked // Can not overflow\n\t\t\t{\n\t\t\t\t// _reserve0 and _reserve1 are up-to-date\n\t\t\t\t// What _update(sa) does is set _reserve0 to sa.balance0 and _reserve1 to sa.balance1\n\t\t\t\t// So there is no neet to access and converte the _reserves directly,\n\t\t\t\t// instead use the known balances that are already in the correct type.\n\t\t\t\t_kLast = sa.balance0 * sa.balance1; \n\t\t\t}\n\t\t}\n\t\temit Burn(msg.sender, amount0, amount1, to);\n\t\treturn (amount0, amount1);\n\t}\n\n\t// this low-level function should be called from a contract which performs important safety checks\n\tfunction mint(address to) override public lock returns (uint256)\n\t{\n\t\tSwapAmount memory sa;\n\t\t(sa.reserve0, sa.reserve1,) = getReserves(); // gas savings\n\t\tsa.balance0 = _token0.balanceOf(address(this));\n\t\tsa.balance1 = _token1.balanceOf(address(this));\n\t\tuint256 amount0 = sa.balance0 - sa.reserve0;\n\t\tuint256 amount1 = sa.balance1 - sa.reserve1;\n\n\t\tbool feeOn = _mintFee(MathUInt256.unsafeMul(sa.reserve0, sa.reserve1));\n\t\tuint256 totalSupplyValue = _totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n\t\tuint256 liquidity;\n\n\t\tif (totalSupplyValue == 0)\n\t\t{\n\t\t\tIMigrator migrator = _factory.migrator();\n\t\t\tif (_msgSender() == address(migrator))\n\t\t\t{\n\t\t\t\tliquidity = migrator.desiredLiquidity();\n\t\t\t\trequire(liquidity > 0 && liquidity != type(uint256).max, \"EP: Liquidity Error\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\trequire(address(migrator) == address(0), \"EP: Migrator set\");\n\t\t\t\tliquidity = MathUInt256.sqrt(amount0 * amount1) - _MINIMUM_LIQUIDITY;\n\t\t\t\t_mintMinimumLiquidity();\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//Div by uint can not overflow\n\t\t\tliquidity = \n\t\t\t\tMathUInt256.min(\n\t\t\t\t\tMathUInt256.unsafeDiv(amount0 * totalSupplyValue, sa.reserve0),\n\t\t\t\t\tMathUInt256.unsafeDiv(amount1 * totalSupplyValue, sa.reserve1)\n\t\t\t\t);\n\t\t}\n\t\trequire(liquidity > 0, \"EP: INSUFFICIENT_LIQUIDITY\");\n\t\t_mint(to, liquidity);\n\n\t\t_update(sa);\n\t\tif (feeOn)\n\t\t{\n\t\t\t// _reserve0 and _reserve1 are up-to-date\n\t\t\t// What _update(sa) does is set _reserve0 to sa.balance0 and _reserve1 to sa.balance1\n\t\t\t// So there is no neet to access and converte the _reserves directly,\n\t\t\t// instead use the known balances that are already in the correct type.\n\t\t\t_kLast = sa.balance0 * sa.balance1; \n\t\t}\n\t\temit Mint(_msgSender(), amount0, amount1);\n\t\treturn liquidity;\n\t}\n\n\t// force balances to match reserves\n\tfunction skim(address to) override public lock\n\t{\n\t\tSafeERC20.safeTransfer(_token0, to, _token0.balanceOf(address(this)) - _reserve0);\n\t\tSafeERC20.safeTransfer(_token1, to, _token1.balanceOf(address(this)) - _reserve1);\n\t}\n\n\t// this low-level function should be called from a contract which performs important safety checks\n\tfunction swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) override public lock\n\t{\n\t\trequire(amount0Out > 0 || amount1Out > 0, \"EP: INSUFFICIENT_OUTPUT_AMOUNT\");\n\t\tSwapAmount memory sa;\n\t\t(sa.reserve0, sa.reserve1, ) = getReserves(); // gas savings\n\t\trequire(amount0Out < sa.reserve0, \"EP: INSUFFICIENT_LIQUIDITY\");\n\t\trequire(amount1Out < sa.reserve1, \"EP: INSUFFICIENT_LIQUIDITY\");\n\n\t\t(sa.balance0, sa.balance1) = _transferTokens(to, amount0Out, amount1Out, data);\n\n\t\t(uint256 amount0In, uint256 amount1In) = _getInAmounts(amount0Out, amount1Out, sa);\n\t\trequire(amount0In > 0 || amount1In > 0, \"EP: INSUFFICIENT_INPUT_AMOUNT\");\n\t\t{ \n\t\t\t// This is a sanity check to make sure we don't lose from the swap.\n\t\t\t// scope for reserve{0,1} Adjusted, avoids stack too deep errors\n\t\t\tuint256 balance0Adjusted = (sa.balance0 * 1000) - (amount0In * 3); \n\t\t\tuint256 balance1Adjusted = (sa.balance1 * 1000) - (amount1In * 3); \n\t\t\t// 112 bit * 112 bit * 20 bit can not overflow a 256 bit value\n\t\t\t// Bigest possible number is 2,695994666715063979466701508702e+73\n\t\t\t// uint256 maxvalue is 1,1579208923731619542357098500869e+77\n\t\t\t// or 2**112 * 2**112 * 2**20 = 2**244 < 2**256\n\t\t\trequire(balance0Adjusted * balance1Adjusted >= MathUInt256.unsafeMul(MathUInt256.unsafeMul(sa.reserve0, sa.reserve1), 1_000_000), \"EP: K\");\n\t\t}\n\t\t_update(sa);\n\t\temit Swap(_msgSender(), amount0In, amount1In, amount0Out, amount1Out, to);\n\t}\n\n\t\n\t// force reserves to match balances\n\tfunction sync() override public lock\n\t{\n\t\t_update(SwapAmount(_token0.balanceOf(address(this)), _token1.balanceOf(address(this)), _reserve0, _reserve1));\n\t}\n\t\n\tfunction factory() override public view returns (IExofiswapFactory)\n\t{\n\t\treturn _factory;\n\t}\n\n\tfunction getReserves() override public view returns (uint112, uint112, uint32)\n\t{\n\t\treturn (_reserve0, _reserve1, _blockTimestampLast);\n\t}\n\n\tfunction kLast() override public view returns (uint256)\n\t{\n\t\treturn _kLast;\n\t}\n\t\n\tfunction name() override(ERC20, IERC20Metadata) public view virtual returns (string memory)\n\t{\n\t\treturn string(abi.encodePacked(_token0.symbol(), \"/\", _token1.symbol(), \" \", super.name()));\n\t}\n\n\tfunction price0CumulativeLast() override public view returns (uint256)\n\t{\n\t\treturn _price0CumulativeLast;\n\t}\n\n\tfunction price1CumulativeLast() override public view returns (uint256)\n\t{\n\t\treturn _price1CumulativeLast;\n\t}\n\n\n\tfunction token0() override public view returns (IERC20Metadata)\n\t{\n\t\treturn _token0;\n\t}\n\t\n\tfunction token1() override public view returns (IERC20Metadata)\n\t{\n\t\treturn _token1;\n\t}\n\n\tfunction MINIMUM_LIQUIDITY() override public pure returns (uint256) //solhint-disable-line func-name-mixedcase\n\t{\n\t\treturn _MINIMUM_LIQUIDITY;\n\t}\n\n\tfunction _mintMinimumLiquidity() private\n\t{\n\t\trequire(_totalSupply == 0, \"EP: Total supply not 0\");\n\n\t\t_totalSupply += _MINIMUM_LIQUIDITY;\n\t\t_balances[address(0)] += _MINIMUM_LIQUIDITY;\n\t\temit Transfer(address(0), address(0), _MINIMUM_LIQUIDITY);\n\t}\n\n\tfunction _transferTokens(address to, uint256 amount0Out, uint256 amount1Out, bytes calldata data) private returns (uint256, uint256)\n\t{\n\t\trequire(address(to) != address(_token0) && to != address(_token1), \"EP: INVALID_TO\");\n\t\tif (amount0Out > 0) SafeERC20.safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\n\t\tif (amount1Out > 0) SafeERC20.safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\n\t\tif (data.length > 0) IExofiswapCallee(to).exofiswapCall(_msgSender(), amount0Out, amount1Out, data);\n\t\treturn (_token0.balanceOf(address(this)), _token1.balanceOf(address(this)));\n\t}\n\n\t// if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\n\tfunction _mintFee(uint256 k) private returns (bool)\n\t{\n\t\taddress feeTo = _factory.feeTo();\n\t\tuint256 kLastHelp = _kLast; // gas savings\n\t\tif (feeTo != address(0))\n\t\t{\n\t\t\tif (kLastHelp != 0)\n\t\t\t{\n\t\t\t\tuint256 rootK = MathUInt256.sqrt(k);\n\t\t\t\tuint256 rootKLast = MathUInt256.sqrt(kLastHelp);\n\t\t\t\tif (rootK > rootKLast)\n\t\t\t\t{\n\t\t\t\t\tuint256 numerator = _totalSupply * MathUInt256.unsafeSub(rootK, rootKLast);\n\t\t\t\t\t// Since rootK is the sqrt of k. Multiplication by 5 can never overflow\n\t\t\t\t\tuint256 denominator = MathUInt256.unsafeMul(rootK, 5) + rootKLast;\n\t\t\t\t\tuint256 liquidity = MathUInt256.unsafeDiv(numerator, denominator);\n\t\t\t\t\tif (liquidity > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t_mint(feeTo, liquidity);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tif(kLastHelp != 0)\n\t\t{\n\t\t\t_kLast = 0;\n\t\t}\n\t\treturn false;\n\t}\n\n\t// update reserves and, on the first call per block, price accumulators\n\tfunction _update(SwapAmount memory sa) private\n\t{\n\t\trequire(sa.balance0 <= type(uint112).max, \"EP: OVERFLOW\");\n\t\trequire(sa.balance1 <= type(uint112).max, \"EP: OVERFLOW\");\n\t\t// solhint-disable-next-line not-rely-on-time\n\t\tuint32 blockTimestamp = uint32(block.timestamp);\n\t\tif (sa.reserve1 != 0)\n\t\t{\n\t\t\tif (sa.reserve0 != 0)\n\t\t\t{\t\n\t\t\t\tuint32 timeElapsed = MathUInt32.unsafeSub32(blockTimestamp, _blockTimestampLast); // overflow is desired\n\t\t\t\tif (timeElapsed > 0)\n\t\t\t\t{\t\n\t\t\t\t\t// * never overflows, and + overflow is desired\n\t\t\t\t\tunchecked\n\t\t\t\t\t{\n\t\t\t\t\t\t_price0CumulativeLast += (UQ144x112.uqdiv(UQ144x112.encode(sa.reserve1),sa.reserve0) * timeElapsed);\n\t\t\t\t\t\t_price1CumulativeLast += (UQ144x112.uqdiv(UQ144x112.encode(sa.reserve0), sa.reserve1) * timeElapsed);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_reserve0 = uint112(sa.balance0);\n\t\t_reserve1 = uint112(sa.balance1);\n\t\t_blockTimestampLast = blockTimestamp;\n\t\temit Sync(_reserve0, _reserve1);\n\t}\n\n\tfunction _getInAmounts(uint256 amount0Out, uint256 amount1Out, SwapAmount memory sa)\n\t\tprivate pure returns(uint256, uint256)\n\t{\n\t\tuint256 div0 = MathUInt256.unsafeSub(sa.reserve0, amount0Out);\n\t\tuint256 div1 = MathUInt256.unsafeSub(sa.reserve1, amount1Out);\n\t\treturn (sa.balance0 > div0 ? MathUInt256.unsafeSub(sa.balance0, div0) : 0, sa.balance1 > div1 ? MathUInt256.unsafeSub(sa.balance1, div1) : 0);\n\t}\n}\n"
    },
    "@exoda/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../../../interfaces/token/ERC20/IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20\n{\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal\n    {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal\n    {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal\n    {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \"SafeERC20: exploitable approve\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal\n    {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal\n    {\n        unchecked\n        {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: reduced allowance <0\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private\n    {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0)\n        {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 call failed\");\n        }\n    }\n}\n"
    },
    "contracts/Exofiswap/interfaces/IExofiswapCallee.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IExofiswapCallee\n{\n    function exofiswapCall(address sender, uint amount0, uint amount1, bytes calldata data) external;\n}"
    },
    "contracts/Exofiswap/interfaces/IExofiswapFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@exoda/contracts/interfaces/access/IOwnable.sol\";\nimport \"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"./IExofiswapFactory.sol\";\nimport \"./IExofiswapPair.sol\";\nimport \"./IMigrator.sol\";\n\ninterface IExofiswapFactory is IOwnable\n{\n\tevent PairCreated(IERC20Metadata indexed token0, IERC20Metadata indexed token1, IExofiswapPair pair, uint256 pairCount);\n\n\tfunction createPair(IERC20Metadata tokenA, IERC20Metadata tokenB) external returns (IExofiswapPair pair);\n\tfunction setFeeTo(address) external;\n\tfunction setMigrator(IMigrator) external;\n\t\n\tfunction allPairs(uint256 index) external view returns (IExofiswapPair);\n\tfunction allPairsLength() external view returns (uint);\n\tfunction feeTo() external view returns (address);\n\tfunction getPair(IERC20Metadata tokenA, IERC20Metadata tokenB) external view returns (IExofiswapPair);\n\tfunction migrator() external view returns (IMigrator);\n\n\tfunction pairCodeHash() external pure returns (bytes32);\n}\n"
    },
    "contracts/Exofiswap/interfaces/IExofiswapPair.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IExofiswapCallee.sol\";\nimport \"./IExofiswapERC20.sol\";\nimport \"./IExofiswapFactory.sol\";\n\ninterface IExofiswapPair is IExofiswapERC20\n{\n\tevent Mint(address indexed sender, uint256 amount0, uint256 amount1);\n\tevent Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\n\tevent Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\n\tevent Sync(uint112 reserve0, uint112 reserve1);\n\n\tfunction burn(address to) external returns (uint256 amount0, uint256 amount1);\n\tfunction initialize(IERC20Metadata token0Init, IERC20Metadata token1Init) external;\n\tfunction mint(address to) external returns (uint256 liquidity);\n\tfunction skim(address to) external;\n\tfunction swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\n\tfunction sync() external;\n\n\tfunction factory() external view returns (IExofiswapFactory);\n\tfunction getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n\tfunction kLast() external view returns (uint256);\n\tfunction price0CumulativeLast() external view returns (uint256);\n\tfunction price1CumulativeLast() external view returns (uint256);\n\tfunction token0() external view returns (IERC20Metadata);\n\tfunction token1() external view returns (IERC20Metadata);\n\n\tfunction MINIMUM_LIQUIDITY() external pure returns (uint256); //solhint-disable-line func-name-mixedcase\n}"
    },
    "contracts/Exofiswap/interfaces/IMigrator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IMigrator\n{\n\t// Return the desired amount of liquidity token that the migrator wants.\n\tfunction desiredLiquidity() external view returns (uint256);\n}"
    },
    "contracts/Exofiswap/libraries/MathUInt32.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary MathUInt32\n{\n\tfunction unsafeSub32(uint32 a, uint32 b) internal pure returns (uint32)\n\t{\n\t\tunchecked\n\t\t{\n\t\t\treturn a - b;\n\t\t}\n\t}\n}"
    },
    "contracts/Exofiswap/libraries/MathUInt256.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary MathUInt256\n{\n\tfunction min(uint256 a, uint256 b) internal pure returns(uint256)\n\t{\n\t\treturn a > b ? b : a;\n\t}\n\n\t// solhint-disable-next-line code-complexity\n\tfunction sqrt(uint256 x) internal pure returns (uint256)\n\t{\n\t\tif (x == 0)\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\n\t\tuint256 xAux = x;\n\t\tuint256 result = 1;\n\t\tif (xAux >= 0x100000000000000000000000000000000)\n\t\t{\n\t\t\txAux >>= 128;\n\t\t\tresult <<= 64;\n\t\t}\n\t\tif (xAux >= 0x10000000000000000)\n\t\t{\n\t\t\txAux >>= 64;\n\t\t\tresult <<= 32;\n\t\t}\n\t\tif (xAux >= 0x100000000)\n\t\t{\n\t\t\txAux >>= 32;\n\t\t\tresult <<= 16;\n\t\t}\n\t\tif (xAux >= 0x10000)\n\t\t{\n\t\t\txAux >>= 16;\n\t\t\tresult <<= 8;\n\t\t}\n\t\tif (xAux >= 0x100)\n\t\t{\n\t\t\txAux >>= 8;\n\t\t\tresult <<= 4;\n\t\t}\n\t\tif (xAux >= 0x10)\n\t\t{\n\t\t\txAux >>= 4;\n\t\t\tresult <<= 2;\n\t\t}\n\t\tif (xAux >= 0x4)\n\t\t{\n\t\t\tresult <<= 1;\n\t\t}\n\n\t\t// The operations can never overflow because the result is max 2^127 when it enters this block.\n\t\tunchecked\n\t\t{\n\t\t\tresult = (result + x / result) >> 1;\n\t\t\tresult = (result + x / result) >> 1;\n\t\t\tresult = (result + x / result) >> 1;\n\t\t\tresult = (result + x / result) >> 1;\n\t\t\tresult = (result + x / result) >> 1;\n\t\t\tresult = (result + x / result) >> 1;\n\t\t\tresult = (result + x / result) >> 1; // Seven iterations should be enough\n\t\t\tuint256 roundedDownResult = x / result;\n\t\t\treturn result >= roundedDownResult ? roundedDownResult : result;\n\t\t}\n\t}\n\n\tfunction unsafeDec(uint256 a) internal pure returns (uint256)\n\t{\n\t\tunchecked \n\t\t{\n\t\t\treturn a - 1;\n\t\t}\n\t}\n\n\tfunction unsafeDiv(uint256 a, uint256 b) internal pure returns (uint256)\n\t{\n\t\tunchecked\n\t\t{\n\t\t\treturn a / b;\n\t\t}\n\t}\n\n\tfunction unsafeInc(uint256 a) internal pure returns (uint256)\n\t{\n\t\tunchecked \n\t\t{\n\t\t\treturn a + 1;\n\t\t}\n\t}\n\n\tfunction unsafeMul(uint256 a, uint256 b) internal pure returns (uint256)\n\t{\n\t\tunchecked\n\t\t{\n\t\t\treturn a * b;\n\t\t}\n\t}\n\n\tfunction unsafeSub(uint256 a, uint256 b) internal pure returns (uint256)\n\t{\n\t\tunchecked\n\t\t{\n\t\t\treturn a - b;\n\t\t}\n\t}\n}"
    },
    "contracts/Exofiswap/libraries/UQ144x112.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\n\n// range: [0, 2**144 - 1]\n// resolution: 1 / 2**112\n\nlibrary UQ144x112\n{\n\tuint256 private constant _Q112 = 2**112;\n\n\t// encode a uint112 as a UQ144x112\n\tfunction encode(uint112 y) internal pure returns (uint256)\n\t{\n\t\tunchecked\n\t\t{\n\t\t\treturn uint256(y) * _Q112; // never overflows\n\t\t}\n\t}\n\n\t// divide a UQ144x112 by a uint112, returning a UQ144x112\n    function uqdiv(uint256 x, uint112 y) internal pure returns (uint256)\n\t{\n        return x / uint256(y);\n    }\n}"
    },
    "@exoda/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address\n{\n    /* solhint-disable max-line-length */\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n     /* solhint-enable max-line-length */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory)\n    {\n        return functionCallWithValue(target, data, 0, \"Address: call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory)\n    {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory)\n    {\n        return functionCallWithValue(target, data, value, \"Address: call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory)\n    {\n        require(address(this).balance >= value, \"Address: balance to low for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) internal pure returns (bytes memory)\n    {\n        if (success)\n        {\n            return returndata;\n        } else\n        {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly\n                {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            }\n            else\n            {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@exoda/contracts/interfaces/access/IOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @title Ownable interface.\n/// @author Ing. Michael Goldfinger\n/// @notice This interface contains all visible functions and events for the Ownable contract module.\ninterface IOwnable\n{\n\t/// @notice Emitted when ownership is moved from one address to another.\n\t/// @param previousOwner (indexed) The owner of the contract until now.\n\t/// @param newOwner (indexed) The new owner of the contract.\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\t/**\n\t * @notice Leaves the contract without an owner. It will not be possible to call {onlyOwner} functions anymore.\n\t *\n\t * NOTE: Renouncing ownership will leave the contract without an owner,\n\t * thereby removing any functionality that is only available to the owner.\n\t *\n\t * Emits an [`OwnershipTransferred`](#ownershiptransferred) event indicating the renounced ownership.\n\t *\n\t * Requirements:\n\t * - Can only be called by the current owner.\n\t * \n\t * @dev Sets the zero address as the new contract owner.\n\t */\n\tfunction renounceOwnership() external;\n\n\t/**\n\t * @notice Transfers ownership of the contract to a new address.\n\t *\n\t * Emits an [`OwnershipTransferred`](#ownershiptransferred) event indicating the transfered ownership.\n\t *\n\t * Requirements:\n\t * - Can only be called by the current owner.\n\t *\n\t * @param newOwner The new owner of the contract.\n\t */\n\tfunction transferOwnership(address newOwner) external;\n\n\t/// @notice Returns the current owner.\n\t/// @return The current owner.\n\tfunction owner() external view returns (address);\n}"
    },
    "contracts/Exofiswap/libraries/ExofiswapLibrary.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"./MathUInt256.sol\";\nimport \"../interfaces/IExofiswapPair.sol\";\n\nlibrary ExofiswapLibrary\n{\n\tfunction safeTransferETH(address to, uint256 value) internal\n\t{\n\t\t// solhint-disable-next-line avoid-low-level-calls\n\t\t(bool success, ) = to.call{value: value}(new bytes(0));\n\t\trequire(success, \"ER: ETH transfer failed\");\n\t}\n\n\t// performs chained getAmountIn calculations on any number of pairs\n\tfunction getAmountsIn(IExofiswapFactory factory, uint256 amountOut, IERC20Metadata[] memory path)\n\tinternal view returns (uint256[] memory amounts)\n\t{\n\t\t// can not underflow since path.length >= 2;\n\t\tuint256 j = path.length;\n\t\trequire(j >= 2, \"EL: INVALID_PATH\");\n\t\tamounts = new uint256[](j);\n\t\tj = MathUInt256.unsafeDec(j);\n\t\tamounts[j] = amountOut;\n\t\tfor (uint256 i = j; i > 0; i = j)\n\t\t{\n\t\t\tj = MathUInt256.unsafeDec(j);\n\t\t\t(uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[j], path[i]);\n\t\t\tamounts[j] = getAmountIn(amounts[i], reserveIn, reserveOut);\n\t\t}\n\t}\n\n\t// performs chained getAmountOut calculations on any number of pairs\n\tfunction getAmountsOut(IExofiswapFactory factory, uint256 amountIn, IERC20Metadata[] memory path)\n\tinternal view returns (uint256[] memory amounts)\n\t{\n\t\trequire(path.length >= 2, \"EL: INVALID_PATH\");\n\t\tamounts = new uint256[](path.length);\n\t\tamounts[0] = amountIn;\n\t\t// can not underflow since path.length >= 2;\n\t\tuint256 to = MathUInt256.unsafeDec(path.length);\n\t\tuint256 j;\n\t\tfor (uint256 i; i < to; i = j)\n\t\t{\n\t\t\tj = MathUInt256.unsafeInc(i);\n\t\t\t(uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i], path[j]);\n\t\t\tamounts[j] = getAmountOut(amounts[i], reserveIn, reserveOut);\n\t\t}\n\t}\n\n\tfunction getReserves(IExofiswapFactory factory, IERC20Metadata token0, IERC20Metadata token1) internal view returns (uint256, uint256)\n\t{\n\t\t(IERC20Metadata tokenL,) = sortTokens(token0, token1);\n\t\t(uint reserve0, uint reserve1,) = pairFor(factory, token0, token1).getReserves();\n\t\treturn tokenL == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n\t}\n\n\t// calculates the CREATE2 address. It uses the factory for this since Factory already has the Pair contract included.\n\t// Otherwise this library would add the size of the Pair Contract to every contract using this function.\n\tfunction pairFor(IExofiswapFactory factory, IERC20Metadata token0, IERC20Metadata token1) internal pure returns (IExofiswapPair) {\n\t\t\n\t\t(IERC20Metadata tokenL, IERC20Metadata tokenR) = token0 < token1 ? (token0, token1) : (token1, token0);\n\t\treturn IExofiswapPair(address(uint160(uint256(keccak256(abi.encodePacked(\n\t\t\t\thex'ff', // CREATE2\n\t\t\t\taddress(factory), // sender\n\t\t\t\tkeccak256(abi.encodePacked(tokenL, tokenR)), // salt\n\t\t\t\thex'93f3fe0318003c7206f800a766c527c0780921761b1b6c75e682006484496187' // init code hash keccak256(type(ExofiswapPair).creationCode);\n\t\t\t))))));\n\t}\n\n\t// given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n\tfunction getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut) internal pure returns (uint amountIn)\n\t{\n\t\trequire(amountOut > 0, \"EL: INSUFFICIENT_OUTPUT_AMOUNT\");\n\t\trequire(reserveIn > 0 && reserveOut > 0, \"EL: INSUFFICIENT_LIQUIDITY\");\n\t\tuint256 numerator = reserveIn * amountOut * 1000;\n\t\tuint256 denominator = (reserveOut - amountOut) * 997;\n\t\t// Div of uint can not overflow\n\t\t// numerator is calulated in a way that if no overflow happens it is impossible to be type(uint256).max.\n\t\t// The most simple explanation is that * 1000 is a multiplikation with an even number so the result hast to be even to.\n\t\t// since type(uint256).max is uneven the result has to be smaler than type(uint256).max or an overflow would have occured.\n\t\treturn MathUInt256.unsafeInc(MathUInt256.unsafeDiv(numerator, denominator));\n\t}\n\n\tfunction getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) internal pure returns (uint256)\n\t{\n\t\trequire(amountIn > 0, \"EL: INSUFFICIENT_INPUT_AMOUNT\");\n\t\trequire(reserveIn > 0, \"EL: INSUFFICIENT_LIQUIDITY\");\n\t\trequire(reserveOut > 0, \"EL: INSUFFICIENT_LIQUIDITY\");\n\t\tuint256 amountInWithFee = amountIn * 997;\n\t\tuint256 numerator = amountInWithFee * reserveOut;\n\t\tuint256 denominator = (reserveIn * 1000) + amountInWithFee;\n\t\t// Div of uint can not overflow\n\t\treturn MathUInt256.unsafeDiv(numerator, denominator);\n\t}\n\n\t// given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n\tfunction quote(uint256 amount, uint256 reserve0, uint256 reserve1) internal pure returns (uint256) {\n\t\trequire(amount > 0, \"EL: INSUFFICIENT_AMOUNT\");\n\t\trequire(reserve0 > 0, \"EL: INSUFFICIENT_LIQUIDITY\");\n\t\trequire(reserve1 > 0, \"EL: INSUFFICIENT_LIQUIDITY\");\n\t\t// Division with uint can not overflow.\n\t\treturn MathUInt256.unsafeDiv(amount * reserve1, reserve0);\n\t}\n\n\t// returns sorted token addresses, used to handle return values from pairs sorted in this order\n\tfunction sortTokens(IERC20Metadata token0, IERC20Metadata token1) internal pure returns (IERC20Metadata tokenL, IERC20Metadata tokenR)\n\t{\n\t\trequire(token0 != token1, \"EL: IDENTICAL_ADDRESSES\");\n\t\t(tokenL, tokenR) = token0 < token1 ? (token0, token1) : (token1, token0);\n\t\trequire(address(tokenL) != address(0), \"EL: ZERO_ADDRESS\");\n\t}\n}"
    },
    "contracts/Exofiswap/ExofiswapRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@exoda/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@exoda/contracts/utils/Context.sol\";\nimport \"./libraries/ExofiswapLibrary.sol\";\nimport \"./libraries/MathUInt256.sol\";\nimport \"./interfaces/IExofiswapFactory.sol\";\nimport \"./interfaces/IExofiswapPair.sol\";\nimport \"./interfaces/IExofiswapRouter.sol\";\nimport \"./interfaces/IWETH9.sol\";\n\ncontract ExofiswapRouter is IExofiswapRouter, Context\n{\n\tIExofiswapFactory private immutable _swapFactory;\n\tIWETH9 private immutable _wrappedEth;\n\n\tmodifier ensure(uint256 deadline) {\n\t\trequire(deadline >= block.timestamp, \"ER: EXPIRED\"); // solhint-disable-line not-rely-on-time\n\t\t_;\n\t}\n\n\tconstructor(IExofiswapFactory swapFactory, IWETH9 wrappedEth)\n\t{\n\t\t_swapFactory = swapFactory;\n\t\t_wrappedEth = wrappedEth;\n\t}\n\n\treceive() override external payable\n\t{\n\t\tassert(_msgSender() == address(_wrappedEth)); // only accept ETH via fallback from the WETH contract\n\t}\n\n\tfunction addLiquidityETH(\n\t\tIERC20Metadata token,\n\t\tuint256 amountTokenDesired,\n\t\tuint256 amountTokenMin,\n\t\tuint256 amountETHMin,\n\t\taddress to,\n\t\tuint256 deadline\n\t) override external virtual payable ensure(deadline) returns (uint256 amountToken, uint256 amountETH, uint256 liquidity)\n\t{\n\t\tIExofiswapPair pair;\n\t\t(amountToken, amountETH, pair) = _addLiquidity(\n\t\t\ttoken,\n\t\t\t_wrappedEth,\n\t\t\tamountTokenDesired,\n\t\t\tmsg.value,\n\t\t\tamountTokenMin,\n\t\t\tamountETHMin\n\t\t);\n\t\tSafeERC20.safeTransferFrom(token, _msgSender(), address(pair), amountToken);\n\t\t_wrappedEth.deposit{value: amountETH}();\n\t\tassert(_wrappedEth.transfer(address(pair), amountETH));\n\t\tliquidity = pair.mint(to);\n\t\t// refund dust eth, if any\n\t\tif (msg.value > amountETH) ExofiswapLibrary.safeTransferETH(_msgSender(), MathUInt256.unsafeSub(msg.value, amountETH));\n\t}\n\n\tfunction addLiquidity(\n\t\tIERC20Metadata tokenA,\n\t\tIERC20Metadata tokenB,\n\t\tuint256 amountADesired,\n\t\tuint256 amountBDesired,\n\t\tuint256 amountAMin,\n\t\tuint256 amountBMin,\n\t\taddress to,\n\t\tuint256 deadline\n\t) override external virtual ensure(deadline) returns (uint256 amountA, uint256 amountB, uint256 liquidity)\n\t{\n\t\tIExofiswapPair pair;\n\t\t(amountA, amountB, pair) = _addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);\n\t\t_safeTransferFrom(tokenA, tokenB, address(pair), amountA, amountB);\n\t\tliquidity = pair.mint(to);\n\t}\n\n\tfunction removeLiquidity(\n\t\tIERC20Metadata tokenA,\n\t\tIERC20Metadata tokenB,\n\t\tuint256 liquidity,\n\t\tuint256 amountAMin,\n\t\tuint256 amountBMin,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external virtual override ensure(deadline) returns (uint256, uint256)\n\t{\n\t\tIExofiswapPair pair = ExofiswapLibrary.pairFor(_swapFactory, tokenA, tokenB);\n\t\treturn _removeLiquidity(pair, tokenB < tokenA, liquidity, amountAMin, amountBMin, to);\n\t}\n\n\tfunction removeLiquidityETH(\n\t\tIERC20Metadata token,\n\t\tuint256 liquidity,\n\t\tuint256 amountTokenMin,\n\t\tuint256 amountETHMin,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external override virtual ensure(deadline) returns (uint256 amountToken, uint256 amountETH)\n\t{\n\t\tIExofiswapPair pair = ExofiswapLibrary.pairFor(_swapFactory, token, _wrappedEth);\n\t\t(amountToken, amountETH) = _removeLiquidity(pair, _wrappedEth < token, liquidity, amountTokenMin, amountETHMin, address(this));\n\t\tSafeERC20.safeTransfer(token, to, amountToken);\n\t\t_wrappedEth.withdraw(amountETH);\n\t\tExofiswapLibrary.safeTransferETH(to, amountETH);\n\t}\n\n\tfunction removeLiquidityETHSupportingFeeOnTransferTokens(\n\t\tIERC20Metadata token,\n\t\tuint256 liquidity,\n\t\tuint256 amountTokenMin,\n\t\tuint256 amountETHMin,\n\t\taddress to,\n\t\tuint256 deadline\n\t) override external virtual ensure(deadline) returns (uint256 amountETH)\n\t{\n\t\tIExofiswapPair pair = ExofiswapLibrary.pairFor(_swapFactory, token, _wrappedEth);\n\t\t(, amountETH) = _removeLiquidity(pair, _wrappedEth < token, liquidity, amountTokenMin, amountETHMin, address(this));\n\t\tSafeERC20.safeTransfer(token, to, token.balanceOf(address(this)));\n\t\t_wrappedEth.withdraw(amountETH);\n\t\tExofiswapLibrary.safeTransferETH(to, amountETH);\n\t}\n\n\tfunction removeLiquidityETHWithPermit(\n\t\tIERC20Metadata token,\n\t\tuint256 liquidity,\n\t\tuint256 amountTokenMin,\n\t\tuint256 amountETHMin,\n\t\taddress to,\n\t\tuint256 deadline,\n\t\tbool approveMax, uint8 v, bytes32 r, bytes32 s\n\t) external override virtual returns (uint256 amountToken, uint256 amountETH)\n\t{\n\t\tIExofiswapPair pair = ExofiswapLibrary.pairFor(_swapFactory, token, _wrappedEth);\n\t\t{\n\t\t\tuint256 value = approveMax ? type(uint256).max : liquidity;\n\t\t\tpair.permit(_msgSender(), address(this), value, deadline, v, r, s); // ensure(deadline) happens here\n\t\t}\n\t\t(amountToken, amountETH) = _removeLiquidity(pair, _wrappedEth < token, liquidity, amountTokenMin, amountETHMin, address(this));\n\t\tSafeERC20.safeTransfer(token, to, amountToken);\n\t\t_wrappedEth.withdraw(amountETH);\n\t\tExofiswapLibrary.safeTransferETH(to, amountETH);\n\t}\n\n\tfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n\t\tIERC20Metadata token,\n\t\tuint256 liquidity,\n\t\tuint256 amountTokenMin,\n\t\tuint256 amountETHMin,\n\t\taddress to,\n\t\tuint256 deadline,\n\t\tbool approveMax,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t) override external virtual returns (uint256 amountETH)\n\t{\n\t\t{\n\t\t\tIExofiswapPair pair = ExofiswapLibrary.pairFor(_swapFactory, token, _wrappedEth);\n\t\t\tuint256 value = approveMax ? type(uint256).max : liquidity;\n\t\t\tpair.permit(_msgSender(), address(this), value, deadline, v, r, s); // ensure(deadline) happens here\n\t\t\t(, amountETH) = _removeLiquidity(pair, _wrappedEth < token, liquidity, amountTokenMin, amountETHMin, address(this));\n\t\t}\n\t\tSafeERC20.safeTransfer(token, to, token.balanceOf(address(this)));\n\t\t_wrappedEth.withdraw(amountETH);\n\t\tExofiswapLibrary.safeTransferETH(to, amountETH);\n\t}\n\n\tfunction removeLiquidityWithPermit(\n\t\tIERC20Metadata tokenA,\n\t\tIERC20Metadata tokenB,\n\t\tuint256 liquidity,\n\t\tuint256 amountAMin,\n\t\tuint256 amountBMin,\n\t\taddress to,\n\t\tuint256 deadline,\n\t\tbool approveMax, uint8 v, bytes32 r, bytes32 s\n\t) external override virtual returns (uint256 amountA, uint256 amountB)\n\t{\n\t\tIExofiswapPair pair = ExofiswapLibrary.pairFor(_swapFactory, tokenA, tokenB);\n\t\t{\n\t\t\tuint256 value = approveMax ? type(uint256).max : liquidity;\n\t\t\tpair.permit(_msgSender(), address(this), value, deadline, v, r, s); // ensure(deadline) happens here\n\t\t}\n\t\t(amountA, amountB) = _removeLiquidity(pair, tokenB < tokenA, liquidity, amountAMin, amountBMin, to);\n\t}\n\n\tfunction swapExactTokensForETH(uint256 amountIn, uint256 amountOutMin, IERC20Metadata[] calldata path, address to, uint256 deadline)\n\t\toverride external virtual ensure(deadline) returns (uint256[] memory amounts)\n\t{\n\t\tuint256 lastItem = MathUInt256.unsafeDec(path.length);\n\t\trequire(path[lastItem] == _wrappedEth, \"ER: INVALID_PATH\"); // Overflow on lastItem will flail here to\n\t\tamounts = ExofiswapLibrary.getAmountsOut(_swapFactory, amountIn, path);\n\t\trequire(amounts[amounts.length - 1] >= amountOutMin, \"ER: INSUFFICIENT_OUTPUT_AMOUNT\");\n\t\tSafeERC20.safeTransferFrom(path[0], _msgSender(), address(ExofiswapLibrary.pairFor(_swapFactory, path[0], path[1])), amounts[0]);\n\t\t_swap(amounts, path, address(this));\n\t\t// Lenght of amounts array must be equal to length of path array.\n\t\t_wrappedEth.withdraw(amounts[lastItem]);\n\t\tExofiswapLibrary.safeTransferETH(to, amounts[lastItem]);\n\t}\n\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\n\t\tuint256 amountIn,\n\t\tuint256 amountOutMin,\n\t\tIERC20Metadata[] calldata path,\n\t\taddress to,\n\t\tuint256 deadline\n\t) override external virtual ensure(deadline)\n\t{\n\t\trequire(path[MathUInt256.unsafeDec(path.length)] == _wrappedEth, \"ER: INVALID_PATH\");\n\t\tSafeERC20.safeTransferFrom(path[0], _msgSender(), address(ExofiswapLibrary.pairFor(_swapFactory, path[0], path[1])), amountIn);\n\t\t_swapSupportingFeeOnTransferTokens(path, address(this));\n\t\tuint256 amountOut = _wrappedEth.balanceOf(address(this));\n\t\trequire(amountOut >= amountOutMin, \"ER: INSUFFICIENT_OUTPUT_AMOUNT\");\n\t\t_wrappedEth.withdraw(amountOut);\n\t\tExofiswapLibrary.safeTransferETH(to, amountOut);\n\t}\n\n\tfunction swapExactTokensForTokens(\n\t\tuint256 amountIn,\n\t\tuint256 amountOutMin,\n\t\tIERC20Metadata[] calldata path,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external override virtual ensure(deadline) returns (uint256[] memory amounts)\n\t{\n\t\tamounts = ExofiswapLibrary.getAmountsOut(_swapFactory, amountIn, path);\n\t\trequire(amounts[MathUInt256.unsafeDec(amounts.length)] >= amountOutMin, \"ER: INSUFFICIENT_OUTPUT_AMOUNT\");\n\t\tSafeERC20.safeTransferFrom(path[0], _msgSender(), address(ExofiswapLibrary.pairFor(_swapFactory, path[0], path[1])), amounts[0]);\n\t\t_swap(amounts, path, to);\n\t}\n\n\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\n\t\tuint256 amountIn,\n\t\tuint256 amountOutMin,\n\t\tIERC20Metadata[] calldata path,\n\t\taddress to,\n\t\tuint256 deadline\n\t) override external virtual ensure(deadline)\n\t{\n\t\tSafeERC20.safeTransferFrom(path[0], _msgSender(), address(ExofiswapLibrary.pairFor(_swapFactory, path[0], path[1])), amountIn);\n\t\tuint256 lastItem = MathUInt256.unsafeDec(path.length);\n\t\tuint256 balanceBefore = path[lastItem].balanceOf(to);\n\t\t_swapSupportingFeeOnTransferTokens(path, to);\n\t\trequire((path[lastItem].balanceOf(to) - balanceBefore) >= amountOutMin, \"ER: INSUFFICIENT_OUTPUT_AMOUNT\");\n\t}\n\n\tfunction swapTokensForExactETH(uint256 amountOut, uint256 amountInMax, IERC20Metadata[] calldata path, address to, uint256 deadline) override\n\t\texternal virtual ensure(deadline) returns (uint256[] memory amounts)\n\t{\n\t\tuint256 lastItem = MathUInt256.unsafeDec(path.length);\n\t\trequire(path[lastItem] == _wrappedEth, \"ER: INVALID_PATH\"); // Overflow on lastItem will fail here too\n\t\tamounts = ExofiswapLibrary.getAmountsIn(_swapFactory, amountOut, path);\n\t\trequire(amounts[0] <= amountInMax, \"ER: EXCESSIVE_INPUT_AMOUNT\");\n\t\tSafeERC20.safeTransferFrom(\n\t\t\tpath[0], _msgSender(), address(ExofiswapLibrary.pairFor(_swapFactory, path[0], path[1])), amounts[0]\n\t\t);\n\t\t_swap(amounts, path, address(this));\n\t\t// amounts and path must have the same item count...\n\t\t_wrappedEth.withdraw(amounts[lastItem]);\n\t\tExofiswapLibrary.safeTransferETH(to, amounts[lastItem]);\n\t}\n\n\tfunction swapTokensForExactTokens(\n\t\tuint256 amountOut,\n\t\tuint256 amountInMax,\n\t\tIERC20Metadata[] calldata path,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external override virtual ensure(deadline) returns (uint256[] memory amounts)\n\t{\n\t\tamounts = ExofiswapLibrary.getAmountsIn(_swapFactory, amountOut, path);\n\t\trequire(amounts[0] <= amountInMax, \"ER: EXCESSIVE_INPUT_AMOUNT\");\n\t\tSafeERC20.safeTransferFrom(\n\t\t\tpath[0], _msgSender(), address(ExofiswapLibrary.pairFor(_swapFactory, path[0], path[1])), amounts[0]\n\t\t);\n\t\t_swap(amounts, path, to);\n\t}\n\n\tfunction swapETHForExactTokens(uint256 amountOut, IERC20Metadata[] calldata path, address to, uint256 deadline)\n\t\toverride external virtual payable ensure(deadline) returns (uint256[] memory amounts)\n\t{\n\t\trequire(path[0] == _wrappedEth, \"ER: INVALID_PATH\");\n\t\tamounts = ExofiswapLibrary.getAmountsIn(_swapFactory, amountOut, path);\n\t\trequire(amounts[0] <= msg.value, \"ER: EXCESSIVE_INPUT_AMOUNT\");\n\t\t_wrappedEth.deposit{value: amounts[0]}();\n\t\tassert(_wrappedEth.transfer(address(ExofiswapLibrary.pairFor(_swapFactory, path[0], path[1])), amounts[0]));\n\t\t_swap(amounts, path, to);\n\t\t// refund dust eth, if any\n\t\tif (msg.value > amounts[0]) ExofiswapLibrary.safeTransferETH(_msgSender(), msg.value - amounts[0]);\n\t}\n\n\tfunction swapExactETHForTokens(uint256 amountOutMin, IERC20Metadata[] calldata path, address to, uint256 deadline)\n\t\toverride external virtual payable ensure(deadline) returns (uint[] memory amounts)\n\t{\n\t\trequire(path[0] == _wrappedEth, \"ER: INVALID_PATH\");\n\t\tamounts = ExofiswapLibrary.getAmountsOut(_swapFactory, msg.value, path);\n\t\trequire(amounts[MathUInt256.unsafeDec(amounts.length)] >= amountOutMin, \"ER: INSUFFICIENT_OUTPUT_AMOUNT\");\n\t\t_wrappedEth.deposit{value: amounts[0]}();\n\t\tassert(_wrappedEth.transfer(address(ExofiswapLibrary.pairFor(_swapFactory, path[0], path[1])), amounts[0]));\n\t\t_swap(amounts, path, to);\n\t}\n\n\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\n\t\tuint256 amountOutMin,\n\t\tIERC20Metadata[] calldata path,\n\t\taddress to,\n\t\tuint256 deadline\n\t) override external virtual payable ensure(deadline)\n\t{\n\t\trequire(path[0] == _wrappedEth, \"ER: INVALID_PATH\");\n\t\tuint256 amountIn = msg.value;\n\t\t_wrappedEth.deposit{value: amountIn}();\n\t\tassert(_wrappedEth.transfer(address(ExofiswapLibrary.pairFor(_swapFactory, path[0], path[1])), amountIn));\n\t\tuint256 lastItem = MathUInt256.unsafeDec(path.length);\n\t\tuint256 balanceBefore = path[lastItem].balanceOf(to);\n\t\t_swapSupportingFeeOnTransferTokens(path, to);\n\t\trequire(path[lastItem].balanceOf(to) - balanceBefore >= amountOutMin, \"ER: INSUFFICIENT_OUTPUT_AMOUNT\");\n\t}\n\n\tfunction factory() override external view returns (IExofiswapFactory)\n\t{\n\t\treturn _swapFactory;\n\t}\n\n\tfunction getAmountsIn(uint256 amountOut, IERC20Metadata[] memory path) override\n\t\tpublic view virtual returns (uint[] memory amounts)\n\t{\n\t\treturn ExofiswapLibrary.getAmountsIn(_swapFactory, amountOut, path);\n\t}\n\n\t// solhint-disable-next-line func-name-mixedcase\n\tfunction WETH() override public view returns(IERC20Metadata)\n\t{\n\t\treturn _wrappedEth;\n\t}\n\n\tfunction getAmountsOut(uint256 amountIn, IERC20Metadata[] memory path) override\n\t\tpublic view virtual returns (uint256[] memory amounts)\n\t{\n\t\treturn ExofiswapLibrary.getAmountsOut(_swapFactory, amountIn, path);\n\t}\n\n\tfunction getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut) override\n\t\tpublic pure virtual returns (uint256 amountIn)\n\t{\n\t\treturn ExofiswapLibrary.getAmountIn(amountOut, reserveIn, reserveOut);\n\t}\n\n\tfunction getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) override\n\t\tpublic pure virtual returns (uint256)\n\t{\n\t\treturn ExofiswapLibrary.getAmountOut(amountIn, reserveIn, reserveOut);\n\t}\n\n\tfunction quote(uint256 amount, uint256 reserve0, uint256 reserve1) override public pure virtual returns (uint256)\n\t{\n\t\treturn ExofiswapLibrary.quote(amount, reserve0, reserve1);\n\t}\n\n\tfunction _addLiquidity(\n\t\tIERC20Metadata tokenA,\n\t\tIERC20Metadata tokenB,\n\t\tuint256 amountADesired,\n\t\tuint256 amountBDesired,\n\t\tuint256 amountAMin,\n\t\tuint256 amountBMin\n\t) private returns (uint256, uint256, IExofiswapPair)\n\t{\n\t\t// create the pair if it doesn't exist yet\n\t\tIExofiswapPair pair = _swapFactory.getPair(tokenA, tokenB);\n\t\tif (address(pair) == address(0))\n\t\t{\n\t\t\tpair = _swapFactory.createPair(tokenA, tokenB);\n\t\t}\n\t\t(uint256 reserveA, uint256 reserveB, ) = pair.getReserves();\n\t\tif (reserveA == 0 && reserveB == 0)\n\t\t{\n\t\t\treturn (amountADesired, amountBDesired, pair);\n\t\t}\n\t\tif(pair.token0() == tokenB)\n\t\t{\n\t\t\t(reserveB, reserveA) = (reserveA, reserveB);\n\t\t}\n\t\tuint256 amountBOptimal = ExofiswapLibrary.quote(amountADesired, reserveA, reserveB);\n\t\tif (amountBOptimal <= amountBDesired)\n\t\t{\n\t\t\trequire(amountBOptimal >= amountBMin, \"ER: INSUFFICIENT_B_AMOUNT\");\n\t\t\treturn (amountADesired, amountBOptimal, pair);\n\t\t}\n\t\tuint256 amountAOptimal = ExofiswapLibrary.quote(amountBDesired, reserveB, reserveA);\n\t\tassert(amountAOptimal <= amountADesired);\n\t\trequire(amountAOptimal >= amountAMin, \"ER: INSUFFICIENT_A_AMOUNT\");\n\t\treturn (amountAOptimal, amountBDesired, pair);\n\t}\n\n\tfunction _removeLiquidity(\n\tIExofiswapPair pair,\n\tbool reverse,\n\tuint256 liquidity,\n\tuint256 amountAMin,\n\tuint256 amountBMin,\n\taddress to\n\t) private returns (uint256 amountA, uint256 amountB)\n\t{\n\t\tpair.transferFrom(_msgSender(), address(pair), liquidity); // send liquidity to pair\n\t\t(amountA, amountB) = pair.burn(to);\n\t\tif(reverse)\n\t\t{\n\t\t\t(amountA, amountB) = (amountB, amountA);\n\t\t}\n\t\trequire(amountA >= amountAMin, \"ER: INSUFFICIENT_A_AMOUNT\");\n\t\trequire(amountB >= amountBMin, \"ER: INSUFFICIENT_B_AMOUNT\");\n\t}\n\n\tfunction _safeTransferFrom(IERC20Metadata tokenA, IERC20Metadata tokenB, address pair, uint256 amountA, uint256 amountB) private\n\t{\n\t\taddress sender = _msgSender();\n\t\tSafeERC20.safeTransferFrom(tokenA, sender, pair, amountA);\n\t\tSafeERC20.safeTransferFrom(tokenB, sender, pair, amountB);\n\t}\n\n\t// requires the initial amount to have already been sent to the first pair\n\tfunction _swap(uint256[] memory amounts, IERC20Metadata[] memory path, address to) private\n\t{\n\t\t// TODO: Optimize for Gas. Still higher than Uniswap....maybe get all pairs from factory at once helps....\n\t\tuint256 pathLengthSubTwo = MathUInt256.unsafeSub(path.length, 2);\n\t\tuint256 j;\n\t\tuint256 i;\n\t\twhile (i < pathLengthSubTwo)\n\t\t{\n\t\t\tj = MathUInt256.unsafeInc(i);\n\t\t\tIExofiswapPair pair = ExofiswapLibrary.pairFor(_swapFactory, path[i], path[j]);\n\t\t\t(uint256 amount0Out, uint256 amount1Out) = path[i] == pair.token0() ? (uint256(0), amounts[j]) : (amounts[j], uint256(0));\n\t\t\tpair.swap(amount0Out, amount1Out, address(ExofiswapLibrary.pairFor(_swapFactory, path[j], path[MathUInt256.unsafeInc(j)])), new bytes(0));\n\t\t\ti = j;\n\t\t}\n\t\tj = MathUInt256.unsafeInc(i);\n\t\tIExofiswapPair pair2 = ExofiswapLibrary.pairFor(_swapFactory, path[i], path[j]);\n\t\t(uint256 amount0Out2, uint256 amount1Out2) = path[i] == pair2.token0() ? (uint256(0), amounts[j]) : (amounts[j], uint256(0));\n\t\tpair2.swap(amount0Out2, amount1Out2, to, new bytes(0));\n\t}\n\n\tfunction _swapSupportingFeeOnTransferTokens(IERC20Metadata[] memory path, address to) private\n\t{\n\t\tuint256 pathLengthSubTwo = MathUInt256.unsafeSub(path.length, 2);\n\t\tuint256 j;\n\t\tuint256 i;\n\t\twhile (i < pathLengthSubTwo)\n\t\t{\n\t\t\tj = MathUInt256.unsafeInc(i);\n\t\t\tIExofiswapPair pair = ExofiswapLibrary.pairFor(_swapFactory, path[i], path[j]);\n\t\t\tuint256 amountInput;\n\t\t\tuint256 amountOutput;\n\t\t\tIERC20Metadata token0 = pair.token0();\n\t\t\t{ // scope to avoid stack too deep errors\n\t\t\t\t(uint256 reserveInput, uint256 reserveOutput,) = pair.getReserves();\n\t\t\t\tif (path[j] == token0)\n\t\t\t\t{\n\t\t\t\t\t(reserveInput, reserveOutput) = (reserveOutput, reserveInput);\n\t\t\t\t}\n\t\t\t\tamountInput = (path[i].balanceOf(address(pair)) - reserveInput);\n\t\t\t\tamountOutput = ExofiswapLibrary.getAmountOut(amountInput, reserveInput, reserveOutput);\n\t\t\t}\n\t\t\t(uint256 amount0Out, uint256 amount1Out) = path[i] == token0 ? (uint256(0), amountOutput) : (amountOutput, uint256(0));\n\t\t\taddress receiver = address(ExofiswapLibrary.pairFor(_swapFactory, path[j], path[MathUInt256.unsafeInc(j)]));\n\t\t\tpair.swap(amount0Out, amount1Out, receiver, new bytes(0));\n\t\t\ti = j;\n\t\t}\n\t\tj = MathUInt256.unsafeInc(i);\n\t\tIExofiswapPair pair2 = ExofiswapLibrary.pairFor(_swapFactory, path[i], path[j]);\n\t\tuint256 amountInput2;\n\t\tuint256 amountOutput2;\n\t\tIERC20Metadata token02 = pair2.token0();\n\t\t{ // scope to avoid stack too deep errors\n\t\t\t(uint256 reserveInput, uint256 reserveOutput,) = pair2.getReserves();\n\t\t\tif (path[j] == token02)\n\t\t\t{\n\t\t\t\t(reserveInput, reserveOutput) = (reserveOutput, reserveInput);\n\t\t\t}\n\t\t\tamountInput2 = (path[i].balanceOf(address(pair2)) - reserveInput);\n\t\t\tamountOutput2 = ExofiswapLibrary.getAmountOut(amountInput2, reserveInput, reserveOutput);\n\t\t}\n\t\t(uint256 amount0Out2, uint256 amount1Out2) = path[i] == token02? (uint256(0), amountOutput2) : (amountOutput2, uint256(0));\n\t\tpair2.swap(amount0Out2, amount1Out2, to, new bytes(0));\n\t}\n}\n"
    },
    "contracts/Exofiswap/interfaces/IExofiswapRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport \"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"./IExofiswapFactory.sol\";\n\ninterface IExofiswapRouter {\n\treceive() external payable;\n\n\tfunction addLiquidityETH(\n\t\tIERC20Metadata token,\n\t\tuint256 amountTokenDesired,\n\t\tuint256 amountTokenMin,\n\t\tuint256 amountETHMin,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\n\n\tfunction addLiquidity(\n\t\tIERC20Metadata tokenA,\n\t\tIERC20Metadata tokenB,\n\t\tuint256 amountADesired,\n\t\tuint256 amountBDesired,\n\t\tuint256 amountAMin,\n\t\tuint256 amountBMin,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\n\n\tfunction removeLiquidity(\n\t\tIERC20Metadata tokenA,\n\t\tIERC20Metadata tokenB,\n\t\tuint256 liquidity,\n\t\tuint256 amountAMin,\n\t\tuint256 amountBMin,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external returns (uint256 amountA, uint256 amountB);\n\n\tfunction removeLiquidityETH(\n\t\tIERC20Metadata token,\n\t\tuint256 liquidity,\n\t\tuint256 amountTokenMin,\n\t\tuint256 amountETHMin,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external returns (uint256 amountToken, uint256 amountETH);\n\n\tfunction removeLiquidityETHSupportingFeeOnTransferTokens(\n\t\tIERC20Metadata token,\n\t\tuint256 liquidity,\n\t\tuint256 amountTokenMin,\n\t\tuint256 amountETHMin,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external returns (uint256 amountETH);\n\n\tfunction removeLiquidityETHWithPermit(\n\t\tIERC20Metadata token,\n\t\tuint256 liquidity,\n\t\tuint256 amountTokenMin,\n\t\tuint256 amountETHMin,\n\t\taddress to,\n\t\tuint256 deadline,\n\t\tbool approveMax,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t) external returns (uint256 amountToken, uint256 amountETH);\n\n\tfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n\t\tIERC20Metadata token,\n\t\tuint256 liquidity,\n\t\tuint256 amountTokenMin,\n\t\tuint256 amountETHMin,\n\t\taddress to,\n\t\tuint256 deadline,\n\t\tbool approveMax,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t) external returns (uint256 amountETH);\n\n\tfunction removeLiquidityWithPermit(\n\t\tIERC20Metadata tokenA,\n\t\tIERC20Metadata tokenB,\n\t\tuint256 liquidity,\n\t\tuint256 amountAMin,\n\t\tuint256 amountBMin,\n\t\taddress to,\n\t\tuint256 deadline,\n\t\tbool approveMax,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t) external returns (uint256 amountA, uint256 amountB);\n\n\tfunction swapETHForExactTokens(\n\t\tuint256 amountOut,\n\t\tIERC20Metadata[] calldata path,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external payable returns (uint256[] memory amounts);\n\n\tfunction swapExactETHForTokens(\n\t\tuint256 amountOutMin,\n\t\tIERC20Metadata[] calldata path,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external payable returns (uint256[] memory amounts);\n\n\tfunction swapExactTokensForETH(\n\t\tuint256 amountIn,\n\t\tuint256 amountOutMin,\n\t\tIERC20Metadata[] calldata path,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external returns (uint256[] memory amounts);\n\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\n\t\tuint256 amountIn,\n\t\tuint256 amountOutMin,\n\t\tIERC20Metadata[] calldata path,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external;\n\n\tfunction swapExactTokensForTokens(\n\t\tuint256 amountIn,\n\t\tuint256 amountOutMin,\n\t\tIERC20Metadata[] calldata path,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external returns (uint256[] memory amounts);\n\n\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\n\t\tuint256 amountIn,\n\t\tuint256 amountOutMin,\n\t\tIERC20Metadata[] calldata path,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external;\n\n\tfunction swapTokensForExactETH(\n\t\tuint256 amountOut,\n\t\tuint256 amountInMax,\n\t\tIERC20Metadata[] calldata path,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external returns (uint256[] memory amounts);\n\n\tfunction swapTokensForExactTokens(\n\t\tuint256 amountOut,\n\t\tuint256 amountInMax,\n\t\tIERC20Metadata[] calldata path,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external returns (uint256[] memory amounts);\n\n\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\n\t\tuint256 amountOutMin,\n\t\tIERC20Metadata[] calldata path,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external payable;\n\n\t\tfunction factory() external view returns (IExofiswapFactory);\n\n\tfunction getAmountsIn(uint256 amountOut, IERC20Metadata[] calldata path)\n\t\texternal\n\t\tview\n\t\treturns (uint256[] memory amounts);\n\n\tfunction WETH() external view returns (IERC20Metadata); // solhint-disable-line func-name-mixedcase\n\n\tfunction getAmountsOut(uint256 amountIn, IERC20Metadata[] calldata path)\n\t\texternal\n\t\tview\n\t\treturns (uint256[] memory amounts);\n\n\tfunction getAmountOut(\n\t\tuint256 amountIn,\n\t\tuint256 reserveIn,\n\t\tuint256 reserveOut\n\t) external pure returns (uint256 amountOut);\n\n\tfunction getAmountIn(\n\t\tuint256 amountOut,\n\t\tuint256 reserveIn,\n\t\tuint256 reserveOut\n\t) external pure returns (uint256);\n\n\tfunction quote(\n\t\tuint256 amount,\n\t\tuint256 reserve0,\n\t\tuint256 reserve1\n\t) external pure returns (uint256);\n}\n"
    },
    "contracts/Exofiswap/interfaces/IWETH9.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Metadata.sol\";\n\ninterface IWETH9 is IERC20Metadata\n{\n\tevent Deposit(address indexed from, uint256 value);\n\tevent Withdraw(address indexed to, uint256 value);\n\t\n\tfunction deposit() external payable;\n\tfunction withdraw(uint256 value) external;\n}"
    },
    "contracts/interfaces/IFermion.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@exoda/contracts/interfaces/access/IOwnable.sol\";\nimport \"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20AltApprove.sol\";\nimport \"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Burnable.sol\";\nimport \"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Metadata.sol\";\n\n/**\n * @dev Interface of the Fermion token.\n */\ninterface IFermion is IOwnable, IERC20AltApprove, IERC20Metadata, IERC20Burnable\n{\n\t/**\n\t* @dev Mints `amount` tokens to `account`.\n\t*\n\t* Emits a {Transfer} event with `from` set to the zero address.\n\t*/\n\tfunction mint(address to, uint256 amount) external;\n}"
    },
    "@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @title ERC20Burnable interface.\n * @author Ing. Michael Goldfinger\n * @notice Interface for the extension of {ERC20} that allows token holders to destroy both their own tokens\n * and those that they have an allowance for.\n */\ninterface IERC20Burnable is IERC20\n{\n\t/**\n\t* @notice Destroys {amount} tokens from the caller.\n\t*\n\t* Emits an {Transfer} event.\n\t*\n\t* @param amount The {amount} of tokens that should be destroyed.\n\t*/\n\tfunction burn(uint256 amount) external;\n\n\t/**\n\t* @notice Destroys {amount} tokens from {account}, deducting from the caller's allowance.\n\t*\n\t* Emits an {Approval} and an {Transfer} event.\n\t*\n\t* @param account The {account} where the tokens should be destroyed.\n\t* @param amount The {amount} of tokens that should be destroyed.\n\t*/\n\tfunction burnFrom(address account, uint256 amount) external;\n}"
    },
    "contracts/interfaces/IMagneticFieldGenerator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@exoda/contracts/interfaces/token/ERC20/IERC20.sol\";\nimport \"./IFermion.sol\";\nimport \"./IMigratorDevice.sol\";\nimport \"./IMagneticFieldGeneratorStore.sol\";\n\ninterface IMagneticFieldGenerator\n{\n\tevent Deposit(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\n\tevent Harvest(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\n\tevent EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\n\tevent LogPoolAddition(uint256 indexed pid, uint256 allocPoint, IERC20 indexed lpToken);\n\tevent LogSetPool(uint256 indexed pid, uint256 allocPoint);\n\tevent LogUpdatePool(uint256 indexed pid, uint256 lastRewardBlock, uint256 lpSupply, uint256 accFermionPerShare);\n\tevent Withdraw(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\n\n\t/// @notice Add a new LP to the pool. Can only be called by the owner.\n\t/// WARNING DO NOT add the same LP token more than once. Rewards will be messed up if you do.\n\t/// @param allocPoint AP of the new pool.\n\t/// @param lpToken Address of the LP ERC-20 token.\n\t/// @param lockPeriod Number of Blocks the pool should disallow withdraws of all kind.\n\tfunction add(uint256 allocPoint, IERC20 lpToken, uint256 lockPeriod) external;\n\tfunction deposit(uint256 pid, uint256 amount, address to) external;\n\tfunction disablePool(uint256 pid) external;\n\tfunction emergencyWithdraw(uint256 pid, address to) external;\n\tfunction handOverToSuccessor(IMagneticFieldGenerator successor) external;\n\tfunction harvest(uint256 pid, address to) external;\n\tfunction massUpdatePools() external;\n\tfunction migrate(uint256 pid) external;\n\tfunction renounceOwnership() external;\n\tfunction set(uint256 pid, uint256 allocPoint) external;\n\tfunction setFermionPerBlock(uint256 fermionPerBlock) external;\n\tfunction setMigrator(IMigratorDevice migratorContract) external;\n\tfunction setStore(IMagneticFieldGeneratorStore storeContract) external;\n\tfunction transferOwnership(address newOwner) external;\n\tfunction updatePool(uint256 pid) external returns(PoolInfo memory);\n\tfunction withdraw(uint256 pid, uint256 amount, address to) external;\n\tfunction withdrawAndHarvest(uint256 pid, uint256 amount, address to) external;\n\n\tfunction getFermionContract() external view returns (IFermion);\n\tfunction getFermionPerBlock() external view returns (uint256);\n\tfunction getStartBlock() external view returns (uint256);\n\tfunction migrator() external view returns(IMigratorDevice);\n\tfunction owner() external view returns (address);\n\tfunction pendingFermion(uint256 pid, address user) external view returns (uint256);\n\tfunction poolInfo(uint256 pid) external view returns (PoolInfo memory);\n\tfunction poolLength() external view returns (uint256);\n\tfunction successor() external view returns (IMagneticFieldGenerator);\n\tfunction totalAllocPoint() external view returns (uint256);\n\tfunction userInfo(uint256 pid, address user) external view returns (UserInfo memory);\n}"
    },
    "contracts/interfaces/IMigratorDevice.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@exoda/contracts/interfaces/token/ERC20/IERC20.sol\";\n\ninterface IMigratorDevice\n{\n\t// Perform LP token migration from legacy UniswapV2 to Exofi.\n\t// Take the current LP token address and return the new LP token address.\n\t// Migrator should have full access to the caller's LP token.\n\t// Return the new LP token address.\n\t//\n\t// XXX Migrator must have allowance access to UniswapV2 LP tokens.\n\t// Exofi must mint EXACTLY the same amount of ENERGY tokens or\n\t// else something bad will happen. Traditional UniswapV2 does not\n\t// do that so be careful!\n\tfunction migrate(IERC20 token) external returns (address);\n\n\tfunction beneficiary() external view returns (address);\n}"
    },
    "contracts/interfaces/IMagneticFieldGeneratorStore.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@exoda/contracts/interfaces/access/IOwnable.sol\";\nimport \"../structs/PoolInfo.sol\";\nimport \"../structs/UserInfo.sol\";\n\ninterface IMagneticFieldGeneratorStore is IOwnable\n{\n\tfunction deletePoolInfo(uint256 pid) external;\n\tfunction newPoolInfo(PoolInfo memory pi) external;\n\tfunction updateUserInfo(uint256 pid, address user, UserInfo memory ui) external;\n\tfunction updatePoolInfo(uint256 pid, PoolInfo memory pi) external;\n\tfunction getPoolInfo(uint256 pid) external view returns (PoolInfo memory);\n\tfunction getPoolLength() external view returns (uint256);\n\tfunction getUserInfo(uint256 pid, address user) external view returns (UserInfo memory);\n\t\n}\n"
    },
    "contracts/structs/PoolInfo.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@exoda/contracts/interfaces/token/ERC20/IERC20.sol\";\n\n// Info of each pool.\nstruct PoolInfo\n{\n\tIERC20 lpToken; // Address of LP token contract.\n\tuint256 allocPoint; // How many allocation points assigned to this pool. FMNs to distribute per block.\n\tuint256 lastRewardBlock; // Last block number that FMNs distribution occurs.\n\tuint256 accFermionPerShare; // Accumulated FMNs per share, times _ACC_FERMION_PRECISSION. See below.\n\tuint256 initialLock; // Block until withdraw from the pool is not possible.\n}"
    },
    "contracts/structs/UserInfo.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Info of each user.\nstruct UserInfo\n{\n\tuint256 amount; // How many LP tokens the user has provided.\n\tint256 rewardDebt; // Reward debt. See explanation below.\n\t//\n\t// We do some fancy math here. Basically, any point in time, the amount of FMNs\n\t// entitled to a user but is pending to be distributed is:\n\t//\n\t//   pending reward = (user.amount * pool.accFermionPerShare) - user.rewardDebt\n\t//\n\t// Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\n\t//   1. The pool's `accFermionPerShare` (and `lastRewardBlock`) gets updated.\n\t//   2. User receives the pending reward sent to his/her address.\n\t//   3. User's `amount` gets updated.\n\t//   4. User's `rewardDebt` gets updated.\n}"
    },
    "contracts/MagneticFieldGenerator.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@exoda/contracts/access/Ownable.sol\";\nimport \"@exoda/contracts/interfaces/token/ERC20/IERC20.sol\";\nimport \"@exoda/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./interfaces/IMagneticFieldGenerator.sol\";\n\n// MagneticFieldGenerator is the master of Fermion. He can make Fermion and he is a fair machine.\ncontract MagneticFieldGenerator is IMagneticFieldGenerator, Ownable\n{\n\tusing SafeERC20 for IERC20;\n\t\n\t// Accumulated Fermion Precision\n\tuint256 private constant _ACC_FERMION_PRECISSION = 1e12;\n\t// The block number when FMN mining starts.\n\tuint256 private immutable _startBlock;\n\t// FMN tokens created per block.\n\tuint256 private _fermionPerBlock;\n\t// Total allocation points. Must be the sum of all allocation points in all pools.\n\tuint256 private _totalAllocPoint; // Initializes with 0\n\t// The FMN TOKEN!\n\tIFermion private immutable _fermion;\n\t// The migrator contract. It has a lot of power. Can only be set through governance (owner).\n\tIMigratorDevice private _migrator;\n\t// The migrator contract. It has a lot of power. Can only be set through governance (owner).\n\tIMagneticFieldGenerator private _successor;\n\tIMagneticFieldGeneratorStore private _store;\n\n\tconstructor(IFermion fermion, uint256 fermionPerBlock, uint256 startBlock)\n\t{\n\t\t_fermion = fermion;\n\t\t_fermionPerBlock = fermionPerBlock;\n\t\t_startBlock = startBlock;\n\t}\n\n\tfunction setStore(IMagneticFieldGeneratorStore storeContract) override external onlyOwner\n\t{\n\t\t_store = storeContract;\n\t}\n\n\t/// @inheritdoc IMagneticFieldGenerator\n\tfunction add(uint256 allocPoint, IERC20 lpToken, uint256 lockPeriod) override public onlyOwner\n\t{\n\t\t// Do every time.\n\t\t// If a pool prevents massUpdatePools because of accFermionPerShare overflow disable the responsible pool with disablePool.\n\t\tmassUpdatePools();\n\t\tuint256 lastRewardBlock = block.number > _startBlock ? block.number : _startBlock;\n\t\t_totalAllocPoint = _totalAllocPoint + allocPoint;\n\t\t_store.newPoolInfo(\n\t\t\tPoolInfo({\n\t\t\t\tlpToken: lpToken,\n\t\t\t\tallocPoint: allocPoint,\n\t\t\t\tlastRewardBlock: lastRewardBlock,\n\t\t\t\taccFermionPerShare: 0,\n\t\t\t\tinitialLock: lockPeriod > 0 ? lastRewardBlock + lockPeriod : 0\n\t\t\t})\n\t\t);\n\t\t\n\t\temit LogPoolAddition(_unsafeSub(_store.getPoolLength(), 1), allocPoint, lpToken); // Overflow not possible.\n\t}\n\n\t// Deposit LP tokens to MagneticFieldGenerator for FMN allocation.\n\tfunction deposit(uint256 pid, uint256 amount, address to) override public\n\t{\n\t\tPoolInfo memory pool = updatePool(pid);\n\t\tUserInfo memory user = _store.getUserInfo(pid, to);\n\n\t\tuser.amount = user.amount + amount;\n\t\tuser.rewardDebt += int256(((amount * pool.accFermionPerShare) / _ACC_FERMION_PRECISSION));\n\t\t_store.updateUserInfo(pid, to, user); // Save changes\n\n\t\tpool.lpToken.safeTransferFrom(address(_msgSender()), address(this), amount);\n\t\temit Deposit(_msgSender(), pid, amount, to);\n\t}\n\n\t// Update the given pool's FMN allocation point to 0. Can only be called by the owner.\n\t// This is necessary if a pool reaches a accFermionPerShare overflow.\n\tfunction disablePool(uint256 pid) public override onlyOwner\n\t{\n\t\t// Underflow is impossible since _totalAllocPoint can not be lower that _poolInfo[pid].allocPoint.\n\t\tPoolInfo memory pi = _store.getPoolInfo(pid);\n\t\t_totalAllocPoint = _unsafeSub(_totalAllocPoint, pi.allocPoint);\n\t\tpi.allocPoint = 0;\n\t\t_store.updatePoolInfo(pid, pi);\n\t}\n\n\t// Withdraw without caring about rewards. EMERGENCY ONLY.\n\tfunction emergencyWithdraw(uint256 pid, address to) public override\n\t{\n\t\tPoolInfo memory pool = _store.getPoolInfo(pid);\n\t\trequire(pool.initialLock < block.number, \"MFG: pool locked\");\n\t\tUserInfo memory user = _store.getUserInfo(pid,_msgSender());\n\n\t\tuint256 userAmount = user.amount;\n\t\tpool.lpToken.safeTransfer(to, userAmount);\n\t\temit EmergencyWithdraw(_msgSender(), pid, userAmount, to);\n\t\tuser.amount = 0;\n\t\tuser.rewardDebt = 0;\n\t\t_store.updateUserInfo(pid, _msgSender(), user);\n\t}\n\n\tfunction handOverToSuccessor(IMagneticFieldGenerator suc) override public onlyOwner\n\t{\n\t\t//TODO: DO ALL participants\n\t\trequire(address(_successor) == address(0), \"MFG: Successor already set\");\n\t\trequire(suc.owner() == address(this), \"MFG: Successor not owned by this\");\n\t\t_successor = suc;\n\t\t_fermion.transferOwnership(address(suc));\n\t\t_fermion.transfer(address(suc), _fermion.balanceOf(address(this)));\n\t\t// Hand over all pools no need for user interaction\n\t\tmassUpdatePools();\n\t\t_store.transferOwnership(address(suc));\n\t\t_successor.setStore(_store);\n\n\t\tsuc.transferOwnership(owner());\n\t}\n\n\t// Update reward variables for all pools. Be careful of gas spending!\n\tfunction massUpdatePools() public override\n\t{\n\t\t// Overflow of pid not possible and need not to be checked.\n\t\tunchecked\n\t\t{\n\t\t\tuint256 length = _store.getPoolLength();\n\t\t\tfor (uint256 pid = 0; pid < length; ++pid)\n\t\t\t{\n\t\t\t\tupdatePool(pid);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Migrate lp token to another lp contract. Can be called by anyone. We trust that migrator contract is good.\n\tfunction migrate(uint256 pid) override public onlyOwner\n\t{\n\t\trequire(address(_migrator) != address(0), \"migrate: no migrator\");\n\t\tPoolInfo memory pool = _store.getPoolInfo(pid);\n\t\tIERC20 lpToken = pool.lpToken;\n\t\tuint256 bal = lpToken.balanceOf(address(this));\n\t\tlpToken.safeApprove(address(_migrator), bal);\n\t\tIERC20 newLpToken = IERC20(_migrator.migrate(lpToken));\n\t\trequire(bal == newLpToken.balanceOf(address(this)), \"migrate: bad\");\n\t\tpool.lpToken = newLpToken;\n\t\t_store.updatePoolInfo(pid, pool);\n\t}\n\n\t/// @notice Leaves the contract without owner. Can only be called by the current owner.\n\tfunction renounceOwnership() public override(Ownable, IMagneticFieldGenerator)\n\t{\n\t\tOwnable.renounceOwnership();\n\t}\n\n\t// Update the given pool's FMN allocation point. Can only be called by the owner.\n\tfunction set(uint256 pid, uint256 allocPoint) override public onlyOwner\n\t{\n\t\t// Do every time.\n\t\t// If a pool prevents massUpdatePools because of accFermionPerShare overflow disable the responsible pool with disablePool.\n\t\tmassUpdatePools();\n\t\tPoolInfo memory pi = _store.getPoolInfo(pid);\n\t\t// Underflow is impossible since _totalAllocPoint can not be lower that _poolInfo[pid].allocPoint.\n\t\t_totalAllocPoint = _unsafeSub(_totalAllocPoint, pi.allocPoint) + allocPoint;\n\t\tpi.allocPoint = allocPoint;\n\t\t_store.updatePoolInfo(pid, pi);\n\t\temit LogSetPool(pid, allocPoint);\n\t}\n\n\tfunction setFermionPerBlock(uint256 fermionPerBlock) override public onlyOwner\n\t{\n\t\tmassUpdatePools();\n\t\t_fermionPerBlock = fermionPerBlock;\n\t}\n\n\t// Set the migrator contract. Can only be called by the owner.\n\tfunction setMigrator(IMigratorDevice migratorContract) override public onlyOwner\n\t{\n\t\t_migrator = migratorContract;\n\t}\n\n\t/// @notice Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\n\tfunction transferOwnership(address newOwner) public override(Ownable, IMagneticFieldGenerator)\n\t{\n\t\tOwnable.transferOwnership(newOwner);\n\t}\n\n\t// Update reward variables of the given pool to be up-to-date.\n\tfunction updatePool(uint256 pid) override public returns(PoolInfo memory)\n\t{\n\t\tPoolInfo memory pool = _store.getPoolInfo(pid);\n\n\t\tif (block.number <= pool.lastRewardBlock)\n\t\t{\n\t\t\treturn pool;\n\t\t}\n\n\t\tuint256 lpSupply = pool.lpToken.balanceOf(address(this));\n\n\t\tif (lpSupply == 0)\n\t\t{\n\t\t\tpool.lastRewardBlock = block.number;\n\t\t\t_store.updatePoolInfo(pid, pool);\n\t\t\treturn pool;\n\t\t}\n\n\t\tuint256 fermionReward = _getFermionReward(_getMultiplier(pool.lastRewardBlock, block.number), pool.allocPoint);\n\t\tpool.accFermionPerShare = _getAccFermionPerShare(pool.accFermionPerShare, fermionReward, lpSupply);\n\t\t_fermion.mint(address(this), fermionReward);\n\t\tpool.lastRewardBlock = block.number;\n\t\t_store.updatePoolInfo(pid, pool);\n\t\temit LogUpdatePool(pid, pool.lastRewardBlock, lpSupply, pool.accFermionPerShare);\n\t\treturn pool;\n\t}\n\n\t// Harvests only Fermion tokens.\n\tfunction harvest(uint256 pid, address to) override public\n\t{\n\t\t// HINT: pool.accFermionPerShare can only grow till it overflows, at that point every withdraw will fail.\n\t\t// HINT: The owner can set pool allocPoint to 0 without pool reward update. After that all lp tokens can be withdrawn\n\t\t// HINT: including the rewards up to the the last sucessful pool reward update.\n\t\tPoolInfo memory pool = updatePool(pid);\n\t\tUserInfo memory user = _store.getUserInfo(pid, _msgSender());\n\t\t\n\t\t// Division of uint can not overflow.\n\t\tuint256 fermionShare = _unsafeDiv((user.amount *  pool.accFermionPerShare), _ACC_FERMION_PRECISSION);\n\t\tuint256 pending = uint256(int256(fermionShare) - user.rewardDebt);\n\t\tuser.rewardDebt = int256(fermionShare);\n\n\t\t_store.updateUserInfo(pid, _msgSender(), user);\n\t\t// THOUGHTS on _safeFermionTransfer(_msgSender(), pending);\n\t\t// The intend was that if there is a rounding error and MFG does therefore not hold enouth Fermion,\n\t\t// the available amount of Fermion will be used.\n\t\t// Since all variables are used in divisions are uint rounding errors can only appear in the form of cut of decimals.\n\t\t// if(user.amount == 0 && user.rewardDebt == 0)\n\t\t// {\n\t\t// \t_poolInfo[pid].participants.remove(_msgSender());\n\t\t// }\n\t\t_fermion.transfer(to, pending);\n\t\temit Harvest(_msgSender(), pid, pending, to);\n\t}\n\n\t// Withdraw LP tokens from MagneticFieldGenerator.\n\tfunction withdraw(uint256 pid, uint256 amount, address to) override public\n\t{\n\t\t// HINT: pool.accFermionPerShare can only grow till it overflows, at that point every withdraw will fail.\n\t\t// HINT: The owner can set pool allocPoint to 0 without pool reward update. After that all lp tokens can be withdrawn\n\t\t// HINT: including the rewards up to the the last sucessful pool reward update.\n\t\tPoolInfo memory pool = updatePool(pid);\n\t\trequire(pool.initialLock < block.number, \"MFG: pool locked\");\n\t\tUserInfo memory user =  _store.getUserInfo(pid, _msgSender());\n\t\t\n\t\tuint256 userAmount = user.amount;\n\t\trequire(userAmount >= amount, \"MFG: amount exeeds stored amount\");\n\n\t\tuint256 accFermionPerShare = pool.accFermionPerShare;\n\t\t// Since we only withdraw rewardDept will be negative.\n\t\tuser.rewardDebt = user.rewardDebt - int256(_unsafeDiv(amount * accFermionPerShare, _ACC_FERMION_PRECISSION));\n\t\t\n\t\t// Can not overflow. Checked with require.\n\t\tuserAmount = _unsafeSub(userAmount, amount);\n\t\tuser.amount = userAmount;\n\t\t_store.updateUserInfo(pid, _msgSender(), user);\n\t\tpool.lpToken.safeTransfer(to, amount);\n\t\temit Withdraw(_msgSender(), pid, amount, to);\n\t}\n\n\t// Withdraw LP tokens from MagneticFieldGenerator.\n\tfunction withdrawAndHarvest(uint256 pid, uint256 amount, address to) override public\n\t{\n\t\t// HINT: pool.accFermionPerShare can only grow till it overflows, at that point every withdraw will fail.\n\t\t// HINT: The owner can set pool allocPoint to 0 without pool reward update. After that all lp tokens can be withdrawn\n\t\t// HINT: including the rewards up to the the last sucessful pool reward update.\n\t\tPoolInfo memory pool = updatePool(pid);\n\t\trequire(pool.initialLock < block.number, \"MFG: pool locked\");\n\t\tUserInfo memory user = _store.getUserInfo(pid, _msgSender());\n\t\t\n\t\tuint256 userAmount = user.amount;\n\t\trequire(userAmount >= amount, \"MFG: amount exeeds stored amount\");\n\t\t\n\t\tuint256 accFermionPerShare = pool.accFermionPerShare;\n\n\t\t// Division of uint can not overflow.\n\t\tuint256 pending = uint256(int256(_unsafeDiv((user.amount * accFermionPerShare), _ACC_FERMION_PRECISSION)) - user.rewardDebt);\n\t\t_fermion.transfer(to, pending);\n\n\t\t// Can not overflow. Checked with require.\n\t\tuserAmount = _unsafeSub(userAmount, amount);\n\t\tuser.amount = userAmount;\n\t\t// Division of uint can not overflow.\n\t\tuser.rewardDebt = int256(_unsafeDiv(userAmount * accFermionPerShare, _ACC_FERMION_PRECISSION));\n\t\t_store.updateUserInfo(pid, _msgSender(), user);\n\t\tpool.lpToken.safeTransfer(to, amount);\n\t\temit Withdraw(_msgSender(), pid, amount, to);\n\t\temit Harvest(_msgSender(), pid, pending, to);\n\t}\n\n\tfunction getFermionContract() public override view returns (IFermion)\n\t{\n\t\treturn _fermion;\n\t}\n\n\tfunction getFermionPerBlock() public override view returns (uint256)\n\t{\n\t\treturn _fermionPerBlock;\n\t}\n\n\tfunction getStartBlock() public override view returns (uint256)\n\t{\n\t\treturn _startBlock;\n\t}\n\n\t/// @notice Returns the current migrator.\n\tfunction migrator() override public view returns(IMigratorDevice)\n\t{\n\t\treturn _migrator;\n\t}\n\n\t/// @notice Returns the address of the current owner.\n\tfunction owner() public view override(Ownable, IMagneticFieldGenerator) returns (address)\n\t{\n\t\treturn Ownable.owner();\n\t}\n\n\t// View function to see pending FMNs on frontend.\n\tfunction pendingFermion(uint256 pid, address user) public view override returns (uint256)\n\t{\n\t\tPoolInfo memory pool = _store.getPoolInfo(pid);\n\t\tUserInfo memory singleUserInfo = _store.getUserInfo(pid, user);\n\t\tuint256 accFermionPerShare = pool.accFermionPerShare;\n\t\tuint256 lpSupply = pool.lpToken.balanceOf(address(this));\n\t\tif (block.number > pool.lastRewardBlock && lpSupply != 0)\n\t\t{\n\t\t\taccFermionPerShare = _getAccFermionPerShare(\n\t\t\t\taccFermionPerShare,\n\t\t\t\t_getFermionReward(_getMultiplier(pool.lastRewardBlock, block.number), pool.allocPoint)\n\t\t\t\t, lpSupply);\n\t\t}\n\t\treturn uint256(int256(_unsafeDiv((singleUserInfo.amount * accFermionPerShare), _ACC_FERMION_PRECISSION)) - singleUserInfo.rewardDebt);\n\t}\n\n\tfunction poolInfo(uint256 pid) override public view returns (PoolInfo memory)\n\t{\n\t\treturn _store.getPoolInfo(pid);\n\t}\n\n\tfunction poolLength() override public view returns (uint256)\n\t{\n\t\treturn _store.getPoolLength();\n\t}\n\n\t/// @notice Returns the address of the sucessor.\n\tfunction successor() override public view returns (IMagneticFieldGenerator)\n\t{\n\t\treturn _successor;\n\t}\n\n\tfunction totalAllocPoint() override public view returns (uint256)\n\t{\n\t\treturn _totalAllocPoint;\n\t}\n\n\tfunction userInfo(uint256 pid, address user) override public view returns (UserInfo memory)\n\t{\n\t\treturn _store.getUserInfo(pid, user);\n\t}\n\n\tfunction _getFermionReward(uint256 multiplier, uint256 allocPoint) private view returns (uint256)\n\t{\n\t\t// As long as the owner chooses sane values for _fermionPerBlock and pool.allocPoint it is unlikely that an overflow ever happens\n\t\t// Since _fermionPerBlock and pool.allocPoint are choosen by  the owner, it is the responsibility of the owner to ensure\n\t\t// that there is now overflow in multiplying these to values.\n\t\t// Divions can not generate an overflow if used with uint values. Div by 0 will always panic, wrapped or not.\n\t\t// The only place an overflow can happen (even very unlikeley) is if the multiplier gets big enouth to force an overflow.\n\t\treturn _unsafeDiv(multiplier * _unsafeMul(_fermionPerBlock, allocPoint), _totalAllocPoint);\n\t}\n\n\tfunction _getAccFermionPerShare(uint256 currentAccFermionShare, uint256 fermionReward, uint256 lpSupply) private pure returns (uint256)\n\t{\n\t\t// Divions can not generate an overflow if used with uint values. Div by 0 will always panic, wrapped or not.\n\n\t\t// Check for overflow for automatic pool deactivation.\n\t\treturn currentAccFermionShare + _unsafeDiv(fermionReward * _ACC_FERMION_PRECISSION, lpSupply); \n\t}\n\n\t// Return reward multiplier over the given _from to _to block.\n\tfunction _getMultiplier(uint256 from, uint256 to) private pure returns (uint256)\n\t{\n\t\tunchecked\n\t\t{\n\t\t\treturn to - from;\n\t\t}\n\t}\n\n\tfunction _unsafeDiv(uint256 a, uint256 b) private pure returns (uint256)\n\t{\n\t\tunchecked\n\t\t{\n\t\t\treturn a / b;\n\t\t}\n\t}\n\n\tfunction _unsafeMul(uint256 a, uint256 b) private pure returns (uint256)\n\t{\n\t\tunchecked\n\t\t{\n\t\t\treturn a * b;\n\t\t}\n\t}\n\n\tfunction _unsafeSub(uint256 a, uint256 b) private pure returns (uint256)\n\t{\n\t\tunchecked\n\t\t{\n\t\t\treturn a - b;\n\t\t}\n\t}\n}\n"
    },
    "@exoda/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../interfaces/access/IOwnable.sol\";\nimport \"../utils/Context.sol\";\n\n/**\n * @title Ownable contract module.\n * @author Ing. Michael Goldfinger\n * @notice Contract module which provides a basic access control mechanism, where\n * there is an address (an owner) that can be granted exclusive access to specific functions.\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with the function {transferOwnership(address newOwner)}\".\n * @dev This module is used through inheritance. It will make available the modifier\n * {onlyOwner}, which can be applied to your functions to restrict their use to the owner.\n */\ncontract Ownable is IOwnable, Context\n{\n\taddress private _owner;\n\n\t/**\n\t* @notice Throws if called by any account other than the owner.\n\t*/\n\tmodifier onlyOwner()\n\t{\n\t\trequire(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n\t\t_;\n\t}\n\n\t/**\n\t* @notice Initializes the contract setting the deployer as the initial owner.\n\t* \n\t* Emits an {OwnershipTransferred} event indicating the initially set ownership.\n\t*/\n\tconstructor()\n\t{\n\t\t_transferOwnership(_msgSender());\n\t}\n\n\t/// @inheritdoc IOwnable\n\tfunction renounceOwnership() override public virtual onlyOwner \n\t{\n\t\t_transferOwnership(address(0));\n\t}\n\n\t/// @inheritdoc IOwnable\n\tfunction transferOwnership(address newOwner) override public virtual onlyOwner\n\t{\n\t\trequire(newOwner != address(0), \"Ownable: new owner is address(0)\");\n\t\t_transferOwnership(newOwner);\n\t}\n\n\t/// @inheritdoc IOwnable\n\tfunction owner() public view virtual override returns (address)\n\t{\n\t\treturn _owner;\n\t}\n\n\t/**\n\t* @notice Transfers ownership of the contract to a new address.\n\t* Internal function without access restriction.\n\t* \n\t* Emits an {OwnershipTransferred} event indicating the transfered ownership.\n\t*/\n\tfunction _transferOwnership(address newOwner) internal virtual\n\t{\n\t\taddress oldOwner = _owner;\n\t\t_owner = newOwner;\n\t\temit OwnershipTransferred(oldOwner, newOwner);\n\t}\n}\n"
    },
    "contracts/Planet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@exoda/contracts/token/ERC20/ERC20.sol\";\nimport \"@exoda/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./interfaces/IPlanet.sol\";\n\ncontract Planet is IPlanet, ERC20\n{\n\tIERC20Metadata private _token;\n\taddress private immutable _factory;\n\tconstructor() ERC20(\"Planet\", \"GRAVITY\")\n\t{\n\t\t_factory = _msgSender();\n\t}\n\n\t// called once by the factory at time of deployment\n\tfunction initialize(IERC20Metadata tokenInit) override external\n\t{\n\t\trequire(_msgSender() == _factory, \"Planet: FORBIDDEN\");\n\t\trequire(address(_token) == address(0), \"Planet: Already Initalized\");\n\t\t_token = tokenInit;\n\t}\n\n\t// Locks Tokens and mints PlanetTokens.\n\tfunction enter(uint256 amount, address to) override external\n\t{\n\t\t// Mint PlanetToken at 1:1 ratio\n\t\t_mint(to, amount);\n\t\t// Lock Token in the contract\n\t\tSafeERC20.safeTransferFrom(_token, _msgSender(), address(this), amount);\n\t\temit Enter(_msgSender(), amount, to);\n\t}\n\n\t// this low-level function should be called from a contract which performs important safety checks\n\tfunction leave(uint256 amount, address to) override external\n\t{\n\t\t// Burn PlanetToken at 1:1 ratio\n\t\t_burn(_msgSender(), amount);\n\t\t// Transfer Token\n\t\tSafeERC20.safeTransfer(_token, to, amount);\n\t\temit Leave(_msgSender(), amount, to);\n\t}\n\n\tfunction token() override view external returns (IERC20Metadata)\n\t{\n\t\treturn _token;\n\t}\n\n\tfunction name() override(ERC20, IERC20Metadata) public view virtual returns (string memory)\n\t{\n\t\treturn string(abi.encodePacked(super.name(), \" \", _token.symbol()));\n\t}\n}\n"
    },
    "contracts/interfaces/IPlanet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20AltApprove.sol\";\n\ninterface IPlanet is IERC20AltApprove, IERC20Metadata\n{\n\tevent Enter(address indexed sender, uint256 amount, address indexed to);\n\tevent Leave(address indexed sender, uint256 amount, address indexed to);\n\n\tfunction enter(uint256 amount, address to) external;\n\tfunction leave(uint256 amount, address to) external;\n\tfunction initialize(IERC20Metadata tokenInit) external;\n\tfunction token() view external returns (IERC20Metadata);\n}"
    },
    "contracts/mocks/ERC20Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@exoda/contracts/token/ERC20/ERC20.sol\";\n\ncontract ERC20Mock is ERC20\n{\n\tconstructor(string memory name, string memory symbol, uint256 supply) ERC20(name, symbol)\n\t{\n\t\t_mint(msg.sender, supply);\n\t}\n}"
    },
    "@exoda/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../interfaces/token/ERC20/extensions/IERC20Burnable.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n* @notice Extension of {ERC20} that allows token holders to destroy both their own\n* tokens and those that they have an allowance for, in a way that can be\n* recognized off-chain (via event analysis).\n*/\ncontract ERC20Burnable is Context, ERC20, IERC20Burnable\n{\n\t/**\n\t* @notice Sets the values for {name} and {symbol}.\n\t*\n\t* The default value of {decimals} is 18. To select a different value for\n\t* {decimals} you should overload it.\n\t*\n\t* All two of these values are immutable: they can only be set once during\n\t* construction.\n\t*/\n\tconstructor(string memory tokenName, string memory tokenSymbol) ERC20(tokenName, tokenSymbol)\n\t{} // solhint-disable-line no-empty-blocks\n\n\t/**\n\t* @notice Destroys `amount` tokens from the caller.\n\t*\n\t* See {ERC20-_burn}.\n\t*/\n\tfunction burn(uint256 amount) public virtual override\n\t{\n\t\t_burn(_msgSender(), amount);\n\t}\n\n\t/**\n\t* @notice Destroys `amount` tokens from `account`, deducting from the caller's allowance.\n\t*\n\t* See {ERC20-_burn} and {ERC20-allowance}.\n\t*\n\t* Requirements:\n\t* - the caller must have allowance for `account`'s tokens of at least `amount`.\n\t*/\n\tfunction burnFrom(address account, uint256 amount) public virtual override\n\t{\n\t\t_spendAllowance(account, _msgSender(), amount);\n\t\t_burn(account, amount);\n\t}\n}\n"
    },
    "contracts/mocks/ERC20BurnableMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@exoda/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\n\ncontract ERC20BurnableMock is ERC20Burnable\n{\n\tconstructor(string memory name, string memory symbol, uint256 supply) ERC20Burnable(name, symbol)\n\t{\n\t\t_mint(msg.sender, supply);\n\t}\n}"
    },
    "contracts/VortexLock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Burnable.sol\";\nimport \"./interfaces/IVortexLock.sol\";\nimport \"@exoda/contracts/access/Ownable.sol\";\n\ncontract VortexLock is IVortexLock, Ownable\n{\n\tuint256 private immutable _startBlockPhase1;\n\tuint256 private immutable _startBlockPhase2;\n\tuint256 private immutable _startBlockPhase3;\n\tuint256 private immutable _startBlockPhase4;\n\tuint256 private immutable _endBlock;\n\tuint256 private immutable _finalBlock;\n\tuint256 private _benefitaryCount;\n\tuint256 private _amountPerBlockPhase1;\n\tuint256 private _amountPerBlockPhase2;\n\tuint256 private _amountPerBlockPhase3;\n\tuint256 private _amountPerBlockPhase4;\n\tuint256 private _cutOfAmount;\n\tmapping(address => uint256) private _lastClaimedBlock;\n\tmapping(address => uint256) private _alreadyClaimedAmount;\n\tIERC20Burnable private immutable _token;\n\n\tconstructor(uint256 startBlock, uint256 endBlock, uint256 finalizingBlock, IERC20Burnable token) Ownable()\n\t{\n\t\t// Split the start and end intervall into 4 parts.\n\t\tunchecked\n\t\t{\n\t\t\tuint256 part = (endBlock - startBlock) / 4;\n\t\t\t_startBlockPhase1 = startBlock;\n\t\t\t_startBlockPhase2 = startBlock + part;\n\t\t\t_startBlockPhase3 = startBlock + (part * 2);\n\t\t\t_startBlockPhase4 = startBlock + (part * 3);\n\t\t}\n\t\t_endBlock = endBlock;\n\t\t_finalBlock = finalizingBlock;\n\t\t_token = token;\n\t}\n\n\tfunction loadToken(uint256 amount) override public onlyOwner\n\t{\n\t\trequire(block.number < _startBlockPhase1, \"VortexLock: Can only set before start block\"); // solhint-disable-line reason-string\n\t\tuint256 fraction = (amount * 16) / 15;\n\t\tunchecked\n\t\t{\n\t\t\tuint256 ph1Blocks = _startBlockPhase2 - _startBlockPhase1;\n\t\t\tuint256 amountPhase1 = fraction / 2;\n\t\t\t_amountPerBlockPhase1 = amountPhase1 / ph1Blocks;\n\t\t\tuint256 cleanAmountP1 = _amountPerBlockPhase1 * ph1Blocks;\n\t\t\tuint256 leftAmount = amountPhase1 - cleanAmountP1;\n\n\t\t\tuint256 ph2Blocks = _startBlockPhase3 - _startBlockPhase2;\n\t\t\tuint256 amountPhase2 = (fraction / 4) + leftAmount;\n\t\t\t_amountPerBlockPhase2 = amountPhase2 / ph2Blocks;\n\t\t\tuint256 cleanAmountP2 = _amountPerBlockPhase2 * ph2Blocks;\n\t\t\tleftAmount = amountPhase2 - cleanAmountP2;\n\t\t\t\n\t\t\tuint256 ph3Blocks = _startBlockPhase4 - _startBlockPhase3;\n\t\t\t_amountPerBlockPhase3 = ((fraction / 8) + leftAmount) / ph3Blocks;\n\t\t\tuint256 cleanAmountP3 = _amountPerBlockPhase3 * ph3Blocks;\n\n\t\t\t// Minimize cut of decimal errors.\n\t\t\t_amountPerBlockPhase4 = (amount - (cleanAmountP1 + cleanAmountP2 + cleanAmountP3)) / (_endBlock - _startBlockPhase4);\n\t\t}\n\t\tuint256 allowance = _token.allowance(owner(), address(this));\n\t\trequire(allowance == amount, \"VortexLock: Allowance must be equal to amount\");  // solhint-disable-line reason-string\n\t\t_token.transferFrom(owner(), address(this), amount);\n\t}\n\n\t/// @notice Runs the last task after reaching the final block.\n\tfunction die() override public\n\t{\n\t\trequire(block.number > _finalBlock, \"VortexLock: Can only be killed after final block\"); // solhint-disable-line reason-string\n\t\tuint256 remainingAmount = _token.balanceOf(address(this));\n\t\t_token.burn(remainingAmount);\n\t}\n\n\t/// @notice Adds a benefitary as long as the startBlock is not reached.\n\tfunction addBeneficiary(address benefitary) override public onlyOwner\n\t{\n\t\trequire(block.number < _startBlockPhase1, \"VortexLock: Can only added before start block\"); // solhint-disable-line reason-string\n\t\t_lastClaimedBlock[benefitary] = _startBlockPhase1;\n\t\t++_benefitaryCount;\n\t}\n\n\tfunction claim() override public\n\t{\n\t\taddress sender = msg.sender;\n\t\trequire(_lastClaimedBlock[sender] > 0, \"VortexLock: Only benefitaries can claim\"); // solhint-disable-line reason-string\n\t\tuint256 amount = getClaimableAmount();\n\t\t_lastClaimedBlock[sender] = block.number;\n\t\t_alreadyClaimedAmount[sender] += amount;\n\t\t_token.transfer(sender, amount);\n\t}\n\n\tfunction getClaimableAmount() override public view returns(uint256)\n\t{\n\t\tuint256 currentBlock = block.number;\n\t\t\n\t\tif ((currentBlock < _startBlockPhase1) || (currentBlock > _finalBlock))\n\t\t{\n\t\t\treturn 0; // Not started yet or final Block reached.\n\t\t}\n\t\tif (_lastClaimedBlock[msg.sender] < _startBlockPhase1)\n\t\t{\n\t\t\treturn 0; // Not in list\n\t\t}\n\n\t\tunchecked\n\t\t{\n\t\t\tuint256 ph1Blocks =_max(_min(_startBlockPhase2, currentBlock), _startBlockPhase1) - _startBlockPhase1;\n\t\t\tuint256 ph2Blocks = _max(_min(_startBlockPhase3, currentBlock), _startBlockPhase2) - _startBlockPhase2;\n\t\t\tuint256 ph3Blocks = _max(_min(_startBlockPhase4, currentBlock), _startBlockPhase3) - _startBlockPhase3;\n\t\t\tuint256 ph4Blocks = _max(_min(_endBlock, currentBlock), _startBlockPhase4) - _startBlockPhase4;\n\t\t\tuint256 ret =  (((ph1Blocks * _amountPerBlockPhase1) +\n\t\t\t\t(ph2Blocks * _amountPerBlockPhase2) +\n\t\t\t\t(ph3Blocks * _amountPerBlockPhase3) +\n\t\t\t\t(ph4Blocks * _amountPerBlockPhase4)) / _benefitaryCount) - _alreadyClaimedAmount[msg.sender];\n\t\t\treturn ret;\n\t\t}\n\t}\n\n\tfunction _min(uint256 a, uint256 b) private pure returns(uint256)\n\t{\n\t\treturn a <= b ? a : b;\n\t}\n\n\tfunction _max(uint256 a, uint256 b) private pure returns(uint256)\n\t{\n\t\treturn a >= b ? a : b;\n\t}\n}\n"
    },
    "contracts/interfaces/IVortexLock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@exoda/contracts/interfaces/access/IOwnable.sol\";\nimport \"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Burnable.sol\";\n\ninterface IVortexLock is IOwnable\n{\n\tfunction loadToken(uint256 amount) external;\n\tfunction die() external;\n\tfunction addBeneficiary(address benefitary) external;\n\tfunction claim() external;\n\tfunction getClaimableAmount() external view returns(uint256);\n}"
    },
    "contracts/MagneticFieldGeneratorStore.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@exoda/contracts/access/Ownable.sol\";\nimport \"./interfaces/IMagneticFieldGeneratorStore.sol\";\n\ncontract MagneticFieldGeneratorStore is IMagneticFieldGeneratorStore, Ownable\n{\n\tmapping(uint256 => mapping(address => UserInfo)) private _userInfo;\n\tPoolInfo[] private _poolInfo;\n\n\tfunction newPoolInfo(PoolInfo memory pi) override external onlyOwner\n\t{\n\t\t_poolInfo.push(pi);\n\t}\n\n\tfunction deletePoolInfo(uint256 pid) override external onlyOwner\n\t{\n\t\trequire(_poolInfo[pid].allocPoint == 0, \"MFGS: Pool is active\");\n\t\t_poolInfo[pid] = _poolInfo[_poolInfo.length - 1];\n\t\t_poolInfo.pop();\n\t}\n\n\tfunction updateUserInfo(uint256 pid, address user, UserInfo memory ui) override external onlyOwner\n\t{\n\t\t_userInfo[pid][user] = ui;\n\t}\n\n\tfunction updatePoolInfo(uint256 pid, PoolInfo memory pi) override external onlyOwner\n\t{\n\t\t_poolInfo[pid] = pi;\n\t}\n\n\n\t/// @notice Leaves the contract without owner. Can only be called by the current owner.\n\t/// This is a dangerous call be aware of the consequences\n\tfunction renounceOwnership() public override(IOwnable, Ownable)\n\t{\n\t\tOwnable.renounceOwnership();\n\t}\n\n\t/// @notice Returns the address of the current owner.\n\tfunction owner() public view override(IOwnable, Ownable) returns (address)\n\t{\n\t\treturn Ownable.owner();\n\t}\n\n\tfunction getPoolInfo(uint256 pid) override external view returns (PoolInfo memory)\n\t{\n\t\treturn _poolInfo[pid];\n\t}\n\n\tfunction getPoolLength() override external view returns (uint256)\n\t{\n\t\treturn _poolInfo.length;\n\t}\n\n\tfunction getUserInfo(uint256 pid, address user) override external view returns (UserInfo memory)\n\t{\n\t\treturn _userInfo[pid][user];\n\t}\n}\n"
    },
    "contracts/Exofiswap/ExofiswapFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@exoda/contracts/access/Ownable.sol\";\nimport \"./interfaces/IExofiswapFactory.sol\";\nimport \"./interfaces/IExofiswapPair.sol\";\nimport \"./ExofiswapPair.sol\";\n\ncontract ExofiswapFactory is IExofiswapFactory, Ownable\n{\n\taddress private _feeTo;\n\tIMigrator private _migrator;\n\tmapping(IERC20Metadata => mapping(IERC20Metadata => IExofiswapPair)) private _getPair;\n\tIExofiswapPair[] private _allPairs;\n\n\tconstructor()\n\t{} // solhint-disable-line no-empty-blocks\n\n\tfunction createPair(IERC20Metadata tokenA, IERC20Metadata tokenB) override public returns (IExofiswapPair)\n\t{\n\t\trequire(tokenA != tokenB, \"EF: IDENTICAL_ADDRESSES\");\n\t\t(IERC20Metadata token0, IERC20Metadata token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n\t\trequire(address(token0) != address(0), \"EF: ZERO_ADDRESS\");\n\t\trequire(address(_getPair[token0][token1]) == address(0), \"EF: PAIR_EXISTS\"); // single check is sufficient\n\n\t\tbytes32 salt = keccak256(abi.encodePacked(token0, token1));\n\t\tIExofiswapPair pair = new ExofiswapPair{salt: salt}(); // Use create2\n\t\tpair.initialize(token0, token1);\n\n\t\t_getPair[token0][token1] = pair;\n\t\t_getPair[token1][token0] = pair; // populate mapping in the reverse direction\n\t\t_allPairs.push(pair);\n\t\temit PairCreated(token0, token1, pair, _allPairs.length);\n\t\treturn pair;\n\t}\n\n\tfunction setFeeTo(address newFeeTo) override public onlyOwner\n\t{\n\t\t_feeTo = newFeeTo;\n\t}\n\n\tfunction setMigrator(IMigrator newMigrator) override public onlyOwner\n\t{\n\t\t_migrator = newMigrator;\n\t}\n\n\tfunction allPairs(uint256 index) override public view returns (IExofiswapPair)\n\t{\n\t\treturn _allPairs[index];\n\t}\n\n\tfunction allPairsLength() override public view returns (uint256)\n\t{\n\t\treturn _allPairs.length;\n\t}\n\n\tfunction feeTo() override public view returns (address)\n\t{\n\t\treturn _feeTo;\n\t}\n\n\tfunction getPair(IERC20Metadata tokenA, IERC20Metadata tokenB) override public view returns (IExofiswapPair)\n\t{\n\t\treturn _getPair[tokenA][tokenB];\n\t}\n\n\tfunction migrator() override public view returns (IMigrator)\n\t{\n\t\treturn _migrator;\n\t}\n\n\tfunction pairCodeHash() override public pure returns (bytes32)\n\t{\n\t\treturn keccak256(type(ExofiswapPair).creationCode);\n\t}\n}\n"
    },
    "contracts/UniMigrator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./interfaces/IMigratorDevice.sol\";\nimport \"./FakeERC20.sol\";\n\ncontract UniMigrator is IMigratorDevice\n{\n\taddress private immutable _beneficiary;\n\n\tconstructor(address beneficiaryAddress)\n\t{\n\t\t_beneficiary = beneficiaryAddress;\n\t}\n\n\tfunction migrate(IERC20 src) override public returns (address)\n\t{\n\t\trequire(address(src) == 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984, \"UniMigrator: Not uni token\");\n\t\tuint256 bal = src.balanceOf(msg.sender);\n\t\tsrc.transferFrom(msg.sender, _beneficiary, bal);\n\t\treturn address(new FakeERC20(bal));\n\t}\n\n\tfunction beneficiary() override public view returns(address)\n\t{\n\t\treturn _beneficiary;\n\t}\n}"
    },
    "contracts/FakeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./interfaces/IFakeERC20.sol\";\n\ncontract FakeERC20 is IFakeERC20\n{\n\tuint256 public amount;\n\n\tconstructor(uint256 initialAmount)\n\t{\n\t\tamount = initialAmount;\n\t}\n\n\tfunction balanceOf(address) override public view returns (uint256)\n\t{\n\t\treturn amount;\n\t}\n}"
    },
    "contracts/interfaces/IFakeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IFakeERC20\n{\n\tfunction balanceOf(address) external view returns (uint256);\n}"
    },
    "contracts/mocks/UniMigratorMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IMigratorDevice.sol\";\nimport \"../FakeERC20.sol\";\n\ncontract UniMigratorMock is IMigratorDevice\n{\n\taddress private _beneficiary;\n\taddress private _testToken;\n\n\tconstructor(address beneficiaryAddress, address testToken)\n\t{\n\t\t_beneficiary = beneficiaryAddress;\n\t\t_testToken = testToken;\n\t}\n\n\tfunction migrate(IERC20 src) override public returns (address)\n\t{\n\t\trequire(address(src) == _testToken, \"UniMigratorMock: Not correct token\"); //solhint-disable-line reason-string\n\t\tuint256 bal = src.balanceOf(msg.sender);\n\t\tsrc.transferFrom(msg.sender, _beneficiary, bal);\n\t\treturn address(new FakeERC20(bal));\n\t}\n\n\tfunction beneficiary() override public view returns(address)\n\t{\n\t\treturn _beneficiary;\n\t}\n}"
    },
    "contracts/FerMigrator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./interfaces/IMigratorDevice.sol\";\nimport \"./Planet.sol\";\n\ncontract FerMigrator is IMigratorDevice\n{\n\taddress private immutable _beneficiary;\n\n\tconstructor(Planet beneficiaryAddress)\n\t{\n\t\t_beneficiary = address(beneficiaryAddress);\n\t}\n\n\tfunction migrate(IERC20 src) override public returns (address)\n\t{\n\t\trequire(address(src) == address(0x7d5e85d281CE6E93C6D17b4887e58242A23703c3), \"FerMigrator: Not Fermion token\");\n\t\tuint256 bal = src.balanceOf(msg.sender);\n\t\t// src.approve(address(_beneficiary), bal);\n\t\t// Planet(_beneficiary).enter(bal, msg.sender);\n\t\t// return address(_beneficiary);\n\t\treturn address(src);\n\t}\n\n\tfunction beneficiary() override public view returns(address)\n\t{\n\t\treturn _beneficiary;\n\t}\n}"
    },
    "contracts/Fermion.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@exoda/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport \"@exoda/contracts/access/Ownable.sol\";\nimport \"./interfaces/IFermion.sol\";\n\n/**\n* @dev Implementation of the {IFermion} interface.\n*/\ncontract Fermion is Ownable, ERC20Burnable, IFermion\n{\n\tuint256 private constant _MAX_SUPPLY = (1000000000 * (10**18));\n\n\tconstructor() ERC20Burnable(\"Fermion\", \"EXOFI\")\n\t{\n\t\t_mint(owner(), (_MAX_SUPPLY * 4) / 10); // 40%\n\t}\n\n\t/// @notice Creates `amount` token to `to`. Must only be called by the owner (MagneticFieldGenerator).\n\tfunction mint(address to, uint256 amount) override public onlyOwner\n\t{\n\t\trequire(totalSupply() < _MAX_SUPPLY, \"Fermion: Max supply reached\");\n\t\t_mint(to, amount);\n\t}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 500000,
      "details": {
        "orderLiterals": true,
        "deduplicate": true,
        "cse": true,
        "constantOptimizer": true
      }
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
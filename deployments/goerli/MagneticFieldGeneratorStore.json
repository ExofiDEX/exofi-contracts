{
  "address": "0x515351DaC5D02Cb7AA4363cb4821bA855fb9BBa4",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "deletePoolInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "getPoolInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "allocPoint",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRewardBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "accFermionPerShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialLock",
              "type": "uint256"
            }
          ],
          "internalType": "struct PoolInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "rewardDebt",
              "type": "int256"
            }
          ],
          "internalType": "struct UserInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "allocPoint",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRewardBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "accFermionPerShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialLock",
              "type": "uint256"
            }
          ],
          "internalType": "struct PoolInfo",
          "name": "pi",
          "type": "tuple"
        }
      ],
      "name": "newPoolInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "allocPoint",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRewardBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "accFermionPerShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialLock",
              "type": "uint256"
            }
          ],
          "internalType": "struct PoolInfo",
          "name": "pi",
          "type": "tuple"
        }
      ],
      "name": "updatePoolInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "rewardDebt",
              "type": "int256"
            }
          ],
          "internalType": "struct UserInfo",
          "name": "ui",
          "type": "tuple"
        }
      ],
      "name": "updateUserInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa6b546a9473b5f3bd832bbff87618ec769aabb9684ef5a6039aa7b5ee8bc3d5b",
  "receipt": {
    "to": null,
    "from": "0x1799e996ec140dc66680bb6e6ac331e40b827fe1",
    "contractAddress": "0x84b342e32ee8da8ddc954bed7dd40e66a1fdd65e",
    "transactionIndex": "0x42",
    "gasUsed": "0xcf80e",
    "logsBloom": "0x
    "blockHash": "0x64da36c687541ba41830fc90873c50c0d4e567b32d2d6a6fb8b4e9104384cc2c",
    "transactionHash": "0xa6b546a9473b5f3bd832bbff87618ec769aabb9684ef5a6039aa7b5ee8bc3d5b",
    "logs": [
      {
        "address": "0x84b342e32ee8da8ddc954bed7dd40e66a1fdd65e",
        "blockHash": "0x64da36c687541ba41830fc90873c50c0d4e567b32d2d6a6fb8b4e9104384cc2c",
        "blockNumber": "0x776bae",
        "data": "0x",
        "logIndex": "0xf6",
        "removed": false,
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001799e996ec140dc66680bb6e6ac331e40b827fe1"
        ],
        "transactionHash": "0xa6b546a9473b5f3bd832bbff87618ec769aabb9684ef5a6039aa7b5ee8bc3d5b",
        "transactionIndex": "0x42"
      }
    ],
    "blockNumber": "0x776bae",
    "cumulativeGasUsed": "0xa5eec3",
    "status": "0x1"
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "826e7e16b5d1f5f6401540a40e57637d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"deletePoolInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getPoolInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accFermionPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialLock\",\"type\":\"uint256\"}],\"internalType\":\"struct PoolInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"rewardDebt\",\"type\":\"int256\"}],\"internalType\":\"struct UserInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accFermionPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialLock\",\"type\":\"uint256\"}],\"internalType\":\"struct PoolInfo\",\"name\":\"pi\",\"type\":\"tuple\"}],\"name\":\"newPoolInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accFermionPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialLock\",\"type\":\"uint256\"}],\"internalType\":\"struct PoolInfo\",\"name\":\"pi\",\"type\":\"tuple\"}],\"name\":\"updatePoolInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"rewardDebt\",\"type\":\"int256\"}],\"internalType\":\"struct UserInfo\",\"name\":\"ui\",\"type\":\"tuple\"}],\"name\":\"updateUserInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"transferOwnership(address)\":{\"params\":{\"newOwner\":\"The new owner of the contract.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when ownership is moved from one address to another.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"notice\":\"Leaves the contract without owner. Can only be called by the current owner. This is a dangerous call be aware of the consequences\"},\"transferOwnership(address)\":{\"notice\":\"Transfers ownership of the contract to a new address. Emits an [`OwnershipTransferred`](#ownershiptransferred) event indicating the transfered ownership. Requirements: - Can only be called by the current owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MagneticFieldGeneratorStore.sol\":\"MagneticFieldGeneratorStore\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500000},\"remappings\":[]},\"sources\":{\"@exoda/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/access/IOwnable.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @title Ownable contract module.\\n * @author Ing. Michael Goldfinger\\n * @notice Contract module which provides a basic access control mechanism, where\\n * there is an address (an owner) that can be granted exclusive access to specific functions.\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with the function {transferOwnership(address newOwner)}\\\".\\n * @dev This module is used through inheritance. It will make available the modifier\\n * {onlyOwner}, which can be applied to your functions to restrict their use to the owner.\\n */\\ncontract Ownable is IOwnable, Context\\n{\\n\\taddress private _owner;\\n\\n\\t/**\\n\\t* @notice Throws if called by any account other than the owner.\\n\\t*/\\n\\tmodifier onlyOwner()\\n\\t{\\n\\t\\trequire(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Initializes the contract setting the deployer as the initial owner.\\n\\t* \\n\\t* Emits an {OwnershipTransferred} event indicating the initially set ownership.\\n\\t*/\\n\\tconstructor()\\n\\t{\\n\\t\\t_transferOwnership(_msgSender());\\n\\t}\\n\\n\\t/// @inheritdoc IOwnable\\n\\tfunction renounceOwnership() override public virtual onlyOwner \\n\\t{\\n\\t\\t_transferOwnership(address(0));\\n\\t}\\n\\n\\t/// @inheritdoc IOwnable\\n\\tfunction transferOwnership(address newOwner) override public virtual onlyOwner\\n\\t{\\n\\t\\trequire(newOwner != address(0), \\\"Ownable: new owner is address(0)\\\");\\n\\t\\t_transferOwnership(newOwner);\\n\\t}\\n\\n\\t/// @inheritdoc IOwnable\\n\\tfunction owner() public view virtual override returns (address)\\n\\t{\\n\\t\\treturn _owner;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Transfers ownership of the contract to a new address.\\n\\t* Internal function without access restriction.\\n\\t* \\n\\t* Emits an {OwnershipTransferred} event indicating the transfered ownership.\\n\\t*/\\n\\tfunction _transferOwnership(address newOwner) internal virtual\\n\\t{\\n\\t\\taddress oldOwner = _owner;\\n\\t\\t_owner = newOwner;\\n\\t\\temit OwnershipTransferred(oldOwner, newOwner);\\n\\t}\\n}\\n\",\"keccak256\":\"0x2a1355eddd79ce931f562edbc248e876dc143cf0b53a087fff04c6d9aca69c18\",\"license\":\"MIT\"},\"@exoda/contracts/interfaces/access/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Ownable interface.\\n/// @author Ing. Michael Goldfinger\\n/// @notice This interface contains all visible functions and events for the Ownable contract module.\\ninterface IOwnable\\n{\\n\\t/// @notice Emitted when ownership is moved from one address to another.\\n\\t/// @param previousOwner (indexed) The owner of the contract until now.\\n\\t/// @param newOwner (indexed) The new owner of the contract.\\n\\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\t/**\\n\\t * @notice Leaves the contract without an owner. It will not be possible to call {onlyOwner} functions anymore.\\n\\t *\\n\\t * NOTE: Renouncing ownership will leave the contract without an owner,\\n\\t * thereby removing any functionality that is only available to the owner.\\n\\t *\\n\\t * Emits an [`OwnershipTransferred`](#ownershiptransferred) event indicating the renounced ownership.\\n\\t *\\n\\t * Requirements:\\n\\t * - Can only be called by the current owner.\\n\\t * \\n\\t * @dev Sets the zero address as the new contract owner.\\n\\t */\\n\\tfunction renounceOwnership() external;\\n\\n\\t/**\\n\\t * @notice Transfers ownership of the contract to a new address.\\n\\t *\\n\\t * Emits an [`OwnershipTransferred`](#ownershiptransferred) event indicating the transfered ownership.\\n\\t *\\n\\t * Requirements:\\n\\t * - Can only be called by the current owner.\\n\\t *\\n\\t * @param newOwner The new owner of the contract.\\n\\t */\\n\\tfunction transferOwnership(address newOwner) external;\\n\\n\\t/// @notice Returns the current owner.\\n\\t/// @return The current owner.\\n\\tfunction owner() external view returns (address);\\n}\",\"keccak256\":\"0xfec11d14cb2fce6cec8e81b199452a616199a58763a8497e37212f856f4a4e15\",\"license\":\"MIT\"},\"@exoda/contracts/interfaces/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC20 interface.\\n * @author Ing. Michael Goldfinger\\n * @notice Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20\\n{\\n\\t/**\\n\\t * @notice Emitted when the allowance of a {spender} for an {owner} is set to a new value.\\n\\t *\\n\\t * NOTE: {value} may be zero.\\n\\t * @param owner (indexed) The owner of the tokens.\\n\\t * @param spender (indexed) The spender for the tokens.\\n\\t * @param value The amount of tokens that got an allowance.\\n\\t */\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n\\t/**\\n\\t * @notice Emitted when {value} tokens are moved from one address {from} to another {to}.\\n\\t *\\n\\t * NOTE: {value} may be zero.\\n\\t * @param from (indexed) The origin of the transfer.\\n\\t * @param to (indexed) The target of the transfer.\\n\\t * @param value The amount of tokens that got transfered.\\n\\t */\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\t/**\\n\\t* @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n\\t*\\n\\t* Returns a boolean value indicating whether the operation succeeded.\\n\\t*\\n\\t* IMPORTANT: Beware that changing an allowance with this method brings the risk\\n\\t* that someone may use both the old and the new allowance by unfortunate\\n\\t* transaction ordering. One possible solution to mitigate this race\\n\\t* condition is to first reduce the spender's allowance to 0 and set the\\n\\t* desired value afterwards:\\n\\t* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\t*\\n\\t* Emits an {Approval} event.\\n\\t*/\\n\\tfunction approve(address spender, uint256 amount) external returns (bool);\\n\\n\\t/**\\n\\t* @dev Moves `amount` tokens from the caller's account to `to`.\\n\\t*\\n\\t* Returns a boolean value indicating whether the operation succeeded.\\n\\t*\\n\\t* Emits a {Transfer} event.\\n\\t*/\\n\\tfunction transfer(address to, uint256 amount) external returns (bool);\\n\\n\\t/**\\n\\t* @dev Moves `amount` tokens from `from` to `to` using the allowance mechanism.\\n\\t* `amount` is then deducted from the caller's allowance.\\n\\t*\\n\\t* Returns a boolean value indicating whether the operation succeeded.\\n\\t*\\n\\t* Emits a {Transfer} event.\\n\\t*/\\n\\tfunction transferFrom(address from, address to, uint256 amount) external returns (bool);\\n\\n\\t/**\\n\\t* @dev Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}.\\n\\t* This is zero by default.\\n\\t*\\n\\t* This value changes when {approve}, {increaseAllowance}, {decreseAllowance} or {transferFrom} are called.\\n\\t*/\\n\\tfunction allowance(address owner, address spender) external view returns (uint256);\\n\\n\\t/**\\n\\t* @dev Returns the amount of tokens owned by `account`.\\n\\t*/\\n\\tfunction balanceOf(address account) external view returns (uint256);\\n\\n\\t/**\\n\\t* @dev Returns the amount of tokens in existence.\\n\\t*/\\n\\tfunction totalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4f3061b0e883d9105a5ba012c092ed76b8bd8d7866274e084028df9a7d65d70e\",\"license\":\"MIT\"},\"@exoda/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n* @notice Provides information about the current execution context, including the\\n* sender of the transaction and its data. While these are generally available\\n* via msg.sender and msg.data, they should not be accessed in such a direct\\n* manner, since when dealing with meta-transactions the account sending and\\n* paying for execution may not be the actual sender (as far as an application\\n* is concerned).\\n*\\n* This contract is only required for intermediate, library-like contracts.\\n*/\\nabstract contract Context\\n{\\n\\t/// @notice returns the sender of the transaction.\\n\\t/// @return The sender of the transaction.\\n\\tfunction _msgSender() internal view virtual returns (address)\\n\\t{\\n\\t\\treturn msg.sender;\\n\\t}\\n\\n\\t/// @notice returns the data of the transaction.\\n\\t/// @return The data of the transaction.\\n\\tfunction _msgData() internal view virtual returns (bytes calldata)\\n\\t{\\n\\t\\treturn msg.data;\\n\\t}\\n}\\n\",\"keccak256\":\"0xce68a1ae85d9c12dba94f20a2af4f1eeeb187c4631e663a7d8181bd5cbf39035\",\"license\":\"MIT\"},\"contracts/MagneticFieldGeneratorStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@exoda/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IMagneticFieldGeneratorStore.sol\\\";\\n\\ncontract MagneticFieldGeneratorStore is IMagneticFieldGeneratorStore, Ownable\\n{\\n\\tmapping(uint256 => mapping(address => UserInfo)) private _userInfo;\\n\\tPoolInfo[] private _poolInfo;\\n\\n\\tfunction newPoolInfo(PoolInfo memory pi) override external onlyOwner\\n\\t{\\n\\t\\t_poolInfo.push(pi);\\n\\t}\\n\\n\\tfunction deletePoolInfo(uint256 pid) override external onlyOwner\\n\\t{\\n\\t\\trequire(_poolInfo[pid].allocPoint == 0, \\\"MFGS: Pool is active\\\");\\n\\t\\t_poolInfo[pid] = _poolInfo[_poolInfo.length - 1];\\n\\t\\t_poolInfo.pop();\\n\\t}\\n\\n\\tfunction updateUserInfo(uint256 pid, address user, UserInfo memory ui) override external onlyOwner\\n\\t{\\n\\t\\t_userInfo[pid][user] = ui;\\n\\t}\\n\\n\\tfunction updatePoolInfo(uint256 pid, PoolInfo memory pi) override external onlyOwner\\n\\t{\\n\\t\\t_poolInfo[pid] = pi;\\n\\t}\\n\\n\\n\\tfunction getPoolInfo(uint256 pid) override external view returns (PoolInfo memory)\\n\\t{\\n\\t\\treturn _poolInfo[pid];\\n\\t}\\n\\n\\tfunction getPoolLength() override external view returns (uint256)\\n\\t{\\n\\t\\treturn _poolInfo.length;\\n\\t}\\n\\n\\tfunction getUserInfo(uint256 pid, address user) override external view returns (UserInfo memory)\\n\\t{\\n\\t\\treturn _userInfo[pid][user];\\n\\t}\\n\\n\\t/// @notice Leaves the contract without owner. Can only be called by the current owner.\\n\\t/// This is a dangerous call be aware of the consequences\\n\\tfunction renounceOwnership() public override(IOwnable, Ownable)\\n\\t{\\n\\t\\tOwnable.renounceOwnership();\\n\\t}\\n\\n\\t/// @notice Returns the address of the current owner.\\n\\tfunction owner() public view override(IOwnable, Ownable) returns (address)\\n\\t{\\n\\t\\treturn Ownable.owner();\\n\\t}\\n}\\n\",\"keccak256\":\"0x886a7f4ddbf6b15c41938fd69908977940e36330d29955392e199a9ac1494167\",\"license\":\"MIT\"},\"contracts/interfaces/IMagneticFieldGeneratorStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@exoda/contracts/interfaces/access/IOwnable.sol\\\";\\nimport \\\"../structs/PoolInfo.sol\\\";\\nimport \\\"../structs/UserInfo.sol\\\";\\n\\ninterface IMagneticFieldGeneratorStore is IOwnable\\n{\\n\\tfunction deletePoolInfo(uint256 pid) external;\\n\\tfunction newPoolInfo(PoolInfo memory pi) external;\\n\\tfunction updateUserInfo(uint256 pid, address user, UserInfo memory ui) external;\\n\\tfunction updatePoolInfo(uint256 pid, PoolInfo memory pi) external;\\n\\tfunction getPoolInfo(uint256 pid) external view returns (PoolInfo memory);\\n\\tfunction getPoolLength() external view returns (uint256);\\n\\tfunction getUserInfo(uint256 pid, address user) external view returns (UserInfo memory);\\n\\t\\n}\\n\",\"keccak256\":\"0xa9f3fc689f9d24d99e3ae4fc0efc7769b864af577cb7cc61dbd908edb53df06c\",\"license\":\"MIT\"},\"contracts/structs/PoolInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@exoda/contracts/interfaces/token/ERC20/IERC20.sol\\\";\\n\\n// Info of each pool.\\nstruct PoolInfo\\n{\\n\\tIERC20 lpToken; // Address of LP token contract.\\n\\tuint256 allocPoint; // How many allocation points assigned to this pool. FMNs to distribute per block.\\n\\tuint256 lastRewardBlock; // Last block number that FMNs distribution occurs.\\n\\tuint256 accFermionPerShare; // Accumulated FMNs per share, times _ACC_FERMION_PRECISSION. See below.\\n\\tuint256 initialLock; // Block until withdraw from the pool is not possible.\\n}\",\"keccak256\":\"0xe28c6e3b4aed034e9bfcfcda286aaf300534b2ab3ff734131e5a7e964e3c5011\",\"license\":\"MIT\"},\"contracts/structs/UserInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Info of each user.\\nstruct UserInfo\\n{\\n\\tuint256 amount; // How many LP tokens the user has provided.\\n\\tint256 rewardDebt; // Reward debt. See explanation below.\\n\\t//\\n\\t// We do some fancy math here. Basically, any point in time, the amount of FMNs\\n\\t// entitled to a user but is pending to be distributed is:\\n\\t//\\n\\t//   pending reward = (user.amount * pool.accFermionPerShare) - user.rewardDebt\\n\\t//\\n\\t// Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n\\t//   1. The pool's `accFermionPerShare` (and `lastRewardBlock`) gets updated.\\n\\t//   2. User receives the pending reward sent to his/her address.\\n\\t//   3. User's `amount` gets updated.\\n\\t//   4. User's `rewardDebt` gets updated.\\n}\",\"keccak256\":\"0x40542bfa81e1280604b323497d6dc0052031a21a0b927cfa48dfe24a1a27962c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610e0e8061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c806391f317e411610076578063b3944d521161005b578063b3944d52146101cc578063de781094146101dd578063f2fde38b146101f057600080fd5b806391f317e4146101a657806393bb3d4f146101b957600080fd5b80633224e6c9116100a75780633224e6c914610161578063715018a6146101765780638da5cb5b1461017e57600080fd5b80631069f3b5146100c35780632f380b35146100f6575b600080fd5b6100d66100d1366004610b28565b610203565b604080518251815260209283015192810192909252015b60405180910390f35b610109610104366004610b58565b61025c565b6040516100ed9190600060a08201905073ffffffffffffffffffffffffffffffffffffffff83511682526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b61017461016f366004610b71565b61031e565b005b6101746103e2565b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ed565b6101746101b4366004610cd3565b6103ec565b6101746101c7366004610d00565b610504565b6002546040519081526020016100ed565b6101746101eb366004610b58565b6106aa565b6101746101fe366004610d23565b610900565b60408051808201825260008082526020918201819052848152600180835283822073ffffffffffffffffffffffffffffffffffffffff861683528352908390208351808501909452805484520154908201525b92915050565b6102a46040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081525090565b600282815481106102b7576102b7610d40565b60009182526020918290206040805160a0810182526005909302909101805473ffffffffffffffffffffffffffffffffffffffff16835260018101549383019390935260028301549082015260038201546060820152600490910154608082015292915050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b600092835260016020818152604080862073ffffffffffffffffffffffffffffffffffffffff90951686529381529290932081518155910151910155565b6103ea610a0a565b565b60005473ffffffffffffffffffffffffffffffffffffffff16331461046d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161039b565b806002838154811061048157610481610d40565b600091825260209182902083516005929092020180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90921691909117815590820151600182015560408201516002820155606082015160038201556080909101516004909101555050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610585576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161039b565b6002805460018101825560009190915281517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace600590920291820180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90921691909117905560208201517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf82015560408201517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad082015560608201517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad18201556080909101517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad290910155565b60005473ffffffffffffffffffffffffffffffffffffffff16331461072b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161039b565b6002818154811061073e5761073e610d40565b9060005260206000209060050201600101546000146107b9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4d4647533a20506f6f6c20697320616374697665000000000000000000000000604482015260640161039b565b600280546107c990600190610d6f565b815481106107d9576107d9610d40565b9060005260206000209060050201600282815481106107fa576107fa610d40565b60009182526020909120825460059092020180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091178155600180830154908201556002808301548183015560038084015490830155600492830154929091019190915580548061088957610889610da9565b60008281526020812060057fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9093019283020180547fffffffffffffffffffffffff000000000000000000000000000000000000000016815560018101829055600281018290556003810182905560040155905550565b60005473ffffffffffffffffffffffffffffffffffffffff163314610981576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161039b565b73ffffffffffffffffffffffffffffffffffffffff81166109fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a206e6577206f776e65722069732061646472657373283029604482015260640161039b565b610a0781610a91565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610a8b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161039b565b6103ea60005b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b73ffffffffffffffffffffffffffffffffffffffff81168114610a0757600080fd5b60008060408385031215610b3b57600080fd5b823591506020830135610b4d81610b06565b809150509250929050565b600060208284031215610b6a57600080fd5b5035919050565b60008060008385036080811215610b8757600080fd5b843593506020850135610b9981610b06565b925060407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc082011215610bcb57600080fd5b506040516040810181811067ffffffffffffffff82111715610c16577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604090815285013581526060909401356020850152509093909250565b600060a08284031215610c4557600080fd5b60405160a0810181811067ffffffffffffffff82111715610c8f577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040529050808235610ca081610b06565b80825250602083013560208201526040830135604082015260608301356060820152608083013560808201525092915050565b60008060c08385031215610ce657600080fd5b82359150610cf78460208501610c33565b90509250929050565b600060a08284031215610d1257600080fd5b610d1c8383610c33565b9392505050565b600060208284031215610d3557600080fd5b8135610d1c81610b06565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b81810381811115610256577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea264697066735822122085af7d8e90840182707d20d2604311dde29af723774efa4aa7778b66b884066064736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100be5760003560e01c806391f317e411610076578063b3944d521161005b578063b3944d52146101cc578063de781094146101dd578063f2fde38b146101f057600080fd5b806391f317e4146101a657806393bb3d4f146101b957600080fd5b80633224e6c9116100a75780633224e6c914610161578063715018a6146101765780638da5cb5b1461017e57600080fd5b80631069f3b5146100c35780632f380b35146100f6575b600080fd5b6100d66100d1366004610b28565b610203565b604080518251815260209283015192810192909252015b60405180910390f35b610109610104366004610b58565b61025c565b6040516100ed9190600060a08201905073ffffffffffffffffffffffffffffffffffffffff83511682526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b61017461016f366004610b71565b61031e565b005b6101746103e2565b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ed565b6101746101b4366004610cd3565b6103ec565b6101746101c7366004610d00565b610504565b6002546040519081526020016100ed565b6101746101eb366004610b58565b6106aa565b6101746101fe366004610d23565b610900565b60408051808201825260008082526020918201819052848152600180835283822073ffffffffffffffffffffffffffffffffffffffff861683528352908390208351808501909452805484520154908201525b92915050565b6102a46040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081525090565b600282815481106102b7576102b7610d40565b60009182526020918290206040805160a0810182526005909302909101805473ffffffffffffffffffffffffffffffffffffffff16835260018101549383019390935260028301549082015260038201546060820152600490910154608082015292915050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b600092835260016020818152604080862073ffffffffffffffffffffffffffffffffffffffff90951686529381529290932081518155910151910155565b6103ea610a0a565b565b60005473ffffffffffffffffffffffffffffffffffffffff16331461046d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161039b565b806002838154811061048157610481610d40565b600091825260209182902083516005929092020180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90921691909117815590820151600182015560408201516002820155606082015160038201556080909101516004909101555050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610585576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161039b565b6002805460018101825560009190915281517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace600590920291820180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90921691909117905560208201517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf82015560408201517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad082015560608201517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad18201556080909101517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad290910155565b60005473ffffffffffffffffffffffffffffffffffffffff16331461072b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161039b565b6002818154811061073e5761073e610d40565b9060005260206000209060050201600101546000146107b9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4d4647533a20506f6f6c20697320616374697665000000000000000000000000604482015260640161039b565b600280546107c990600190610d6f565b815481106107d9576107d9610d40565b9060005260206000209060050201600282815481106107fa576107fa610d40565b60009182526020909120825460059092020180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091178155600180830154908201556002808301548183015560038084015490830155600492830154929091019190915580548061088957610889610da9565b60008281526020812060057fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9093019283020180547fffffffffffffffffffffffff000000000000000000000000000000000000000016815560018101829055600281018290556003810182905560040155905550565b60005473ffffffffffffffffffffffffffffffffffffffff163314610981576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161039b565b73ffffffffffffffffffffffffffffffffffffffff81166109fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a206e6577206f776e65722069732061646472657373283029604482015260640161039b565b610a0781610a91565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610a8b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161039b565b6103ea60005b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b73ffffffffffffffffffffffffffffffffffffffff81168114610a0757600080fd5b60008060408385031215610b3b57600080fd5b823591506020830135610b4d81610b06565b809150509250929050565b600060208284031215610b6a57600080fd5b5035919050565b60008060008385036080811215610b8757600080fd5b843593506020850135610b9981610b06565b925060407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc082011215610bcb57600080fd5b506040516040810181811067ffffffffffffffff82111715610c16577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604090815285013581526060909401356020850152509093909250565b600060a08284031215610c4557600080fd5b60405160a0810181811067ffffffffffffffff82111715610c8f577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040529050808235610ca081610b06565b80825250602083013560208201526040830135604082015260608301356060820152608083013560808201525092915050565b60008060c08385031215610ce657600080fd5b82359150610cf78460208501610c33565b90509250929050565b600060a08284031215610d1257600080fd5b610d1c8383610c33565b9392505050565b600060208284031215610d3557600080fd5b8135610d1c81610b06565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b81810381811115610256577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea264697066735822122085af7d8e90840182707d20d2604311dde29af723774efa4aa7778b66b884066064736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "transferOwnership(address)": {
        "params": {
          "newOwner": "The new owner of the contract."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "OwnershipTransferred(address,address)": {
        "notice": "Emitted when ownership is moved from one address to another."
      }
    },
    "kind": "user",
    "methods": {
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "notice": "Leaves the contract without owner. Can only be called by the current owner. This is a dangerous call be aware of the consequences"
      },
      "transferOwnership(address)": {
        "notice": "Transfers ownership of the contract to a new address. Emits an [`OwnershipTransferred`](#ownershiptransferred) event indicating the transfered ownership. Requirements: - Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/MagneticFieldGeneratorStore.sol:MagneticFieldGeneratorStore",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9087,
        "contract": "contracts/MagneticFieldGeneratorStore.sol:MagneticFieldGeneratorStore",
        "label": "_userInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)10675_storage))"
      },
      {
        "astId": 9091,
        "contract": "contracts/MagneticFieldGeneratorStore.sol:MagneticFieldGeneratorStore",
        "label": "_poolInfo",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(PoolInfo)10668_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)10668_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)10668_storage",
        "encoding": "dynamic_array",
        "label": "struct PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)209": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(UserInfo)10675_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)10675_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)10675_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)10675_storage)"
      },
      "t_struct(PoolInfo)10668_storage": {
        "encoding": "inplace",
        "label": "struct PoolInfo",
        "members": [
          {
            "astId": 10659,
            "contract": "contracts/MagneticFieldGeneratorStore.sol:MagneticFieldGeneratorStore",
            "label": "lpToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)209"
          },
          {
            "astId": 10661,
            "contract": "contracts/MagneticFieldGeneratorStore.sol:MagneticFieldGeneratorStore",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10663,
            "contract": "contracts/MagneticFieldGeneratorStore.sol:MagneticFieldGeneratorStore",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10665,
            "contract": "contracts/MagneticFieldGeneratorStore.sol:MagneticFieldGeneratorStore",
            "label": "accFermionPerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 10667,
            "contract": "contracts/MagneticFieldGeneratorStore.sol:MagneticFieldGeneratorStore",
            "label": "initialLock",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(UserInfo)10675_storage": {
        "encoding": "inplace",
        "label": "struct UserInfo",
        "members": [
          {
            "astId": 10672,
            "contract": "contracts/MagneticFieldGeneratorStore.sol:MagneticFieldGeneratorStore",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10674,
            "contract": "contracts/MagneticFieldGeneratorStore.sol:MagneticFieldGeneratorStore",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
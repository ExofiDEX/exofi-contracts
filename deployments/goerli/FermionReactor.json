{
  "address": "0x3D239860aF8B965FB2C3bd5837930d9eC85af2E8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lowerLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "upperLimit",
          "type": "uint256"
        },
        {
          "internalType": "contract IFermion",
          "name": "fermion",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fermionAmount",
          "type": "uint256"
        }
      ],
      "name": "Buy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "buyFermion",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFermionAddress",
      "outputs": [
        {
          "internalType": "contract IFermion",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLowerEthLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUpperEthLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "transferOtherERC20Token",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xaaef18cd7183519f331fec113631f67da84f3360e18374471990200d569e0c9c",
  "receipt": {
    "to": null,
    "from": "0x1799e996EC140dC66680bb6e6AC331e40B827fe1",
    "contractAddress": "0x3D239860aF8B965FB2C3bd5837930d9eC85af2E8",
    "transactionIndex": 88,
    "gasUsed": "1084365",
    "logsBloom": "0x
    "blockHash": "0x0827f51e5e46a590a081573bcb4fbb1da27844dfb8151cd6a9eeefbd36206f9d",
    "transactionHash": "0xaaef18cd7183519f331fec113631f67da84f3360e18374471990200d569e0c9c",
    "logs": [
      {
        "transactionIndex": 88,
        "blockNumber": 7826666,
        "transactionHash": "0xaaef18cd7183519f331fec113631f67da84f3360e18374471990200d569e0c9c",
        "address": "0x3D239860aF8B965FB2C3bd5837930d9eC85af2E8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001799e996ec140dc66680bb6e6ac331e40b827fe1"
        ],
        "data": "0x",
        "logIndex": 241,
        "blockHash": "0x0827f51e5e46a590a081573bcb4fbb1da27844dfb8151cd6a9eeefbd36206f9d"
      }
    ],
    "blockNumber": 7826666,
    "cumulativeGasUsed": "11170929",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "100000000000000000",
    "3000000000000000000",
    "0x6D4e23C1B39F42a676BCE13E3b2b0CC6ea7F405E",
    "12000"
  ],
  "numDeployments": 1,
  "solcInputHash": "826e7e16b5d1f5f6401540a40e57637d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lowerLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperLimit\",\"type\":\"uint256\"},{\"internalType\":\"contract IFermion\",\"name\":\"fermion\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fermionAmount\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"buyFermion\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFermionAddress\",\"outputs\":[{\"internalType\":\"contract IFermion\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLowerEthLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUpperEthLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"transferOtherERC20Token\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The current owner.\"}},\"renounceOwnership()\":{\"details\":\"Sets the zero address as the new contract owner.\"},\"transferOwnership(address)\":{\"params\":{\"newOwner\":\"The new owner of the contract.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when ownership is moved from one address to another.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Returns the current owner.\"},\"renounceOwnership()\":{\"notice\":\"Leaves the contract without an owner. It will not be possible to call {onlyOwner} functions anymore. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner. Emits an [`OwnershipTransferred`](#ownershiptransferred) event indicating the renounced ownership. Requirements: - Can only be called by the current owner. \"},\"transferOwnership(address)\":{\"notice\":\"Transfers ownership of the contract to a new address. Emits an [`OwnershipTransferred`](#ownershiptransferred) event indicating the transfered ownership. Requirements: - Can only be called by the current owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FermionReactor.sol\":\"FermionReactor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500000},\"remappings\":[]},\"sources\":{\"@exoda/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/access/IOwnable.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @title Ownable contract module.\\n * @author Ing. Michael Goldfinger\\n * @notice Contract module which provides a basic access control mechanism, where\\n * there is an address (an owner) that can be granted exclusive access to specific functions.\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with the function {transferOwnership(address newOwner)}\\\".\\n * @dev This module is used through inheritance. It will make available the modifier\\n * {onlyOwner}, which can be applied to your functions to restrict their use to the owner.\\n */\\ncontract Ownable is IOwnable, Context\\n{\\n\\taddress private _owner;\\n\\n\\t/**\\n\\t* @notice Throws if called by any account other than the owner.\\n\\t*/\\n\\tmodifier onlyOwner()\\n\\t{\\n\\t\\trequire(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Initializes the contract setting the deployer as the initial owner.\\n\\t* \\n\\t* Emits an {OwnershipTransferred} event indicating the initially set ownership.\\n\\t*/\\n\\tconstructor()\\n\\t{\\n\\t\\t_transferOwnership(_msgSender());\\n\\t}\\n\\n\\t/// @inheritdoc IOwnable\\n\\tfunction renounceOwnership() override public virtual onlyOwner \\n\\t{\\n\\t\\t_transferOwnership(address(0));\\n\\t}\\n\\n\\t/// @inheritdoc IOwnable\\n\\tfunction transferOwnership(address newOwner) override public virtual onlyOwner\\n\\t{\\n\\t\\trequire(newOwner != address(0), \\\"Ownable: new owner is address(0)\\\");\\n\\t\\t_transferOwnership(newOwner);\\n\\t}\\n\\n\\t/// @inheritdoc IOwnable\\n\\tfunction owner() public view virtual override returns (address)\\n\\t{\\n\\t\\treturn _owner;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Transfers ownership of the contract to a new address.\\n\\t* Internal function without access restriction.\\n\\t* \\n\\t* Emits an {OwnershipTransferred} event indicating the transfered ownership.\\n\\t*/\\n\\tfunction _transferOwnership(address newOwner) internal virtual\\n\\t{\\n\\t\\taddress oldOwner = _owner;\\n\\t\\t_owner = newOwner;\\n\\t\\temit OwnershipTransferred(oldOwner, newOwner);\\n\\t}\\n}\\n\",\"keccak256\":\"0x2a1355eddd79ce931f562edbc248e876dc143cf0b53a087fff04c6d9aca69c18\",\"license\":\"MIT\"},\"@exoda/contracts/interfaces/access/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Ownable interface.\\n/// @author Ing. Michael Goldfinger\\n/// @notice This interface contains all visible functions and events for the Ownable contract module.\\ninterface IOwnable\\n{\\n\\t/// @notice Emitted when ownership is moved from one address to another.\\n\\t/// @param previousOwner (indexed) The owner of the contract until now.\\n\\t/// @param newOwner (indexed) The new owner of the contract.\\n\\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\t/**\\n\\t * @notice Leaves the contract without an owner. It will not be possible to call {onlyOwner} functions anymore.\\n\\t *\\n\\t * NOTE: Renouncing ownership will leave the contract without an owner,\\n\\t * thereby removing any functionality that is only available to the owner.\\n\\t *\\n\\t * Emits an [`OwnershipTransferred`](#ownershiptransferred) event indicating the renounced ownership.\\n\\t *\\n\\t * Requirements:\\n\\t * - Can only be called by the current owner.\\n\\t * \\n\\t * @dev Sets the zero address as the new contract owner.\\n\\t */\\n\\tfunction renounceOwnership() external;\\n\\n\\t/**\\n\\t * @notice Transfers ownership of the contract to a new address.\\n\\t *\\n\\t * Emits an [`OwnershipTransferred`](#ownershiptransferred) event indicating the transfered ownership.\\n\\t *\\n\\t * Requirements:\\n\\t * - Can only be called by the current owner.\\n\\t *\\n\\t * @param newOwner The new owner of the contract.\\n\\t */\\n\\tfunction transferOwnership(address newOwner) external;\\n\\n\\t/// @notice Returns the current owner.\\n\\t/// @return The current owner.\\n\\tfunction owner() external view returns (address);\\n}\",\"keccak256\":\"0xfec11d14cb2fce6cec8e81b199452a616199a58763a8497e37212f856f4a4e15\",\"license\":\"MIT\"},\"@exoda/contracts/interfaces/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC20 interface.\\n * @author Ing. Michael Goldfinger\\n * @notice Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20\\n{\\n\\t/**\\n\\t * @notice Emitted when the allowance of a {spender} for an {owner} is set to a new value.\\n\\t *\\n\\t * NOTE: {value} may be zero.\\n\\t * @param owner (indexed) The owner of the tokens.\\n\\t * @param spender (indexed) The spender for the tokens.\\n\\t * @param value The amount of tokens that got an allowance.\\n\\t */\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n\\t/**\\n\\t * @notice Emitted when {value} tokens are moved from one address {from} to another {to}.\\n\\t *\\n\\t * NOTE: {value} may be zero.\\n\\t * @param from (indexed) The origin of the transfer.\\n\\t * @param to (indexed) The target of the transfer.\\n\\t * @param value The amount of tokens that got transfered.\\n\\t */\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\t/**\\n\\t* @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n\\t*\\n\\t* Returns a boolean value indicating whether the operation succeeded.\\n\\t*\\n\\t* IMPORTANT: Beware that changing an allowance with this method brings the risk\\n\\t* that someone may use both the old and the new allowance by unfortunate\\n\\t* transaction ordering. One possible solution to mitigate this race\\n\\t* condition is to first reduce the spender's allowance to 0 and set the\\n\\t* desired value afterwards:\\n\\t* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\t*\\n\\t* Emits an {Approval} event.\\n\\t*/\\n\\tfunction approve(address spender, uint256 amount) external returns (bool);\\n\\n\\t/**\\n\\t* @dev Moves `amount` tokens from the caller's account to `to`.\\n\\t*\\n\\t* Returns a boolean value indicating whether the operation succeeded.\\n\\t*\\n\\t* Emits a {Transfer} event.\\n\\t*/\\n\\tfunction transfer(address to, uint256 amount) external returns (bool);\\n\\n\\t/**\\n\\t* @dev Moves `amount` tokens from `from` to `to` using the allowance mechanism.\\n\\t* `amount` is then deducted from the caller's allowance.\\n\\t*\\n\\t* Returns a boolean value indicating whether the operation succeeded.\\n\\t*\\n\\t* Emits a {Transfer} event.\\n\\t*/\\n\\tfunction transferFrom(address from, address to, uint256 amount) external returns (bool);\\n\\n\\t/**\\n\\t* @dev Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}.\\n\\t* This is zero by default.\\n\\t*\\n\\t* This value changes when {approve}, {increaseAllowance}, {decreseAllowance} or {transferFrom} are called.\\n\\t*/\\n\\tfunction allowance(address owner, address spender) external view returns (uint256);\\n\\n\\t/**\\n\\t* @dev Returns the amount of tokens owned by `account`.\\n\\t*/\\n\\tfunction balanceOf(address account) external view returns (uint256);\\n\\n\\t/**\\n\\t* @dev Returns the amount of tokens in existence.\\n\\t*/\\n\\tfunction totalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4f3061b0e883d9105a5ba012c092ed76b8bd8d7866274e084028df9a7d65d70e\",\"license\":\"MIT\"},\"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20AltApprove.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title ERC20Metadata interface.\\n/// @author Ing. Michael Goldfinger\\n/// @notice Interface for an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.\\n/// @dev This is not part of the ERC20 specification.\\ninterface IERC20AltApprove\\n{\\n\\t/**\\n\\t* @notice Atomically decreases the allowance granted to `spender` by the caller.\\n\\t*\\n\\t* This is an alternative to {approve} that can be used as a mitigation for\\n\\t* problems described in {IERC20-approve}.\\n\\t*\\n\\t* Emits an {Approval} event indicating the updated allowance.\\n\\t*\\n\\t* Requirements:\\n\\t*\\n\\t* - `spender` cannot be the zero address.\\n\\t* - `spender` must have allowance for the caller of at least\\n\\t* `subtractedValue`.\\n\\t*/\\n\\tfunction decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n\\t/**\\n\\t* @notice Atomically increases the allowance granted to `spender` by the caller.\\n\\t*\\n\\t* This is an alternative to {approve} that can be used as a mitigation for\\n\\t* problems described in {IERC20-approve}.\\n\\t*\\n\\t* Emits an {Approval} event indicating the updated allowance.\\n\\t*\\n\\t* Requirements:\\n\\t*\\n\\t* - `spender` cannot be the zero address.\\n\\t*/\\n\\tfunction increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n}\\n\",\"keccak256\":\"0xf5d46a19d6bbf90f6ff1fcaae366d803b9716d9f87f6ca94c73316de6769c71a\",\"license\":\"MIT\"},\"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @title ERC20Burnable interface.\\n * @author Ing. Michael Goldfinger\\n * @notice Interface for the extension of {ERC20} that allows token holders to destroy both their own tokens\\n * and those that they have an allowance for.\\n */\\ninterface IERC20Burnable is IERC20\\n{\\n\\t/**\\n\\t* @notice Destroys {amount} tokens from the caller.\\n\\t*\\n\\t* Emits an {Transfer} event.\\n\\t*\\n\\t* @param amount The {amount} of tokens that should be destroyed.\\n\\t*/\\n\\tfunction burn(uint256 amount) external;\\n\\n\\t/**\\n\\t* @notice Destroys {amount} tokens from {account}, deducting from the caller's allowance.\\n\\t*\\n\\t* Emits an {Approval} and an {Transfer} event.\\n\\t*\\n\\t* @param account The {account} where the tokens should be destroyed.\\n\\t* @param amount The {amount} of tokens that should be destroyed.\\n\\t*/\\n\\tfunction burnFrom(address account, uint256 amount) external;\\n}\",\"keccak256\":\"0xd133cbf5bc779ea615e0acec4ce7ea27be78963bd5f7a37a90d58c50d85cc0a9\",\"license\":\"MIT\"},\"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/// @title ERC20Metadata interface.\\n/// @author Ing. Michael Goldfinger\\n/// @notice Interface for the optional metadata functions from the ERC20 standard.\\ninterface IERC20Metadata is IERC20\\n{\\n\\t/// @notice Returns the name of the token.\\n\\t/// @return The token name.\\n\\tfunction name() external view returns (string memory);\\n\\n\\t/// @notice Returns the symbol of the token.\\n\\t/// @return The symbol for the token.\\n\\tfunction symbol() external view returns (string memory);\\n\\n\\t/// @notice Returns the decimals of the token.\\n\\t/// @return The decimals for the token.\\n\\tfunction decimals() external pure returns (uint8);\\n}\\n\",\"keccak256\":\"0x5a794350da4c10ee1fe18ca092e8984cf4ca122f71519452cd0b6b77d9dffbae\",\"license\":\"MIT\"},\"@exoda/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../interfaces/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20\\n{\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal\\n    {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal\\n    {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal\\n    {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \\\"SafeERC20: exploitable approve\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal\\n    {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal\\n    {\\n        unchecked\\n        {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: reduced allowance <0\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private\\n    {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0)\\n        {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 call failed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x00fc0fe2fe04c3f13fe89d84893559b5c7cd0d2f05fbc8cbbec86dbf187c5b19\",\"license\":\"MIT\"},\"@exoda/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address\\n{\\n    /* solhint-disable max-line-length */\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n     /* solhint-enable max-line-length */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory)\\n    {\\n        return functionCallWithValue(target, data, 0, \\\"Address: call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory)\\n    {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory)\\n    {\\n        return functionCallWithValue(target, data, value, \\\"Address: call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory)\\n    {\\n        require(address(this).balance >= value, \\\"Address: balance to low for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) internal pure returns (bytes memory)\\n    {\\n        if (success)\\n        {\\n            return returndata;\\n        } else\\n        {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly\\n                {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            }\\n            else\\n            {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x604778c14ede98c4774b74bcc43f066778c602371bc5a603e7477d95d25546d1\",\"license\":\"MIT\"},\"@exoda/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n* @notice Provides information about the current execution context, including the\\n* sender of the transaction and its data. While these are generally available\\n* via msg.sender and msg.data, they should not be accessed in such a direct\\n* manner, since when dealing with meta-transactions the account sending and\\n* paying for execution may not be the actual sender (as far as an application\\n* is concerned).\\n*\\n* This contract is only required for intermediate, library-like contracts.\\n*/\\nabstract contract Context\\n{\\n\\t/// @notice returns the sender of the transaction.\\n\\t/// @return The sender of the transaction.\\n\\tfunction _msgSender() internal view virtual returns (address)\\n\\t{\\n\\t\\treturn msg.sender;\\n\\t}\\n\\n\\t/// @notice returns the data of the transaction.\\n\\t/// @return The data of the transaction.\\n\\tfunction _msgData() internal view virtual returns (bytes calldata)\\n\\t{\\n\\t\\treturn msg.data;\\n\\t}\\n}\\n\",\"keccak256\":\"0xce68a1ae85d9c12dba94f20a2af4f1eeeb187c4631e663a7d8181bd5cbf39035\",\"license\":\"MIT\"},\"contracts/FermionReactor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@exoda/contracts/access/Ownable.sol\\\";\\nimport \\\"@exoda/contracts/interfaces/token/ERC20/IERC20.sol\\\";\\nimport \\\"@exoda/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IFermionReactor.sol\\\";\\nimport \\\"./interfaces/IFermion.sol\\\";\\n\\ncontract FermionReactor is IFermionReactor, Ownable\\n{\\n\\tuint256 private immutable _lowerLimit;\\n\\tuint256 private immutable _upperLimit;\\n\\tuint256 private immutable _rate;\\n\\tIFermion private immutable _fermion;\\n\\tbool private _active;\\n\\n\\tconstructor(uint256 lowerLimit, uint256 upperLimit, IFermion fermion, uint256 rate) Ownable()\\n\\t{\\n\\t\\trequire(rate > 0, \\\"FR: Rate < 0\\\");\\n\\t\\trequire(upperLimit > lowerLimit, \\\"FR: upperLimit <= lowerLimit\\\");\\n\\t\\t_lowerLimit = lowerLimit;\\n\\t\\t_upperLimit = upperLimit;\\n\\t\\t_rate = rate;\\n\\t\\t_fermion = fermion;\\n\\t\\t_active = true;\\n\\t}\\n\\n\\tfunction buyFermion() override external payable\\n\\t{\\n\\t\\trequire(_active, \\\"FR: Contract is not active\\\");\\n\\t\\tuint256 amountETH = msg.value;\\n\\t\\trequire(amountETH >= _lowerLimit, \\\"FR: Insufficient ETH\\\");\\n\\t\\trequire(amountETH <= _upperLimit, \\\"FR: ETH exceeds upper Limit\\\");\\n\\t\\t// Get available Fermions\\n\\t\\tuint256 fAvailable = _fermion.balanceOf(address(this));\\n\\t\\t// Calculate Fermion Amount\\n\\t\\tuint256 fAmount = amountETH * _rate;\\n\\t\\t// Check if enought Fermions\\n\\t\\tif(fAvailable < fAmount)\\n\\t\\t{\\n\\t\\t\\tunchecked\\n\\t\\t\\t{\\n\\t\\t\\t\\t// If not enouth use max possible amount of Fermions and refund unused eth\\n\\t\\t\\t\\tfAmount = fAvailable;\\n\\t\\t\\t\\tamountETH = fAmount / _rate;\\n\\t\\t\\t\\t// refund unused eth\\n\\t\\t\\t\\t_safeTransferETH(_msgSender(), (msg.value - amountETH));\\n\\t\\t\\t\\t_active = false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Transfer ETH to owner\\n\\t\\t_safeTransferETH(owner(), amountETH);\\n\\t\\t// Transfer Fermions to caller\\n\\t\\tSafeERC20.safeTransfer(_fermion, _msgSender(), fAmount);\\n\\t\\temit Buy(_msgSender(), amountETH, fAmount);\\n\\t}\\n\\n\\tfunction disable() override external onlyOwner\\n\\t{\\n\\t\\t_active = false;\\n\\t\\tuint256 fAvailable = _fermion.balanceOf(address(this));\\n\\t\\tSafeERC20.safeTransfer(_fermion, owner(), fAvailable);\\n\\t}\\n\\n\\tfunction transferOtherERC20Token(IERC20 token) override external onlyOwner returns (bool)\\n\\t{\\n\\t\\trequire(token != _fermion, \\\"FR: Fermion can not be removed.\\\");\\n\\t\\treturn token.transfer(owner(), token.balanceOf(address(this)));\\n\\t}\\n\\n\\tfunction getFermionAddress() override external view returns(IFermion)\\n\\t{\\n\\t\\treturn _fermion;\\n\\t}\\n\\n\\tfunction getLowerEthLimit() override external view returns(uint256)\\n\\t{\\n\\t\\treturn _lowerLimit;\\n\\t}\\n\\n\\tfunction getRate() override external view returns(uint256)\\n\\t{\\n\\t\\treturn _rate;\\n\\t}\\n\\n\\tfunction getUpperEthLimit() override external view returns(uint256)\\n\\t{\\n\\t\\treturn _upperLimit;\\n\\t}\\n\\n\\tfunction isActive() override external view returns(bool)\\n\\t{\\n\\t\\treturn _active;\\n\\t}\\n\\n\\tfunction _safeTransferETH(address to, uint256 value) private\\n\\t{\\n\\t\\t// solhint-disable-next-line avoid-low-level-calls\\n\\t\\t(bool success, ) = to.call{value: value}(new bytes(0));\\n\\t\\trequire(success, \\\"FR: ETH transfer failed\\\");\\n\\t}\\n}\",\"keccak256\":\"0xe36ee4c2c5b8ec899530cf548702bb27dfb4c4d8d11987ab53bfa9b068652c4e\",\"license\":\"MIT\"},\"contracts/interfaces/IFermion.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@exoda/contracts/interfaces/access/IOwnable.sol\\\";\\nimport \\\"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20AltApprove.sol\\\";\\nimport \\\"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Burnable.sol\\\";\\nimport \\\"@exoda/contracts/interfaces/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the Fermion token.\\n */\\ninterface IFermion is IOwnable, IERC20AltApprove, IERC20Metadata, IERC20Burnable\\n{\\n\\t/**\\n\\t* @dev Mints `amount` tokens to `account`.\\n\\t*\\n\\t* Emits a {Transfer} event with `from` set to the zero address.\\n\\t*/\\n\\tfunction mint(address to, uint256 amount) external;\\n}\",\"keccak256\":\"0x852883ff9bae37901e94ff09229afc2fe771af21300369de42b9b5ebaf000f40\",\"license\":\"MIT\"},\"contracts/interfaces/IFermionReactor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@exoda/contracts/interfaces/access/IOwnable.sol\\\";\\nimport \\\"@exoda/contracts/interfaces/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IFermion.sol\\\";\\nimport \\\"./IMagneticFieldGenerator.sol\\\";\\n\\ninterface IFermionReactor is IOwnable\\n{\\n\\tevent Buy(address indexed user, uint256 ethAmount, uint256 fermionAmount);\\n\\n\\tfunction buyFermion() external payable;\\n\\t\\n\\tfunction disable() external;\\n\\tfunction transferOtherERC20Token(IERC20 token) external returns(bool);\\n\\n\\tfunction getFermionAddress() external view returns(IFermion);\\n\\tfunction getLowerEthLimit() external view returns(uint256);\\n\\tfunction getRate() external view returns(uint256);\\n\\tfunction getUpperEthLimit() external view returns(uint256);\\n\\tfunction isActive() external view returns(bool);\\n}\",\"keccak256\":\"0x498c347b738978f1a454473b6230b7a1ebcfe111d151ef5d3fb46591ddbb8ac4\",\"license\":\"MIT\"},\"contracts/interfaces/IMagneticFieldGenerator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@exoda/contracts/interfaces/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IFermion.sol\\\";\\nimport \\\"./IMigratorDevice.sol\\\";\\nimport \\\"./IMagneticFieldGeneratorStore.sol\\\";\\n\\ninterface IMagneticFieldGenerator\\n{\\n\\tevent Deposit(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\\n\\tevent Harvest(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\\n\\tevent EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\\n\\tevent LogPoolAddition(uint256 indexed pid, uint256 allocPoint, IERC20 indexed lpToken);\\n\\tevent LogSetPool(uint256 indexed pid, uint256 allocPoint);\\n\\tevent LogUpdatePool(uint256 indexed pid, uint256 lastRewardBlock, uint256 lpSupply, uint256 accFermionPerShare);\\n\\tevent Migrate(uint256 indexed pid, uint256 balance, IERC20 indexed fromToken, IERC20 indexed toToken);\\n\\tevent Withdraw(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\\n\\n\\t/// @notice Add a new LP to the pool. Can only be called by the owner.\\n\\t/// WARNING DO NOT add the same LP token more than once. Rewards will be messed up if you do.\\n\\t/// @param allocPoint AP of the new pool.\\n\\t/// @param lpToken Address of the LP ERC-20 token.\\n\\t/// @param lockPeriod Number of Blocks the pool should disallow withdraws of all kind.\\n\\tfunction add(uint256 allocPoint, IERC20 lpToken, uint256 lockPeriod) external;\\n\\tfunction deposit(uint256 pid, uint256 amount, address to) external;\\n\\tfunction disablePool(uint256 pid) external;\\n\\tfunction emergencyWithdraw(uint256 pid, address to) external;\\n\\tfunction handOverToSuccessor(IMagneticFieldGenerator successor) external;\\n\\tfunction harvest(uint256 pid, address to) external;\\n\\tfunction massUpdatePools() external;\\n\\tfunction migrate(uint256 pid) external;\\n\\tfunction renounceOwnership() external;\\n\\tfunction set(uint256 pid, uint256 allocPoint) external;\\n\\tfunction setFermionPerBlock(uint256 fermionPerBlock) external;\\n\\tfunction setMigrator(IMigratorDevice migratorContract) external;\\n\\tfunction setStore(IMagneticFieldGeneratorStore storeContract) external;\\n\\tfunction transferOwnership(address newOwner) external;\\n\\tfunction updatePool(uint256 pid) external returns(PoolInfo memory);\\n\\tfunction withdraw(uint256 pid, uint256 amount, address to) external;\\n\\tfunction withdrawAndHarvest(uint256 pid, uint256 amount, address to) external;\\n\\n\\tfunction getFermionContract() external view returns (IFermion);\\n\\tfunction getFermionPerBlock() external view returns (uint256);\\n\\tfunction getStartBlock() external view returns (uint256);\\n\\tfunction migrator() external view returns(IMigratorDevice);\\n\\tfunction owner() external view returns (address);\\n\\tfunction pendingFermion(uint256 pid, address user) external view returns (uint256);\\n\\tfunction poolInfo(uint256 pid) external view returns (PoolInfo memory);\\n\\tfunction poolLength() external view returns (uint256);\\n\\tfunction successor() external view returns (IMagneticFieldGenerator);\\n\\tfunction totalAllocPoint() external view returns (uint256);\\n\\tfunction userInfo(uint256 pid, address user) external view returns (UserInfo memory);\\n}\",\"keccak256\":\"0x2d1f4b549e81f164f78a48984f7510715fc80da15523c46f84679eff3d77ee70\",\"license\":\"MIT\"},\"contracts/interfaces/IMagneticFieldGeneratorStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@exoda/contracts/interfaces/access/IOwnable.sol\\\";\\nimport \\\"../structs/PoolInfo.sol\\\";\\nimport \\\"../structs/UserInfo.sol\\\";\\n\\ninterface IMagneticFieldGeneratorStore is IOwnable\\n{\\n\\tfunction deletePoolInfo(uint256 pid) external;\\n\\tfunction newPoolInfo(PoolInfo memory pi) external;\\n\\tfunction updateUserInfo(uint256 pid, address user, UserInfo memory ui) external;\\n\\tfunction updatePoolInfo(uint256 pid, PoolInfo memory pi) external;\\n\\tfunction getPoolInfo(uint256 pid) external view returns (PoolInfo memory);\\n\\tfunction getPoolLength() external view returns (uint256);\\n\\tfunction getUserInfo(uint256 pid, address user) external view returns (UserInfo memory);\\n\\t\\n}\\n\",\"keccak256\":\"0xa9f3fc689f9d24d99e3ae4fc0efc7769b864af577cb7cc61dbd908edb53df06c\",\"license\":\"MIT\"},\"contracts/interfaces/IMigratorDevice.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@exoda/contracts/interfaces/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMigratorDevice\\n{\\n\\t// Perform LP token migration from legacy UniswapV2 to Exofi.\\n\\t// Take the current LP token address and return the new LP token address.\\n\\t// Migrator should have full access to the caller's LP token.\\n\\t// Return the new LP token address.\\n\\t//\\n\\t// XXX Migrator must have allowance access to UniswapV2 LP tokens.\\n\\t// Exofi must mint EXACTLY the same amount of ENERGY tokens or\\n\\t// else something bad will happen. Traditional UniswapV2 does not\\n\\t// do that so be careful!\\n\\tfunction migrate(IERC20 token) external returns (address);\\n\\n\\tfunction beneficiary() external view returns (address);\\n}\",\"keccak256\":\"0x55ce4e2f83d17506a7c663955bf0a80d2e1b140b9548eacb2413d413b3917e4d\",\"license\":\"MIT\"},\"contracts/structs/PoolInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@exoda/contracts/interfaces/token/ERC20/IERC20.sol\\\";\\n\\n// Info of each pool.\\nstruct PoolInfo\\n{\\n\\tIERC20 lpToken; // Address of LP token contract.\\n\\tuint256 allocPoint; // How many allocation points assigned to this pool. FMNs to distribute per block.\\n\\tuint256 lastRewardBlock; // Last block number that FMNs distribution occurs.\\n\\tuint256 accFermionPerShare; // Accumulated FMNs per share, times _ACC_FERMION_PRECISSION. See below.\\n\\tuint256 initialLock; // Block until withdraw from the pool is not possible.\\n}\",\"keccak256\":\"0xe28c6e3b4aed034e9bfcfcda286aaf300534b2ab3ff734131e5a7e964e3c5011\",\"license\":\"MIT\"},\"contracts/structs/UserInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Info of each user.\\nstruct UserInfo\\n{\\n\\tuint256 amount; // How many LP tokens the user has provided.\\n\\tint256 rewardDebt; // Reward debt. See explanation below.\\n\\t//\\n\\t// We do some fancy math here. Basically, any point in time, the amount of FMNs\\n\\t// entitled to a user but is pending to be distributed is:\\n\\t//\\n\\t//   pending reward = (user.amount * pool.accFermionPerShare) - user.rewardDebt\\n\\t//\\n\\t// Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n\\t//   1. The pool's `accFermionPerShare` (and `lastRewardBlock`) gets updated.\\n\\t//   2. User receives the pending reward sent to his/her address.\\n\\t//   3. User's `amount` gets updated.\\n\\t//   4. User's `rewardDebt` gets updated.\\n}\",\"keccak256\":\"0x40542bfa81e1280604b323497d6dc0052031a21a0b927cfa48dfe24a1a27962c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61010060405234801561001157600080fd5b5060405161145d38038061145d83398101604081905261003091610152565b61003933610102565b6000811161007d5760405162461bcd60e51b815260206004820152600c60248201526b046523a2052617465203c20360a41b60448201526064015b60405180910390fd5b8383116100cc5760405162461bcd60e51b815260206004820152601c60248201527f46523a2075707065724c696d6974203c3d206c6f7765724c696d6974000000006044820152606401610074565b60809390935260a09190915260c0919091526001600160a01b031660e0526000805460ff60a01b1916600160a01b17905561019e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806000806080858703121561016857600080fd5b84516020860151604087015191955093506001600160a01b038116811461018e57600080fd5b6060959095015193969295505050565b60805160a05160c05160e0516112486102156000396000818160d001528181610374015281816103fb015281816104c6015281816108a601526109f40152600081816101d90152818161092f015261096201526000818161025401526107ed01526000818161017c015261076301526112486000f3fe6080604052600436106100bc5760003560e01c8063679aefce116100745780638da5cb5b1161004e5780638da5cb5b1461021a578063b9b53da614610245578063f2fde38b1461027857600080fd5b8063679aefce146101ca5780636d88ff3e146101fd578063715018a61461020557600080fd5b80632f2770db116100a55780632f2770db146101565780632fbf983f1461016d57806346403f2b146101aa57600080fd5b806309a5cf16146100c157806322f3e2d41461011a575b600080fd5b3480156100cd57600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b34801561012657600080fd5b5060005474010000000000000000000000000000000000000000900460ff165b6040519015158152602001610111565b34801561016257600080fd5b5061016b610298565b005b34801561017957600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b604051908152602001610111565b3480156101b657600080fd5b506101466101c53660046110bc565b610442565b3480156101d657600080fd5b507f000000000000000000000000000000000000000000000000000000000000000061019c565b61016b6106dc565b34801561021157600080fd5b5061016b610a59565b34801561022657600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff166100f0565b34801561025157600080fd5b507f000000000000000000000000000000000000000000000000000000000000000061019c565b34801561028457600080fd5b5061016b6102933660046110bc565b610ae6565b60005473ffffffffffffffffffffffffffffffffffffffff16331461031e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1681556040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa1580156103d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f491906110d9565b905061043f7f000000000000000000000000000000000000000000000000000000000000000061043960005473ffffffffffffffffffffffffffffffffffffffff1690565b83610bed565b50565b6000805473ffffffffffffffffffffffffffffffffffffffff1633146104c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610315565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610579576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f46523a204665726d696f6e2063616e206e6f742062652072656d6f7665642e006044820152606401610315565b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6105b460005473ffffffffffffffffffffffffffffffffffffffff1690565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8616906370a0823190602401602060405180830381865afa15801561061e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064291906110d9565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff909216600483015260248201526044016020604051808303816000875af11580156106b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d691906110f2565b92915050565b60005474010000000000000000000000000000000000000000900460ff16610760576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f46523a20436f6e7472616374206973206e6f74206163746976650000000000006044820152606401610315565b347f00000000000000000000000000000000000000000000000000000000000000008110156107eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f46523a20496e73756666696369656e74204554480000000000000000000000006044820152606401610315565b7f0000000000000000000000000000000000000000000000000000000000000000811115610875576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f46523a204554482065786365656473207570706572204c696d697400000000006044820152606401610315565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015610902573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092691906110d9565b905060006109547f000000000000000000000000000000000000000000000000000000000000000084611114565b9050808210156109c75750807f0000000000000000000000000000000000000000000000000000000000000000818161098f5761098f611152565b04925061099e33843403610c7f565b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690555b6109ef6109e960005473ffffffffffffffffffffffffffffffffffffffff1690565b84610c7f565b610a197f000000000000000000000000000000000000000000000000000000000000000033610439565b604080518481526020810183905233917f1cbc5ab135991bd2b6a4b034a04aa2aa086dac1371cb9b16b8b5e2ed6b036bed910160405180910390a2505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610ada576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610315565b610ae46000610d63565b565b60005473ffffffffffffffffffffffffffffffffffffffff163314610b67576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610315565b73ffffffffffffffffffffffffffffffffffffffff8116610be4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a206e6577206f776e657220697320616464726573732830296044820152606401610315565b61043f81610d63565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610c7a908490610dd8565b505050565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff8416908390604051610cb691906111a5565b60006040518083038185875af1925050503d8060008114610cf3576040519150601f19603f3d011682016040523d82523d6000602084013e610cf8565b606091505b5050905080610c7a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f46523a20455448207472616e73666572206661696c65640000000000000000006044820152606401610315565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610e3a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610ebe9092919063ffffffff16565b805190915015610c7a5780806020019051810190610e5891906110f2565b610c7a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f5361666545524332303a2045524332302063616c6c206661696c6564000000006044820152606401610315565b6060610ecd8484600085610ed7565b90505b9392505050565b606082471015610f43576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f416464726573733a2062616c616e636520746f206c6f7720666f722063616c6c6044820152606401610315565b73ffffffffffffffffffffffffffffffffffffffff85163b610fc1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610315565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610fea91906111a5565b60006040518083038185875af1925050503d8060008114611027576040519150601f19603f3d011682016040523d82523d6000602084013e61102c565b606091505b509150915061103c828286611047565b979650505050505050565b60608315611056575081610ed0565b8251156110665782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031591906111c1565b73ffffffffffffffffffffffffffffffffffffffff8116811461043f57600080fd5b6000602082840312156110ce57600080fd5b8135610ed08161109a565b6000602082840312156110eb57600080fd5b5051919050565b60006020828403121561110457600080fd5b81518015158114610ed057600080fd5b80820281158282048414176106d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60005b8381101561119c578181015183820152602001611184565b50506000910152565b600082516111b7818460208701611181565b9190910192915050565b60208152600082518060208401526111e0816040850160208701611181565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea26469706673582212202efe0b88c2ab207b16987a5be70d16de1e38f9948b775b9aa5dd13c7e1caa88f64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100bc5760003560e01c8063679aefce116100745780638da5cb5b1161004e5780638da5cb5b1461021a578063b9b53da614610245578063f2fde38b1461027857600080fd5b8063679aefce146101ca5780636d88ff3e146101fd578063715018a61461020557600080fd5b80632f2770db116100a55780632f2770db146101565780632fbf983f1461016d57806346403f2b146101aa57600080fd5b806309a5cf16146100c157806322f3e2d41461011a575b600080fd5b3480156100cd57600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b34801561012657600080fd5b5060005474010000000000000000000000000000000000000000900460ff165b6040519015158152602001610111565b34801561016257600080fd5b5061016b610298565b005b34801561017957600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b604051908152602001610111565b3480156101b657600080fd5b506101466101c53660046110bc565b610442565b3480156101d657600080fd5b507f000000000000000000000000000000000000000000000000000000000000000061019c565b61016b6106dc565b34801561021157600080fd5b5061016b610a59565b34801561022657600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff166100f0565b34801561025157600080fd5b507f000000000000000000000000000000000000000000000000000000000000000061019c565b34801561028457600080fd5b5061016b6102933660046110bc565b610ae6565b60005473ffffffffffffffffffffffffffffffffffffffff16331461031e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1681556040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa1580156103d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f491906110d9565b905061043f7f000000000000000000000000000000000000000000000000000000000000000061043960005473ffffffffffffffffffffffffffffffffffffffff1690565b83610bed565b50565b6000805473ffffffffffffffffffffffffffffffffffffffff1633146104c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610315565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610579576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f46523a204665726d696f6e2063616e206e6f742062652072656d6f7665642e006044820152606401610315565b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6105b460005473ffffffffffffffffffffffffffffffffffffffff1690565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8616906370a0823190602401602060405180830381865afa15801561061e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064291906110d9565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff909216600483015260248201526044016020604051808303816000875af11580156106b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d691906110f2565b92915050565b60005474010000000000000000000000000000000000000000900460ff16610760576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f46523a20436f6e7472616374206973206e6f74206163746976650000000000006044820152606401610315565b347f00000000000000000000000000000000000000000000000000000000000000008110156107eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f46523a20496e73756666696369656e74204554480000000000000000000000006044820152606401610315565b7f0000000000000000000000000000000000000000000000000000000000000000811115610875576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f46523a204554482065786365656473207570706572204c696d697400000000006044820152606401610315565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015610902573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092691906110d9565b905060006109547f000000000000000000000000000000000000000000000000000000000000000084611114565b9050808210156109c75750807f0000000000000000000000000000000000000000000000000000000000000000818161098f5761098f611152565b04925061099e33843403610c7f565b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690555b6109ef6109e960005473ffffffffffffffffffffffffffffffffffffffff1690565b84610c7f565b610a197f000000000000000000000000000000000000000000000000000000000000000033610439565b604080518481526020810183905233917f1cbc5ab135991bd2b6a4b034a04aa2aa086dac1371cb9b16b8b5e2ed6b036bed910160405180910390a2505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610ada576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610315565b610ae46000610d63565b565b60005473ffffffffffffffffffffffffffffffffffffffff163314610b67576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610315565b73ffffffffffffffffffffffffffffffffffffffff8116610be4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a206e6577206f776e657220697320616464726573732830296044820152606401610315565b61043f81610d63565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610c7a908490610dd8565b505050565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff8416908390604051610cb691906111a5565b60006040518083038185875af1925050503d8060008114610cf3576040519150601f19603f3d011682016040523d82523d6000602084013e610cf8565b606091505b5050905080610c7a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f46523a20455448207472616e73666572206661696c65640000000000000000006044820152606401610315565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610e3a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610ebe9092919063ffffffff16565b805190915015610c7a5780806020019051810190610e5891906110f2565b610c7a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f5361666545524332303a2045524332302063616c6c206661696c6564000000006044820152606401610315565b6060610ecd8484600085610ed7565b90505b9392505050565b606082471015610f43576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f416464726573733a2062616c616e636520746f206c6f7720666f722063616c6c6044820152606401610315565b73ffffffffffffffffffffffffffffffffffffffff85163b610fc1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610315565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610fea91906111a5565b60006040518083038185875af1925050503d8060008114611027576040519150601f19603f3d011682016040523d82523d6000602084013e61102c565b606091505b509150915061103c828286611047565b979650505050505050565b60608315611056575081610ed0565b8251156110665782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031591906111c1565b73ffffffffffffffffffffffffffffffffffffffff8116811461043f57600080fd5b6000602082840312156110ce57600080fd5b8135610ed08161109a565b6000602082840312156110eb57600080fd5b5051919050565b60006020828403121561110457600080fd5b81518015158114610ed057600080fd5b80820281158282048414176106d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60005b8381101561119c578181015183820152602001611184565b50506000910152565b600082516111b7818460208701611181565b9190910192915050565b60208152600082518060208401526111e0816040850160208701611181565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea26469706673582212202efe0b88c2ab207b16987a5be70d16de1e38f9948b775b9aa5dd13c7e1caa88f64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "returns": {
          "_0": "The current owner."
        }
      },
      "renounceOwnership()": {
        "details": "Sets the zero address as the new contract owner."
      },
      "transferOwnership(address)": {
        "params": {
          "newOwner": "The new owner of the contract."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "OwnershipTransferred(address,address)": {
        "notice": "Emitted when ownership is moved from one address to another."
      }
    },
    "kind": "user",
    "methods": {
      "owner()": {
        "notice": "Returns the current owner."
      },
      "renounceOwnership()": {
        "notice": "Leaves the contract without an owner. It will not be possible to call {onlyOwner} functions anymore. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner. Emits an [`OwnershipTransferred`](#ownershiptransferred) event indicating the renounced ownership. Requirements: - Can only be called by the current owner. "
      },
      "transferOwnership(address)": {
        "notice": "Transfers ownership of the contract to a new address. Emits an [`OwnershipTransferred`](#ownershiptransferred) event indicating the transfered ownership. Requirements: - Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/FermionReactor.sol:FermionReactor",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7205,
        "contract": "contracts/FermionReactor.sol:FermionReactor",
        "label": "_active",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}